# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.availability_list_availabilities_response import AvailabilityListAvailabilitiesResponse as AvailabilityListAvailabilitiesResponseSchema
from 7_shifts_python_sdk.model.availability_list_availabilities401_response import AvailabilityListAvailabilities401Response as AvailabilityListAvailabilities401ResponseSchema
from 7_shifts_python_sdk.model.availability_list_availabilities400_response import AvailabilityListAvailabilities400Response as AvailabilityListAvailabilities400ResponseSchema
from 7_shifts_python_sdk.model.availability_list_availabilities403_response import AvailabilityListAvailabilities403Response as AvailabilityListAvailabilities403ResponseSchema

from 7_shifts_python_sdk.type.availability_list_availabilities400_response import AvailabilityListAvailabilities400Response
from 7_shifts_python_sdk.type.availability_list_availabilities403_response import AvailabilityListAvailabilities403Response
from 7_shifts_python_sdk.type.availability_list_availabilities401_response import AvailabilityListAvailabilities401Response
from 7_shifts_python_sdk.type.availability_list_availabilities_response import AvailabilityListAvailabilitiesResponse

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.availability_list_availabilities400_response import AvailabilityListAvailabilities400Response as AvailabilityListAvailabilities400ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_list_availabilities_response import AvailabilityListAvailabilitiesResponse as AvailabilityListAvailabilitiesResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_list_availabilities403_response import AvailabilityListAvailabilities403Response as AvailabilityListAvailabilities403ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_list_availabilities401_response import AvailabilityListAvailabilities401Response as AvailabilityListAvailabilities401ResponsePydantic

# Query params
CursorSchema = schemas.StrSchema


class LimitSchema(
    schemas.Int64Schema
):
    pass
LocationIdSchema = schemas.Int64Schema
UserIdSchema = schemas.Int64Schema
StatusSchema = schemas.Int64Schema
RepeatingSchema = schemas.BoolSchema


class WeekGteSchema(
    schemas.StrSchema
):
    pass


class WeekToIncludeRepeatingGteSchema(
    schemas.StrSchema
):
    pass
OrderFieldSchema = schemas.StrSchema


class OrderDirSchema(
    schemas.StrSchema
):
    pass
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'cursor': typing.Union[CursorSchema, str, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'location_id': typing.Union[LocationIdSchema, decimal.Decimal, int, ],
        'user_id': typing.Union[UserIdSchema, decimal.Decimal, int, ],
        'status': typing.Union[StatusSchema, decimal.Decimal, int, ],
        'repeating': typing.Union[RepeatingSchema, bool, ],
        'week_gte': typing.Union[WeekGteSchema, str, ],
        'week_to_include_repeating_gte': typing.Union[WeekToIncludeRepeatingGteSchema, str, ],
        'order_field': typing.Union[OrderFieldSchema, str, ],
        'order_dir': typing.Union[OrderDirSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_location_id = api_client.QueryParameter(
    name="location_id",
    style=api_client.ParameterStyle.FORM,
    schema=LocationIdSchema,
    explode=True,
)
request_query_user_id = api_client.QueryParameter(
    name="user_id",
    style=api_client.ParameterStyle.FORM,
    schema=UserIdSchema,
    explode=True,
)
request_query_status = api_client.QueryParameter(
    name="status",
    style=api_client.ParameterStyle.FORM,
    schema=StatusSchema,
    explode=True,
)
request_query_repeating = api_client.QueryParameter(
    name="repeating",
    style=api_client.ParameterStyle.FORM,
    schema=RepeatingSchema,
    explode=True,
)
request_query_week_gte = api_client.QueryParameter(
    name="week_gte",
    style=api_client.ParameterStyle.FORM,
    schema=WeekGteSchema,
    explode=True,
)
request_query_week_to_include_repeating_gte = api_client.QueryParameter(
    name="week_to_include_repeating_gte",
    style=api_client.ParameterStyle.FORM,
    schema=WeekToIncludeRepeatingGteSchema,
    explode=True,
)
request_query_order_field = api_client.QueryParameter(
    name="order_field",
    style=api_client.ParameterStyle.FORM,
    schema=OrderFieldSchema,
    explode=True,
)
request_query_order_dir = api_client.QueryParameter(
    name="order_dir",
    style=api_client.ParameterStyle.FORM,
    schema=OrderDirSchema,
    explode=True,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = AvailabilityListAvailabilitiesResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: AvailabilityListAvailabilitiesResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: AvailabilityListAvailabilitiesResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = AvailabilityListAvailabilities400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: AvailabilityListAvailabilities400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: AvailabilityListAvailabilities400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor401ResponseBodyApplicationProblemjson = AvailabilityListAvailabilities401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: AvailabilityListAvailabilities401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: AvailabilityListAvailabilities401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = AvailabilityListAvailabilities403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: AvailabilityListAvailabilities403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: AvailabilityListAvailabilities403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _list_availabilities_mapped_args(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if cursor is not None:
            _query_params["cursor"] = cursor
        if limit is not None:
            _query_params["limit"] = limit
        if location_id is not None:
            _query_params["location_id"] = location_id
        if user_id is not None:
            _query_params["user_id"] = user_id
        if status is not None:
            _query_params["status"] = status
        if repeating is not None:
            _query_params["repeating"] = repeating
        if week_gte is not None:
            _query_params["week_gte"] = week_gte
        if week_to_include_repeating_gte is not None:
            _query_params["week_to_include_repeating_gte"] = week_to_include_repeating_gte
        if order_field is not None:
            _query_params["order_field"] = order_field
        if order_dir is not None:
            _query_params["order_dir"] = order_dir
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.query = _query_params
        args.path = _path_params
        return args

    async def _alist_availabilities_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List Availabilities
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
            request_query_limit,
            request_query_location_id,
            request_query_user_id,
            request_query_status,
            request_query_repeating,
            request_query_week_gte,
            request_query_week_to_include_repeating_gte,
            request_query_order_field,
            request_query_order_dir,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/availabilities',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_availabilities_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List Availabilities
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
            request_query_limit,
            request_query_location_id,
            request_query_user_id,
            request_query_status,
            request_query_repeating,
            request_query_week_gte,
            request_query_week_to_include_repeating_gte,
            request_query_order_field,
            request_query_order_dir,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/availabilities',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListAvailabilitiesRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_availabilities(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_availabilities_mapped_args(
            company_id=company_id,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            user_id=user_id,
            status=status,
            repeating=repeating,
            week_gte=week_gte,
            week_to_include_repeating_gte=week_to_include_repeating_gte,
            order_field=order_field,
            order_dir=order_dir,
        )
        return await self._alist_availabilities_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def list_availabilities(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_availabilities_mapped_args(
            company_id=company_id,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            user_id=user_id,
            status=status,
            repeating=repeating,
            week_gte=week_gte,
            week_to_include_repeating_gte=week_to_include_repeating_gte,
            order_field=order_field,
            order_dir=order_dir,
        )
        return self._list_availabilities_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class ListAvailabilities(BaseApi):

    async def alist_availabilities(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> AvailabilityListAvailabilitiesResponsePydantic:
        raw_response = await self.raw.alist_availabilities(
            company_id=company_id,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            user_id=user_id,
            status=status,
            repeating=repeating,
            week_gte=week_gte,
            week_to_include_repeating_gte=week_to_include_repeating_gte,
            order_field=order_field,
            order_dir=order_dir,
            **kwargs,
        )
        if validate:
            return AvailabilityListAvailabilitiesResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AvailabilityListAvailabilitiesResponsePydantic, raw_response.body)
    
    
    def list_availabilities(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
        validate: bool = False,
    ) -> AvailabilityListAvailabilitiesResponsePydantic:
        raw_response = self.raw.list_availabilities(
            company_id=company_id,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            user_id=user_id,
            status=status,
            repeating=repeating,
            week_gte=week_gte,
            week_to_include_repeating_gte=week_to_include_repeating_gte,
            order_field=order_field,
            order_dir=order_dir,
        )
        if validate:
            return AvailabilityListAvailabilitiesResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AvailabilityListAvailabilitiesResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_availabilities_mapped_args(
            company_id=company_id,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            user_id=user_id,
            status=status,
            repeating=repeating,
            week_gte=week_gte,
            week_to_include_repeating_gte=week_to_include_repeating_gte,
            order_field=order_field,
            order_dir=order_dir,
        )
        return await self._alist_availabilities_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_id: int,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        status: typing.Optional[int] = None,
        repeating: typing.Optional[bool] = None,
        week_gte: typing.Optional[str] = None,
        week_to_include_repeating_gte: typing.Optional[str] = None,
        order_field: typing.Optional[str] = None,
        order_dir: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_availabilities_mapped_args(
            company_id=company_id,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            user_id=user_id,
            status=status,
            repeating=repeating,
            week_gte=week_gte,
            week_to_include_repeating_gte=week_to_include_repeating_gte,
            order_field=order_field,
            order_dir=order_dir,
        )
        return self._list_availabilities_oapg(
            query_params=args.query,
            path_params=args.path,
        )

