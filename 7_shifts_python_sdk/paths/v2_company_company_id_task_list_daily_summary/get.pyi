# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.task_management_list_task_lists_summary404_response import TaskManagementListTaskListsSummary404Response as TaskManagementListTaskListsSummary404ResponseSchema
from 7_shifts_python_sdk.model.task_management_list_task_lists_summary400_response import TaskManagementListTaskListsSummary400Response as TaskManagementListTaskListsSummary400ResponseSchema
from 7_shifts_python_sdk.model.task_management_list_task_lists_summary_response import TaskManagementListTaskListsSummaryResponse as TaskManagementListTaskListsSummaryResponseSchema
from 7_shifts_python_sdk.model.task_management_list_task_lists_summary200_response import TaskManagementListTaskListsSummary200Response as TaskManagementListTaskListsSummary200ResponseSchema
from 7_shifts_python_sdk.model.task_management_list_task_lists_summary403_response import TaskManagementListTaskListsSummary403Response as TaskManagementListTaskListsSummary403ResponseSchema
from 7_shifts_python_sdk.model.task_management_list_task_lists_summary401_response import TaskManagementListTaskListsSummary401Response as TaskManagementListTaskListsSummary401ResponseSchema

from 7_shifts_python_sdk.type.task_management_list_task_lists_summary400_response import TaskManagementListTaskListsSummary400Response
from 7_shifts_python_sdk.type.task_management_list_task_lists_summary401_response import TaskManagementListTaskListsSummary401Response
from 7_shifts_python_sdk.type.task_management_list_task_lists_summary_response import TaskManagementListTaskListsSummaryResponse
from 7_shifts_python_sdk.type.task_management_list_task_lists_summary404_response import TaskManagementListTaskListsSummary404Response
from 7_shifts_python_sdk.type.task_management_list_task_lists_summary200_response import TaskManagementListTaskListsSummary200Response
from 7_shifts_python_sdk.type.task_management_list_task_lists_summary403_response import TaskManagementListTaskListsSummary403Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.task_management_list_task_lists_summary401_response import TaskManagementListTaskListsSummary401Response as TaskManagementListTaskListsSummary401ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_list_task_lists_summary404_response import TaskManagementListTaskListsSummary404Response as TaskManagementListTaskListsSummary404ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_list_task_lists_summary200_response import TaskManagementListTaskListsSummary200Response as TaskManagementListTaskListsSummary200ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_list_task_lists_summary400_response import TaskManagementListTaskListsSummary400Response as TaskManagementListTaskListsSummary400ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_list_task_lists_summary_response import TaskManagementListTaskListsSummaryResponse as TaskManagementListTaskListsSummaryResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_list_task_lists_summary403_response import TaskManagementListTaskListsSummary403Response as TaskManagementListTaskListsSummary403ResponsePydantic

# Query params
LocationIdSchema = schemas.Int64Schema


class DateSchema(
    schemas.StrSchema
):
    pass
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'location_id': typing.Union[LocationIdSchema, decimal.Decimal, int, ],
        'date': typing.Union[DateSchema, str, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_location_id = api_client.QueryParameter(
    name="location_id",
    style=api_client.ParameterStyle.FORM,
    schema=LocationIdSchema,
    required=True,
    explode=True,
)
request_query_date = api_client.QueryParameter(
    name="date",
    style=api_client.ParameterStyle.FORM,
    schema=DateSchema,
    required=True,
    explode=True,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = TaskManagementListTaskListsSummary200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: TaskManagementListTaskListsSummary200Response


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: TaskManagementListTaskListsSummary200Response


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = TaskManagementListTaskListsSummary400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: TaskManagementListTaskListsSummary400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: TaskManagementListTaskListsSummary400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor401ResponseBodyApplicationProblemjson = TaskManagementListTaskListsSummary401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: TaskManagementListTaskListsSummary401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: TaskManagementListTaskListsSummary401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = TaskManagementListTaskListsSummary403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: TaskManagementListTaskListsSummary403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: TaskManagementListTaskListsSummary403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor404ResponseBodyApplicationProblemjson = TaskManagementListTaskListsSummary404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: TaskManagementListTaskListsSummary404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: TaskManagementListTaskListsSummary404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
    },
)
SchemaFor0ResponseBodyApplicationProblemjson = TaskManagementListTaskListsSummaryResponseSchema


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    body: TaskManagementListTaskListsSummaryResponse


@dataclass
class ApiResponseForDefaultAsync(api_client.AsyncApiResponse):
    body: TaskManagementListTaskListsSummaryResponse


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _list_task_lists_summary_mapped_args(
        self,
        company_id: int,
        location_id: int,
        date: str,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if location_id is not None:
            _query_params["location_id"] = location_id
        if date is not None:
            _query_params["date"] = date
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.query = _query_params
        args.path = _path_params
        return args

    async def _alist_task_lists_summary_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List Task Lists Summary
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_location_id,
            request_query_date,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/task_list_daily_summary',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserializationAsync(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_task_lists_summary_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List Task Lists Summary
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_location_id,
            request_query_date,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/task_list_daily_summary',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListTaskListsSummaryRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_task_lists_summary(
        self,
        company_id: int,
        location_id: int,
        date: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_task_lists_summary_mapped_args(
            company_id=company_id,
            location_id=location_id,
            date=date,
        )
        return await self._alist_task_lists_summary_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def list_task_lists_summary(
        self,
        company_id: int,
        location_id: int,
        date: str,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_task_lists_summary_mapped_args(
            company_id=company_id,
            location_id=location_id,
            date=date,
        )
        return self._list_task_lists_summary_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class ListTaskListsSummary(BaseApi):

    async def alist_task_lists_summary(
        self,
        company_id: int,
        location_id: int,
        date: str,
        validate: bool = False,
        **kwargs,
    ) -> TaskManagementListTaskListsSummary200ResponsePydantic:
        raw_response = await self.raw.alist_task_lists_summary(
            company_id=company_id,
            location_id=location_id,
            date=date,
            **kwargs,
        )
        if validate:
            return TaskManagementListTaskListsSummary200ResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(TaskManagementListTaskListsSummary200ResponsePydantic, raw_response.body)
    
    
    def list_task_lists_summary(
        self,
        company_id: int,
        location_id: int,
        date: str,
        validate: bool = False,
    ) -> TaskManagementListTaskListsSummary200ResponsePydantic:
        raw_response = self.raw.list_task_lists_summary(
            company_id=company_id,
            location_id=location_id,
            date=date,
        )
        if validate:
            return TaskManagementListTaskListsSummary200ResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(TaskManagementListTaskListsSummary200ResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_id: int,
        location_id: int,
        date: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_task_lists_summary_mapped_args(
            company_id=company_id,
            location_id=location_id,
            date=date,
        )
        return await self._alist_task_lists_summary_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_id: int,
        location_id: int,
        date: str,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_task_lists_summary_mapped_args(
            company_id=company_id,
            location_id=location_id,
            date=date,
        )
        return self._list_task_lists_summary_oapg(
            query_params=args.query,
            path_params=args.path,
        )

