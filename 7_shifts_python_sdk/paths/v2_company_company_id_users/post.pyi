# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.users_create_new_user403_response import UsersCreateNewUser403Response as UsersCreateNewUser403ResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user401_response import UsersCreateNewUser401Response as UsersCreateNewUser401ResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user422_response import UsersCreateNewUser422Response as UsersCreateNewUser422ResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user_request_wages import UsersCreateNewUserRequestWages as UsersCreateNewUserRequestWagesSchema
from 7_shifts_python_sdk.model.users_create_new_user_request_location_ids import UsersCreateNewUserRequestLocationIds as UsersCreateNewUserRequestLocationIdsSchema
from 7_shifts_python_sdk.model.users_create_new_user_request_department_ids import UsersCreateNewUserRequestDepartmentIds as UsersCreateNewUserRequestDepartmentIdsSchema
from 7_shifts_python_sdk.model.users_create_new_user400_response import UsersCreateNewUser400Response as UsersCreateNewUser400ResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user404_response import UsersCreateNewUser404Response as UsersCreateNewUser404ResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user_response import UsersCreateNewUserResponse as UsersCreateNewUserResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user500_response import UsersCreateNewUser500Response as UsersCreateNewUser500ResponseSchema
from 7_shifts_python_sdk.model.users_create_new_user_request import UsersCreateNewUserRequest as UsersCreateNewUserRequestSchema
from 7_shifts_python_sdk.model.users_create_new_user_request_role_ids import UsersCreateNewUserRequestRoleIds as UsersCreateNewUserRequestRoleIdsSchema

from 7_shifts_python_sdk.type.users_create_new_user_request_wages import UsersCreateNewUserRequestWages
from 7_shifts_python_sdk.type.users_create_new_user_request import UsersCreateNewUserRequest
from 7_shifts_python_sdk.type.users_create_new_user_response import UsersCreateNewUserResponse
from 7_shifts_python_sdk.type.users_create_new_user_request_location_ids import UsersCreateNewUserRequestLocationIds
from 7_shifts_python_sdk.type.users_create_new_user403_response import UsersCreateNewUser403Response
from 7_shifts_python_sdk.type.users_create_new_user_request_role_ids import UsersCreateNewUserRequestRoleIds
from 7_shifts_python_sdk.type.users_create_new_user_request_department_ids import UsersCreateNewUserRequestDepartmentIds
from 7_shifts_python_sdk.type.users_create_new_user422_response import UsersCreateNewUser422Response
from 7_shifts_python_sdk.type.users_create_new_user404_response import UsersCreateNewUser404Response
from 7_shifts_python_sdk.type.users_create_new_user500_response import UsersCreateNewUser500Response
from 7_shifts_python_sdk.type.users_create_new_user400_response import UsersCreateNewUser400Response
from 7_shifts_python_sdk.type.users_create_new_user401_response import UsersCreateNewUser401Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.users_create_new_user404_response import UsersCreateNewUser404Response as UsersCreateNewUser404ResponsePydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user401_response import UsersCreateNewUser401Response as UsersCreateNewUser401ResponsePydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user_request import UsersCreateNewUserRequest as UsersCreateNewUserRequestPydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user403_response import UsersCreateNewUser403Response as UsersCreateNewUser403ResponsePydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user_request_wages import UsersCreateNewUserRequestWages as UsersCreateNewUserRequestWagesPydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user_request_location_ids import UsersCreateNewUserRequestLocationIds as UsersCreateNewUserRequestLocationIdsPydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user_request_department_ids import UsersCreateNewUserRequestDepartmentIds as UsersCreateNewUserRequestDepartmentIdsPydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user422_response import UsersCreateNewUser422Response as UsersCreateNewUser422ResponsePydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user400_response import UsersCreateNewUser400Response as UsersCreateNewUser400ResponsePydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user_request_role_ids import UsersCreateNewUserRequestRoleIds as UsersCreateNewUserRequestRoleIdsPydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user500_response import UsersCreateNewUser500Response as UsersCreateNewUser500ResponsePydantic
from 7_shifts_python_sdk.pydantic.users_create_new_user_response import UsersCreateNewUserResponse as UsersCreateNewUserResponsePydantic

# Header params


class XApiVersionSchema(
    schemas.StrSchema
):
    pass
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = UsersCreateNewUserRequestSchema


request_body_users_create_new_user_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = UsersCreateNewUserResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: UsersCreateNewUserResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUserResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = UsersCreateNewUser400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: UsersCreateNewUser400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUser400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor401ResponseBodyApplicationProblemjson = UsersCreateNewUser401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: UsersCreateNewUser401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUser401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = UsersCreateNewUser403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: UsersCreateNewUser403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUser403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor404ResponseBodyApplicationProblemjson = UsersCreateNewUser404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: UsersCreateNewUser404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUser404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
    },
)
SchemaFor422ResponseBodyApplicationProblemjson = UsersCreateNewUser422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: UsersCreateNewUser422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUser422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationProblemjson),
    },
)
SchemaFor500ResponseBodyApplicationProblemjson = UsersCreateNewUser500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: UsersCreateNewUser500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: UsersCreateNewUser500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_new_user_mapped_args(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _header_params = {}
        _path_params = {}
        _body = {}
        if first_name is not None:
            _body["first_name"] = first_name
        if last_name is not None:
            _body["last_name"] = last_name
        if preferred_first_name is not None:
            _body["preferred_first_name"] = preferred_first_name
        if preferred_last_name is not None:
            _body["preferred_last_name"] = preferred_last_name
        if location_ids is not None:
            _body["location_ids"] = location_ids
        if department_ids is not None:
            _body["department_ids"] = department_ids
        if role_ids is not None:
            _body["role_ids"] = role_ids
        if email is not None:
            _body["email"] = email
        if mobile_number is not None:
            _body["mobile_number"] = mobile_number
        if home_number is not None:
            _body["home_number"] = home_number
        if address is not None:
            _body["address"] = address
        if postal_zip is not None:
            _body["postal_zip"] = postal_zip
        if city is not None:
            _body["city"] = city
        if prov_state is not None:
            _body["prov_state"] = prov_state
        if invite_user is not None:
            _body["invite_user"] = invite_user
        if notes is not None:
            _body["notes"] = notes
        if hire_date is not None:
            _body["hire_date"] = hire_date
        if type is not None:
            _body["type"] = type
        if employee_id is not None:
            _body["employee_id"] = employee_id
        if punch_id is not None:
            _body["punch_id"] = punch_id
        if birth_date is not None:
            _body["birth_date"] = birth_date
        if language is not None:
            _body["language"] = language
        if appear_as_employee is not None:
            _body["appear_as_employee"] = appear_as_employee
        if subscribe_to_updates is not None:
            _body["subscribe_to_updates"] = subscribe_to_updates
        if max_weekly_hours is not None:
            _body["max_weekly_hours"] = max_weekly_hours
        if wage_cents is not None:
            _body["wage_cents"] = wage_cents
        if wage_type is not None:
            _body["wage_type"] = wage_type
        if wages is not None:
            _body["wages"] = wages
        if permissions_template_id is not None:
            _body["permissions_template_id"] = permissions_template_id
        args.body = _body
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acreate_new_user_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create User
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/users',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_users_create_new_user_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_user_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create User
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/users',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_users_create_new_user_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewUserRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_user(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_user_mapped_args(
            first_name=first_name,
            last_name=last_name,
            location_ids=location_ids,
            department_ids=department_ids,
            type=type,
            company_id=company_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_new_user_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def create_new_user(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_user_mapped_args(
            first_name=first_name,
            last_name=last_name,
            location_ids=location_ids,
            department_ids=department_ids,
            type=type,
            company_id=company_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_new_user_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

class CreateNewUser(BaseApi):

    async def acreate_new_user(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> UsersCreateNewUserResponsePydantic:
        raw_response = await self.raw.acreate_new_user(
            first_name=first_name,
            last_name=last_name,
            location_ids=location_ids,
            department_ids=department_ids,
            type=type,
            company_id=company_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            **kwargs,
        )
        if validate:
            return UsersCreateNewUserResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(UsersCreateNewUserResponsePydantic, raw_response.body)
    
    
    def create_new_user(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
    ) -> UsersCreateNewUserResponsePydantic:
        raw_response = self.raw.create_new_user(
            first_name=first_name,
            last_name=last_name,
            location_ids=location_ids,
            department_ids=department_ids,
            type=type,
            company_id=company_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        if validate:
            return UsersCreateNewUserResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(UsersCreateNewUserResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_user_mapped_args(
            first_name=first_name,
            last_name=last_name,
            location_ids=location_ids,
            department_ids=department_ids,
            type=type,
            company_id=company_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_new_user_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        first_name: str,
        last_name: str,
        location_ids: UsersCreateNewUserRequestLocationIds,
        department_ids: UsersCreateNewUserRequestDepartmentIds,
        type: str,
        company_id: int,
        preferred_first_name: typing.Optional[typing.Optional[str]] = None,
        preferred_last_name: typing.Optional[typing.Optional[str]] = None,
        role_ids: typing.Optional[UsersCreateNewUserRequestRoleIds] = None,
        email: typing.Optional[str] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        home_number: typing.Optional[typing.Optional[str]] = None,
        address: typing.Optional[typing.Optional[str]] = None,
        postal_zip: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        prov_state: typing.Optional[typing.Optional[str]] = None,
        invite_user: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        hire_date: typing.Optional[typing.Optional[date]] = None,
        employee_id: typing.Optional[typing.Optional[str]] = None,
        punch_id: typing.Optional[typing.Optional[str]] = None,
        birth_date: typing.Optional[typing.Optional[date]] = None,
        language: typing.Optional[str] = None,
        appear_as_employee: typing.Optional[typing.Optional[bool]] = None,
        subscribe_to_updates: typing.Optional[typing.Optional[bool]] = None,
        max_weekly_hours: typing.Optional[typing.Optional[int]] = None,
        wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        wage_type: typing.Optional[typing.Optional[str]] = None,
        wages: typing.Optional[UsersCreateNewUserRequestWages] = None,
        permissions_template_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_user_mapped_args(
            first_name=first_name,
            last_name=last_name,
            location_ids=location_ids,
            department_ids=department_ids,
            type=type,
            company_id=company_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_new_user_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

