# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.locations_create_response import LocationsCreateResponse as LocationsCreateResponseSchema
from 7_shifts_python_sdk.model.locations_create400_response import LocationsCreate400Response as LocationsCreate400ResponseSchema
from 7_shifts_python_sdk.model.locations_create403_response import LocationsCreate403Response as LocationsCreate403ResponseSchema
from 7_shifts_python_sdk.model.locations_create500_response import LocationsCreate500Response as LocationsCreate500ResponseSchema
from 7_shifts_python_sdk.model.locations_create_request import LocationsCreateRequest as LocationsCreateRequestSchema

from 7_shifts_python_sdk.type.locations_create400_response import LocationsCreate400Response
from 7_shifts_python_sdk.type.locations_create500_response import LocationsCreate500Response
from 7_shifts_python_sdk.type.locations_create_request import LocationsCreateRequest
from 7_shifts_python_sdk.type.locations_create_response import LocationsCreateResponse
from 7_shifts_python_sdk.type.locations_create403_response import LocationsCreate403Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.locations_create_response import LocationsCreateResponse as LocationsCreateResponsePydantic
from 7_shifts_python_sdk.pydantic.locations_create500_response import LocationsCreate500Response as LocationsCreate500ResponsePydantic
from 7_shifts_python_sdk.pydantic.locations_create400_response import LocationsCreate400Response as LocationsCreate400ResponsePydantic
from 7_shifts_python_sdk.pydantic.locations_create403_response import LocationsCreate403Response as LocationsCreate403ResponsePydantic
from 7_shifts_python_sdk.pydantic.locations_create_request import LocationsCreateRequest as LocationsCreateRequestPydantic

from . import path

# Header params


class XApiVersionSchema(
    schemas.StrSchema
):


    class MetaOapg:
        regex=[{
            'pattern': r'^\d{4}-\d{2}-\d{2}$',
        }]
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = LocationsCreateRequestSchema


request_body_locations_create_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'OAuth2',
    'OAuth2',
    'OAuth2',
    'cookieAuth',
]
SchemaFor201ResponseBodyApplicationJson = LocationsCreateResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: LocationsCreateResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: LocationsCreateResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = LocationsCreate400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: LocationsCreate400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: LocationsCreate400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = LocationsCreate403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: LocationsCreate403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: LocationsCreate403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor500ResponseBodyApplicationProblemjson = LocationsCreate500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: LocationsCreate500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: LocationsCreate500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
    },
)
_status_code_to_response = {
    '201': _response_for_201,
    '400': _response_for_400,
    '403': _response_for_403,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_mapped_args(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _header_params = {}
        _path_params = {}
        _body = {}
        if name is not None:
            _body["name"] = name
        if country is not None:
            _body["country"] = country
        if formatted_address is not None:
            _body["formatted_address"] = formatted_address
        if state is not None:
            _body["state"] = state
        if city is not None:
            _body["city"] = city
        if latitude is not None:
            _body["latitude"] = latitude
        if longitude is not None:
            _body["longitude"] = longitude
        if place_id is not None:
            _body["place_id"] = place_id
        if timezone is not None:
            _body["timezone"] = timezone
        if holiday_pay is not None:
            _body["holiday_pay"] = holiday_pay
        if sun_hours_close is not None:
            _body["sun_hours_close"] = sun_hours_close
        if mon_hours_close is not None:
            _body["mon_hours_close"] = mon_hours_close
        if tue_hours_close is not None:
            _body["tue_hours_close"] = tue_hours_close
        if wed_hours_close is not None:
            _body["wed_hours_close"] = wed_hours_close
        if thu_hours_close is not None:
            _body["thu_hours_close"] = thu_hours_close
        if fri_hours_close is not None:
            _body["fri_hours_close"] = fri_hours_close
        if sat_hours_close is not None:
            _body["sat_hours_close"] = sat_hours_close
        if sun_hours_open is not None:
            _body["sun_hours_open"] = sun_hours_open
        if mon_hours_open is not None:
            _body["mon_hours_open"] = mon_hours_open
        if tue_hours_open is not None:
            _body["tue_hours_open"] = tue_hours_open
        if wed_hours_open is not None:
            _body["wed_hours_open"] = wed_hours_open
        if thu_hours_open is not None:
            _body["thu_hours_open"] = thu_hours_open
        if fri_hours_open is not None:
            _body["fri_hours_open"] = fri_hours_open
        if sat_hours_open is not None:
            _body["sat_hours_open"] = sat_hours_open
        if sun_is_closed is not None:
            _body["sun_is_closed"] = sun_is_closed
        if mon_is_closed is not None:
            _body["mon_is_closed"] = mon_is_closed
        if tue_is_closed is not None:
            _body["tue_is_closed"] = tue_is_closed
        if wed_is_closed is not None:
            _body["wed_is_closed"] = wed_is_closed
        if thu_is_closed is not None:
            _body["thu_is_closed"] = thu_is_closed
        if fri_is_closed is not None:
            _body["fri_is_closed"] = fri_is_closed
        if sat_is_closed is not None:
            _body["sat_is_closed"] = sat_is_closed
        if enable_shift_feedback is not None:
            _body["enable_shift_feedback"] = enable_shift_feedback
        if shift_feedback is not None:
            _body["shift_feedback"] = shift_feedback
        if coupon is not None:
            _body["coupon"] = coupon
        if stripe_token_id is not None:
            _body["stripe_token_id"] = stripe_token_id
        if copy_from_id is not None:
            _body["copy_from_id"] = copy_from_id
        args.body = _body
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acreate_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create Location
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/locations',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_locations_create_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create Location
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/locations',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_locations_create_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_mapped_args(
            name=name,
            country=country,
            company_id=company_id,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def create(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_mapped_args(
            name=name,
            country=country,
            company_id=company_id,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

class Create(BaseApi):

    async def acreate(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> LocationsCreateResponsePydantic:
        raw_response = await self.raw.acreate(
            name=name,
            country=country,
            company_id=company_id,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            **kwargs,
        )
        if validate:
            return LocationsCreateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(LocationsCreateResponsePydantic, raw_response.body)
    
    
    def create(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
    ) -> LocationsCreateResponsePydantic:
        raw_response = self.raw.create(
            name=name,
            country=country,
            company_id=company_id,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        if validate:
            return LocationsCreateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(LocationsCreateResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_mapped_args(
            name=name,
            country=country,
            company_id=company_id,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        name: str,
        country: str,
        company_id: int,
        formatted_address: typing.Optional[str] = None,
        state: typing.Optional[typing.Optional[str]] = None,
        city: typing.Optional[typing.Optional[str]] = None,
        latitude: typing.Optional[str] = None,
        longitude: typing.Optional[str] = None,
        place_id: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        holiday_pay: typing.Optional[bool] = None,
        sun_hours_close: typing.Optional[str] = None,
        mon_hours_close: typing.Optional[str] = None,
        tue_hours_close: typing.Optional[str] = None,
        wed_hours_close: typing.Optional[str] = None,
        thu_hours_close: typing.Optional[str] = None,
        fri_hours_close: typing.Optional[str] = None,
        sat_hours_close: typing.Optional[str] = None,
        sun_hours_open: typing.Optional[str] = None,
        mon_hours_open: typing.Optional[typing.Optional[str]] = None,
        tue_hours_open: typing.Optional[typing.Optional[str]] = None,
        wed_hours_open: typing.Optional[typing.Optional[str]] = None,
        thu_hours_open: typing.Optional[typing.Optional[str]] = None,
        fri_hours_open: typing.Optional[typing.Optional[str]] = None,
        sat_hours_open: typing.Optional[typing.Optional[str]] = None,
        sun_is_closed: typing.Optional[typing.Optional[bool]] = None,
        mon_is_closed: typing.Optional[typing.Optional[bool]] = None,
        tue_is_closed: typing.Optional[typing.Optional[bool]] = None,
        wed_is_closed: typing.Optional[typing.Optional[bool]] = None,
        thu_is_closed: typing.Optional[typing.Optional[bool]] = None,
        fri_is_closed: typing.Optional[typing.Optional[bool]] = None,
        sat_is_closed: typing.Optional[typing.Optional[bool]] = None,
        enable_shift_feedback: typing.Optional[bool] = None,
        shift_feedback: typing.Optional[bool] = None,
        coupon: typing.Optional[typing.Optional[str]] = None,
        stripe_token_id: typing.Optional[str] = None,
        copy_from_id: typing.Optional[typing.Optional[int]] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_mapped_args(
            name=name,
            country=country,
            company_id=company_id,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

