# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.integration_mappings_create_sales_category_mappings_bulk403_response import IntegrationMappingsCreateSalesCategoryMappingsBulk403Response as IntegrationMappingsCreateSalesCategoryMappingsBulk403ResponseSchema
from 7_shifts_python_sdk.model.integration_mappings_create_sales_category_mappings_bulk500_response import IntegrationMappingsCreateSalesCategoryMappingsBulk500Response as IntegrationMappingsCreateSalesCategoryMappingsBulk500ResponseSchema
from 7_shifts_python_sdk.model.integration_mappings_create_sales_category_mappings_bulk401_response import IntegrationMappingsCreateSalesCategoryMappingsBulk401Response as IntegrationMappingsCreateSalesCategoryMappingsBulk401ResponseSchema
from 7_shifts_python_sdk.model.integration_mappings_create_sales_category_mappings_bulk_response import IntegrationMappingsCreateSalesCategoryMappingsBulkResponse as IntegrationMappingsCreateSalesCategoryMappingsBulkResponseSchema
from 7_shifts_python_sdk.model.integration_mappings_create_sales_category_mappings_bulk_request import IntegrationMappingsCreateSalesCategoryMappingsBulkRequest as IntegrationMappingsCreateSalesCategoryMappingsBulkRequestSchema
from 7_shifts_python_sdk.model.integration_mappings_create_sales_category_mappings_bulk400_response import IntegrationMappingsCreateSalesCategoryMappingsBulk400Response as IntegrationMappingsCreateSalesCategoryMappingsBulk400ResponseSchema

from 7_shifts_python_sdk.type.integration_mappings_create_sales_category_mappings_bulk403_response import IntegrationMappingsCreateSalesCategoryMappingsBulk403Response
from 7_shifts_python_sdk.type.integration_mappings_create_sales_category_mappings_bulk400_response import IntegrationMappingsCreateSalesCategoryMappingsBulk400Response
from 7_shifts_python_sdk.type.integration_mappings_create_sales_category_mappings_bulk_request import IntegrationMappingsCreateSalesCategoryMappingsBulkRequest
from 7_shifts_python_sdk.type.integration_mappings_create_sales_category_mappings_bulk_response import IntegrationMappingsCreateSalesCategoryMappingsBulkResponse
from 7_shifts_python_sdk.type.integration_mappings_create_sales_category_mappings_bulk401_response import IntegrationMappingsCreateSalesCategoryMappingsBulk401Response
from 7_shifts_python_sdk.type.integration_mappings_create_sales_category_mappings_bulk500_response import IntegrationMappingsCreateSalesCategoryMappingsBulk500Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.integration_mappings_create_sales_category_mappings_bulk403_response import IntegrationMappingsCreateSalesCategoryMappingsBulk403Response as IntegrationMappingsCreateSalesCategoryMappingsBulk403ResponsePydantic
from 7_shifts_python_sdk.pydantic.integration_mappings_create_sales_category_mappings_bulk_response import IntegrationMappingsCreateSalesCategoryMappingsBulkResponse as IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic
from 7_shifts_python_sdk.pydantic.integration_mappings_create_sales_category_mappings_bulk400_response import IntegrationMappingsCreateSalesCategoryMappingsBulk400Response as IntegrationMappingsCreateSalesCategoryMappingsBulk400ResponsePydantic
from 7_shifts_python_sdk.pydantic.integration_mappings_create_sales_category_mappings_bulk401_response import IntegrationMappingsCreateSalesCategoryMappingsBulk401Response as IntegrationMappingsCreateSalesCategoryMappingsBulk401ResponsePydantic
from 7_shifts_python_sdk.pydantic.integration_mappings_create_sales_category_mappings_bulk500_response import IntegrationMappingsCreateSalesCategoryMappingsBulk500Response as IntegrationMappingsCreateSalesCategoryMappingsBulk500ResponsePydantic
from 7_shifts_python_sdk.pydantic.integration_mappings_create_sales_category_mappings_bulk_request import IntegrationMappingsCreateSalesCategoryMappingsBulkRequest as IntegrationMappingsCreateSalesCategoryMappingsBulkRequestPydantic

# Query params
DepartmentIdSchema = schemas.Int64Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'department_id': typing.Union[DepartmentIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_department_id = api_client.QueryParameter(
    name="department_id",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentIdSchema,
    required=True,
    explode=True,
)
# Header params


class XApiVersionSchema(
    schemas.StrSchema
):
    pass
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
LocationIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
        'location_id': typing.Union[LocationIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
request_path_location_id = api_client.PathParameter(
    name="location_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=LocationIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = IntegrationMappingsCreateSalesCategoryMappingsBulkRequestSchema


request_body_integration_mappings_create_sales_category_mappings_bulk_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = IntegrationMappingsCreateSalesCategoryMappingsBulkResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulkResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulkResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = IntegrationMappingsCreateSalesCategoryMappingsBulk400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor401ResponseBodyApplicationProblemjson = IntegrationMappingsCreateSalesCategoryMappingsBulk401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = IntegrationMappingsCreateSalesCategoryMappingsBulk403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor500ResponseBodyApplicationProblemjson = IntegrationMappingsCreateSalesCategoryMappingsBulk500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: IntegrationMappingsCreateSalesCategoryMappingsBulk500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_sales_category_mappings_bulk_mapped_args(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        _path_params = {}
        _body = {}
        args.body = body if body is not None else _body
        if department_id is not None:
            _query_params["department_id"] = department_id
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        if location_id is not None:
            _path_params["location_id"] = location_id
        args.query = _query_params
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acreate_sales_category_mappings_bulk_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create Sales Category Mappings
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_location_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_department_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/location/{location_id}/sales_category_mappings_bulk',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_integration_mappings_create_sales_category_mappings_bulk_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_sales_category_mappings_bulk_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create Sales Category Mappings
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_location_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_department_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/location/{location_id}/sales_category_mappings_bulk',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_integration_mappings_create_sales_category_mappings_bulk_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateSalesCategoryMappingsBulkRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_sales_category_mappings_bulk(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_sales_category_mappings_bulk_mapped_args(
            body=body,
            company_id=company_id,
            location_id=location_id,
            department_id=department_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_sales_category_mappings_bulk_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def create_sales_category_mappings_bulk(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_sales_category_mappings_bulk_mapped_args(
            body=body,
            company_id=company_id,
            location_id=location_id,
            department_id=department_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_sales_category_mappings_bulk_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

class CreateSalesCategoryMappingsBulk(BaseApi):

    async def acreate_sales_category_mappings_bulk(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic:
        raw_response = await self.raw.acreate_sales_category_mappings_bulk(
            body=body,
            company_id=company_id,
            location_id=location_id,
            department_id=department_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            **kwargs,
        )
        if validate:
            return IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic, raw_response.body)
    
    
    def create_sales_category_mappings_bulk(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
    ) -> IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic:
        raw_response = self.raw.create_sales_category_mappings_bulk(
            body=body,
            company_id=company_id,
            location_id=location_id,
            department_id=department_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        if validate:
            return IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(IntegrationMappingsCreateSalesCategoryMappingsBulkResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_sales_category_mappings_bulk_mapped_args(
            body=body,
            company_id=company_id,
            location_id=location_id,
            department_id=department_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_sales_category_mappings_bulk_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        body: IntegrationMappingsCreateSalesCategoryMappingsBulkRequest,
        company_id: int,
        location_id: int,
        department_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_sales_category_mappings_bulk_mapped_args(
            body=body,
            company_id=company_id,
            location_id=location_id,
            department_id=department_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_sales_category_mappings_bulk_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

