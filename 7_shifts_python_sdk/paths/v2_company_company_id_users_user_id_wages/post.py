# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.user_wages_create_request import UserWagesCreateRequest as UserWagesCreateRequestSchema
from 7_shifts_python_sdk.model.user_wages_create422_response import UserWagesCreate422Response as UserWagesCreate422ResponseSchema
from 7_shifts_python_sdk.model.user_wages_create409_response import UserWagesCreate409Response as UserWagesCreate409ResponseSchema
from 7_shifts_python_sdk.model.user_wages_create500_response import UserWagesCreate500Response as UserWagesCreate500ResponseSchema
from 7_shifts_python_sdk.model.user_wages_create403_response import UserWagesCreate403Response as UserWagesCreate403ResponseSchema
from 7_shifts_python_sdk.model.user_wages_create_response import UserWagesCreateResponse as UserWagesCreateResponseSchema

from 7_shifts_python_sdk.type.user_wages_create403_response import UserWagesCreate403Response
from 7_shifts_python_sdk.type.user_wages_create_request import UserWagesCreateRequest
from 7_shifts_python_sdk.type.user_wages_create500_response import UserWagesCreate500Response
from 7_shifts_python_sdk.type.user_wages_create_response import UserWagesCreateResponse
from 7_shifts_python_sdk.type.user_wages_create409_response import UserWagesCreate409Response
from 7_shifts_python_sdk.type.user_wages_create422_response import UserWagesCreate422Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.user_wages_create_response import UserWagesCreateResponse as UserWagesCreateResponsePydantic
from 7_shifts_python_sdk.pydantic.user_wages_create422_response import UserWagesCreate422Response as UserWagesCreate422ResponsePydantic
from 7_shifts_python_sdk.pydantic.user_wages_create403_response import UserWagesCreate403Response as UserWagesCreate403ResponsePydantic
from 7_shifts_python_sdk.pydantic.user_wages_create500_response import UserWagesCreate500Response as UserWagesCreate500ResponsePydantic
from 7_shifts_python_sdk.pydantic.user_wages_create409_response import UserWagesCreate409Response as UserWagesCreate409ResponsePydantic
from 7_shifts_python_sdk.pydantic.user_wages_create_request import UserWagesCreateRequest as UserWagesCreateRequestPydantic

from . import path

# Header params


class XApiVersionSchema(
    schemas.StrSchema
):


    class MetaOapg:
        regex=[{
            'pattern': r'^\d{4}-\d{2}-\d{2}$',
        }]
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
UserIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
        'user_id': typing.Union[UserIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
request_path_user_id = api_client.PathParameter(
    name="user_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=UserIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = UserWagesCreateRequestSchema


request_body_user_wages_create_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'OAuth2',
    'OAuth2',
    'OAuth2',
    'cookieAuth',
]
SchemaFor201ResponseBodyApplicationJson = UserWagesCreateResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: UserWagesCreateResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: UserWagesCreateResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = UserWagesCreate403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: UserWagesCreate403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: UserWagesCreate403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor409ResponseBodyApplicationProblemjson = UserWagesCreate409ResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: UserWagesCreate409Response


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: UserWagesCreate409Response


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationProblemjson),
    },
)
SchemaFor422ResponseBodyApplicationProblemjson = UserWagesCreate422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: UserWagesCreate422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: UserWagesCreate422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationProblemjson),
    },
)
SchemaFor500ResponseBodyApplicationProblemjson = UserWagesCreate500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: UserWagesCreate500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: UserWagesCreate500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
    },
)
_status_code_to_response = {
    '201': _response_for_201,
    '403': _response_for_403,
    '409': _response_for_409,
    '422': _response_for_422,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_mapped_args(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _header_params = {}
        _path_params = {}
        _body = {}
        if effective_date is not None:
            _body["effective_date"] = effective_date
        if role_id is not None:
            _body["role_id"] = role_id
        if wage_type is not None:
            _body["wage_type"] = wage_type
        if wage_cents is not None:
            _body["wage_cents"] = wage_cents
        args.body = _body
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        if user_id is not None:
            _path_params["user_id"] = user_id
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acreate_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create User Wage
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_user_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/users/{user_id}/wages',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_user_wages_create_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create User Wage
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_user_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/users/{user_id}/wages',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_user_wages_create_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_mapped_args(
            effective_date=effective_date,
            wage_type=wage_type,
            wage_cents=wage_cents,
            company_id=company_id,
            user_id=user_id,
            role_id=role_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def create(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_mapped_args(
            effective_date=effective_date,
            wage_type=wage_type,
            wage_cents=wage_cents,
            company_id=company_id,
            user_id=user_id,
            role_id=role_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

class Create(BaseApi):

    async def acreate(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> UserWagesCreateResponsePydantic:
        raw_response = await self.raw.acreate(
            effective_date=effective_date,
            wage_type=wage_type,
            wage_cents=wage_cents,
            company_id=company_id,
            user_id=user_id,
            role_id=role_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            **kwargs,
        )
        if validate:
            return UserWagesCreateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(UserWagesCreateResponsePydantic, raw_response.body)
    
    
    def create(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
    ) -> UserWagesCreateResponsePydantic:
        raw_response = self.raw.create(
            effective_date=effective_date,
            wage_type=wage_type,
            wage_cents=wage_cents,
            company_id=company_id,
            user_id=user_id,
            role_id=role_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        if validate:
            return UserWagesCreateResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(UserWagesCreateResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_mapped_args(
            effective_date=effective_date,
            wage_type=wage_type,
            wage_cents=wage_cents,
            company_id=company_id,
            user_id=user_id,
            role_id=role_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        effective_date: str,
        wage_type: str,
        wage_cents: int,
        company_id: int,
        user_id: int,
        role_id: typing.Optional[int] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_mapped_args(
            effective_date=effective_date,
            wage_type=wage_type,
            wage_cents=wage_cents,
            company_id=company_id,
            user_id=user_id,
            role_id=role_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

