# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.availability_update_by_id_request import AvailabilityUpdateByIdRequest as AvailabilityUpdateByIdRequestSchema
from 7_shifts_python_sdk.model.availability_update_by_id_response import AvailabilityUpdateByIdResponse as AvailabilityUpdateByIdResponseSchema
from 7_shifts_python_sdk.model.availability_update_by_id403_response import AvailabilityUpdateById403Response as AvailabilityUpdateById403ResponseSchema
from 7_shifts_python_sdk.model.availability_update_by_id404_response import AvailabilityUpdateById404Response as AvailabilityUpdateById404ResponseSchema
from 7_shifts_python_sdk.model.availability_update_by_id400_response import AvailabilityUpdateById400Response as AvailabilityUpdateById400ResponseSchema
from 7_shifts_python_sdk.model.availability_update_by_id422_response import AvailabilityUpdateById422Response as AvailabilityUpdateById422ResponseSchema
from 7_shifts_python_sdk.model.availability_update_by_id409_response import AvailabilityUpdateById409Response as AvailabilityUpdateById409ResponseSchema

from 7_shifts_python_sdk.type.availability_update_by_id_response import AvailabilityUpdateByIdResponse
from 7_shifts_python_sdk.type.availability_update_by_id_request import AvailabilityUpdateByIdRequest
from 7_shifts_python_sdk.type.availability_update_by_id409_response import AvailabilityUpdateById409Response
from 7_shifts_python_sdk.type.availability_update_by_id404_response import AvailabilityUpdateById404Response
from 7_shifts_python_sdk.type.availability_update_by_id400_response import AvailabilityUpdateById400Response
from 7_shifts_python_sdk.type.availability_update_by_id403_response import AvailabilityUpdateById403Response
from 7_shifts_python_sdk.type.availability_update_by_id422_response import AvailabilityUpdateById422Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.availability_update_by_id404_response import AvailabilityUpdateById404Response as AvailabilityUpdateById404ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_by_id400_response import AvailabilityUpdateById400Response as AvailabilityUpdateById400ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_by_id_response import AvailabilityUpdateByIdResponse as AvailabilityUpdateByIdResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_by_id422_response import AvailabilityUpdateById422Response as AvailabilityUpdateById422ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_by_id409_response import AvailabilityUpdateById409Response as AvailabilityUpdateById409ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_by_id_request import AvailabilityUpdateByIdRequest as AvailabilityUpdateByIdRequestPydantic
from 7_shifts_python_sdk.pydantic.availability_update_by_id403_response import AvailabilityUpdateById403Response as AvailabilityUpdateById403ResponsePydantic

# Path params
CompanyIdSchema = schemas.Int64Schema
AvailabilityIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
        'availability_id': typing.Union[AvailabilityIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
request_path_availability_id = api_client.PathParameter(
    name="availability_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AvailabilityIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = AvailabilityUpdateByIdRequestSchema


request_body_availability_update_by_id_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = AvailabilityUpdateByIdResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: AvailabilityUpdateByIdResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateByIdResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = AvailabilityUpdateById400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: AvailabilityUpdateById400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateById400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = AvailabilityUpdateById403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: AvailabilityUpdateById403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateById403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor404ResponseBodyApplicationProblemjson = AvailabilityUpdateById404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: AvailabilityUpdateById404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateById404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
    },
)
SchemaFor409ResponseBodyApplicationProblemjson = AvailabilityUpdateById409ResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: AvailabilityUpdateById409Response


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateById409Response


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationProblemjson),
    },
)
SchemaFor422ResponseBodyApplicationProblemjson = AvailabilityUpdateById422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: AvailabilityUpdateById422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateById422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _update_by_id_mapped_args(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if week is not None:
            _body["week"] = week
        if week_to is not None:
            _body["week_to"] = week_to
        if repeat is not None:
            _body["repeat"] = repeat
        if mon is not None:
            _body["mon"] = mon
        if mon_from is not None:
            _body["mon_from"] = mon_from
        if mon_to is not None:
            _body["mon_to"] = mon_to
        if mon_comments is not None:
            _body["mon_comments"] = mon_comments
        if mon_reason is not None:
            _body["mon_reason"] = mon_reason
        if tue is not None:
            _body["tue"] = tue
        if tue_from is not None:
            _body["tue_from"] = tue_from
        if tue_to is not None:
            _body["tue_to"] = tue_to
        if tue_comments is not None:
            _body["tue_comments"] = tue_comments
        if tue_reason is not None:
            _body["tue_reason"] = tue_reason
        if wed is not None:
            _body["wed"] = wed
        if wed_from is not None:
            _body["wed_from"] = wed_from
        if wed_to is not None:
            _body["wed_to"] = wed_to
        if wed_comments is not None:
            _body["wed_comments"] = wed_comments
        if wed_reason is not None:
            _body["wed_reason"] = wed_reason
        if thu is not None:
            _body["thu"] = thu
        if thu_from is not None:
            _body["thu_from"] = thu_from
        if thu_to is not None:
            _body["thu_to"] = thu_to
        if thu_comments is not None:
            _body["thu_comments"] = thu_comments
        if thu_reason is not None:
            _body["thu_reason"] = thu_reason
        if fri is not None:
            _body["fri"] = fri
        if fri_from is not None:
            _body["fri_from"] = fri_from
        if fri_to is not None:
            _body["fri_to"] = fri_to
        if fri_comments is not None:
            _body["fri_comments"] = fri_comments
        if fri_reason is not None:
            _body["fri_reason"] = fri_reason
        if sat is not None:
            _body["sat"] = sat
        if sat_from is not None:
            _body["sat_from"] = sat_from
        if sat_to is not None:
            _body["sat_to"] = sat_to
        if sat_comments is not None:
            _body["sat_comments"] = sat_comments
        if sat_reason is not None:
            _body["sat_reason"] = sat_reason
        if sun is not None:
            _body["sun"] = sun
        if sun_from is not None:
            _body["sun_from"] = sun_from
        if sun_to is not None:
            _body["sun_to"] = sun_to
        if sun_comments is not None:
            _body["sun_comments"] = sun_comments
        if sun_reason is not None:
            _body["sun_reason"] = sun_reason
        args.body = _body
        if company_id is not None:
            _path_params["company_id"] = company_id
        if availability_id is not None:
            _path_params["availability_id"] = availability_id
        args.path = _path_params
        return args

    async def _aupdate_by_id_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update Availability
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_availability_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/availabilities/{availability_id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_availability_update_by_id_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_by_id_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update Availability
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_availability_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/availabilities/{availability_id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_availability_update_by_id_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateByIdRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_by_id(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_by_id_mapped_args(
            company_id=company_id,
            availability_id=availability_id,
            week=week,
            week_to=week_to,
            repeat=repeat,
            mon=mon,
            mon_from=mon_from,
            mon_to=mon_to,
            mon_comments=mon_comments,
            mon_reason=mon_reason,
            tue=tue,
            tue_from=tue_from,
            tue_to=tue_to,
            tue_comments=tue_comments,
            tue_reason=tue_reason,
            wed=wed,
            wed_from=wed_from,
            wed_to=wed_to,
            wed_comments=wed_comments,
            wed_reason=wed_reason,
            thu=thu,
            thu_from=thu_from,
            thu_to=thu_to,
            thu_comments=thu_comments,
            thu_reason=thu_reason,
            fri=fri,
            fri_from=fri_from,
            fri_to=fri_to,
            fri_comments=fri_comments,
            fri_reason=fri_reason,
            sat=sat,
            sat_from=sat_from,
            sat_to=sat_to,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            sun=sun,
            sun_from=sun_from,
            sun_to=sun_to,
            sun_comments=sun_comments,
            sun_reason=sun_reason,
        )
        return await self._aupdate_by_id_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_by_id(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_by_id_mapped_args(
            company_id=company_id,
            availability_id=availability_id,
            week=week,
            week_to=week_to,
            repeat=repeat,
            mon=mon,
            mon_from=mon_from,
            mon_to=mon_to,
            mon_comments=mon_comments,
            mon_reason=mon_reason,
            tue=tue,
            tue_from=tue_from,
            tue_to=tue_to,
            tue_comments=tue_comments,
            tue_reason=tue_reason,
            wed=wed,
            wed_from=wed_from,
            wed_to=wed_to,
            wed_comments=wed_comments,
            wed_reason=wed_reason,
            thu=thu,
            thu_from=thu_from,
            thu_to=thu_to,
            thu_comments=thu_comments,
            thu_reason=thu_reason,
            fri=fri,
            fri_from=fri_from,
            fri_to=fri_to,
            fri_comments=fri_comments,
            fri_reason=fri_reason,
            sat=sat,
            sat_from=sat_from,
            sat_to=sat_to,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            sun=sun,
            sun_from=sun_from,
            sun_to=sun_to,
            sun_comments=sun_comments,
            sun_reason=sun_reason,
        )
        return self._update_by_id_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateById(BaseApi):

    async def aupdate_by_id(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> AvailabilityUpdateByIdResponsePydantic:
        raw_response = await self.raw.aupdate_by_id(
            company_id=company_id,
            availability_id=availability_id,
            week=week,
            week_to=week_to,
            repeat=repeat,
            mon=mon,
            mon_from=mon_from,
            mon_to=mon_to,
            mon_comments=mon_comments,
            mon_reason=mon_reason,
            tue=tue,
            tue_from=tue_from,
            tue_to=tue_to,
            tue_comments=tue_comments,
            tue_reason=tue_reason,
            wed=wed,
            wed_from=wed_from,
            wed_to=wed_to,
            wed_comments=wed_comments,
            wed_reason=wed_reason,
            thu=thu,
            thu_from=thu_from,
            thu_to=thu_to,
            thu_comments=thu_comments,
            thu_reason=thu_reason,
            fri=fri,
            fri_from=fri_from,
            fri_to=fri_to,
            fri_comments=fri_comments,
            fri_reason=fri_reason,
            sat=sat,
            sat_from=sat_from,
            sat_to=sat_to,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            sun=sun,
            sun_from=sun_from,
            sun_to=sun_to,
            sun_comments=sun_comments,
            sun_reason=sun_reason,
            **kwargs,
        )
        if validate:
            return AvailabilityUpdateByIdResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AvailabilityUpdateByIdResponsePydantic, raw_response.body)
    
    
    def update_by_id(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
        validate: bool = False,
    ) -> AvailabilityUpdateByIdResponsePydantic:
        raw_response = self.raw.update_by_id(
            company_id=company_id,
            availability_id=availability_id,
            week=week,
            week_to=week_to,
            repeat=repeat,
            mon=mon,
            mon_from=mon_from,
            mon_to=mon_to,
            mon_comments=mon_comments,
            mon_reason=mon_reason,
            tue=tue,
            tue_from=tue_from,
            tue_to=tue_to,
            tue_comments=tue_comments,
            tue_reason=tue_reason,
            wed=wed,
            wed_from=wed_from,
            wed_to=wed_to,
            wed_comments=wed_comments,
            wed_reason=wed_reason,
            thu=thu,
            thu_from=thu_from,
            thu_to=thu_to,
            thu_comments=thu_comments,
            thu_reason=thu_reason,
            fri=fri,
            fri_from=fri_from,
            fri_to=fri_to,
            fri_comments=fri_comments,
            fri_reason=fri_reason,
            sat=sat,
            sat_from=sat_from,
            sat_to=sat_to,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            sun=sun,
            sun_from=sun_from,
            sun_to=sun_to,
            sun_comments=sun_comments,
            sun_reason=sun_reason,
        )
        if validate:
            return AvailabilityUpdateByIdResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AvailabilityUpdateByIdResponsePydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_by_id_mapped_args(
            company_id=company_id,
            availability_id=availability_id,
            week=week,
            week_to=week_to,
            repeat=repeat,
            mon=mon,
            mon_from=mon_from,
            mon_to=mon_to,
            mon_comments=mon_comments,
            mon_reason=mon_reason,
            tue=tue,
            tue_from=tue_from,
            tue_to=tue_to,
            tue_comments=tue_comments,
            tue_reason=tue_reason,
            wed=wed,
            wed_from=wed_from,
            wed_to=wed_to,
            wed_comments=wed_comments,
            wed_reason=wed_reason,
            thu=thu,
            thu_from=thu_from,
            thu_to=thu_to,
            thu_comments=thu_comments,
            thu_reason=thu_reason,
            fri=fri,
            fri_from=fri_from,
            fri_to=fri_to,
            fri_comments=fri_comments,
            fri_reason=fri_reason,
            sat=sat,
            sat_from=sat_from,
            sat_to=sat_to,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            sun=sun,
            sun_from=sun_from,
            sun_to=sun_to,
            sun_comments=sun_comments,
            sun_reason=sun_reason,
        )
        return await self._aupdate_by_id_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        company_id: int,
        availability_id: int,
        week: typing.Optional[typing.Optional[str]] = None,
        week_to: typing.Optional[typing.Optional[str]] = None,
        repeat: typing.Optional[bool] = None,
        mon: typing.Optional[int] = None,
        mon_from: typing.Optional[str] = None,
        mon_to: typing.Optional[str] = None,
        mon_comments: typing.Optional[typing.Optional[str]] = None,
        mon_reason: typing.Optional[str] = None,
        tue: typing.Optional[int] = None,
        tue_from: typing.Optional[str] = None,
        tue_to: typing.Optional[str] = None,
        tue_comments: typing.Optional[typing.Optional[str]] = None,
        tue_reason: typing.Optional[str] = None,
        wed: typing.Optional[int] = None,
        wed_from: typing.Optional[str] = None,
        wed_to: typing.Optional[str] = None,
        wed_comments: typing.Optional[typing.Optional[str]] = None,
        wed_reason: typing.Optional[str] = None,
        thu: typing.Optional[int] = None,
        thu_from: typing.Optional[str] = None,
        thu_to: typing.Optional[str] = None,
        thu_comments: typing.Optional[typing.Optional[str]] = None,
        thu_reason: typing.Optional[str] = None,
        fri: typing.Optional[int] = None,
        fri_from: typing.Optional[str] = None,
        fri_to: typing.Optional[str] = None,
        fri_comments: typing.Optional[typing.Optional[str]] = None,
        fri_reason: typing.Optional[str] = None,
        sat: typing.Optional[int] = None,
        sat_from: typing.Optional[str] = None,
        sat_to: typing.Optional[str] = None,
        sat_comments: typing.Optional[typing.Optional[str]] = None,
        sat_reason: typing.Optional[str] = None,
        sun: typing.Optional[int] = None,
        sun_from: typing.Optional[str] = None,
        sun_to: typing.Optional[str] = None,
        sun_comments: typing.Optional[typing.Optional[str]] = None,
        sun_reason: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_by_id_mapped_args(
            company_id=company_id,
            availability_id=availability_id,
            week=week,
            week_to=week_to,
            repeat=repeat,
            mon=mon,
            mon_from=mon_from,
            mon_to=mon_to,
            mon_comments=mon_comments,
            mon_reason=mon_reason,
            tue=tue,
            tue_from=tue_from,
            tue_to=tue_to,
            tue_comments=tue_comments,
            tue_reason=tue_reason,
            wed=wed,
            wed_from=wed_from,
            wed_to=wed_to,
            wed_comments=wed_comments,
            wed_reason=wed_reason,
            thu=thu,
            thu_from=thu_from,
            thu_to=thu_to,
            thu_comments=thu_comments,
            thu_reason=thu_reason,
            fri=fri,
            fri_from=fri_from,
            fri_to=fri_to,
            fri_comments=fri_comments,
            fri_reason=fri_reason,
            sat=sat,
            sat_from=sat_from,
            sat_to=sat_to,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            sun=sun,
            sun_from=sun_from,
            sun_to=sun_to,
            sun_comments=sun_comments,
            sun_reason=sun_reason,
        )
        return self._update_by_id_oapg(
            body=args.body,
            path_params=args.path,
        )

