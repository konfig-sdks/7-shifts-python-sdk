# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.shifts_create_new_shift_request_breaks import ShiftsCreateNewShiftRequestBreaks as ShiftsCreateNewShiftRequestBreaksSchema
from 7_shifts_python_sdk.model.shifts_create_new_shift422_response import ShiftsCreateNewShift422Response as ShiftsCreateNewShift422ResponseSchema
from 7_shifts_python_sdk.model.shifts_create_new_shift403_response import ShiftsCreateNewShift403Response as ShiftsCreateNewShift403ResponseSchema
from 7_shifts_python_sdk.model.shifts_create_new_shift_response import ShiftsCreateNewShiftResponse as ShiftsCreateNewShiftResponseSchema
from 7_shifts_python_sdk.model.shifts_create_new_shift_request import ShiftsCreateNewShiftRequest as ShiftsCreateNewShiftRequestSchema
from 7_shifts_python_sdk.model.shifts_create_new_shift400_response import ShiftsCreateNewShift400Response as ShiftsCreateNewShift400ResponseSchema

from 7_shifts_python_sdk.type.shifts_create_new_shift422_response import ShiftsCreateNewShift422Response
from 7_shifts_python_sdk.type.shifts_create_new_shift_request import ShiftsCreateNewShiftRequest
from 7_shifts_python_sdk.type.shifts_create_new_shift403_response import ShiftsCreateNewShift403Response
from 7_shifts_python_sdk.type.shifts_create_new_shift_request_breaks import ShiftsCreateNewShiftRequestBreaks
from 7_shifts_python_sdk.type.shifts_create_new_shift400_response import ShiftsCreateNewShift400Response
from 7_shifts_python_sdk.type.shifts_create_new_shift_response import ShiftsCreateNewShiftResponse

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.shifts_create_new_shift403_response import ShiftsCreateNewShift403Response as ShiftsCreateNewShift403ResponsePydantic
from 7_shifts_python_sdk.pydantic.shifts_create_new_shift400_response import ShiftsCreateNewShift400Response as ShiftsCreateNewShift400ResponsePydantic
from 7_shifts_python_sdk.pydantic.shifts_create_new_shift_response import ShiftsCreateNewShiftResponse as ShiftsCreateNewShiftResponsePydantic
from 7_shifts_python_sdk.pydantic.shifts_create_new_shift_request_breaks import ShiftsCreateNewShiftRequestBreaks as ShiftsCreateNewShiftRequestBreaksPydantic
from 7_shifts_python_sdk.pydantic.shifts_create_new_shift_request import ShiftsCreateNewShiftRequest as ShiftsCreateNewShiftRequestPydantic
from 7_shifts_python_sdk.pydantic.shifts_create_new_shift422_response import ShiftsCreateNewShift422Response as ShiftsCreateNewShift422ResponsePydantic

# Header params


class XApiVersionSchema(
    schemas.StrSchema
):
    pass
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = ShiftsCreateNewShiftRequestSchema


request_body_shifts_create_new_shift_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = ShiftsCreateNewShiftResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: ShiftsCreateNewShiftResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: ShiftsCreateNewShiftResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = ShiftsCreateNewShift400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: ShiftsCreateNewShift400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: ShiftsCreateNewShift400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = ShiftsCreateNewShift403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: ShiftsCreateNewShift403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: ShiftsCreateNewShift403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor422ResponseBodyApplicationProblemjson = ShiftsCreateNewShift422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: ShiftsCreateNewShift422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: ShiftsCreateNewShift422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_new_shift_mapped_args(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _header_params = {}
        _path_params = {}
        _body = {}
        if location_id is not None:
            _body["location_id"] = location_id
        if user_id is not None:
            _body["user_id"] = user_id
        if department_id is not None:
            _body["department_id"] = department_id
        if role_id is not None:
            _body["role_id"] = role_id
        if station_id is not None:
            _body["station_id"] = station_id
        if start is not None:
            _body["start"] = start
        if end is not None:
            _body["end"] = end
        if close is not None:
            _body["close"] = close
        if business_decline is not None:
            _body["business_decline"] = business_decline
        if notes is not None:
            _body["notes"] = notes
        if draft is not None:
            _body["draft"] = draft
        if notified is not None:
            _body["notified"] = notified
        if open is not None:
            _body["open"] = open
        if open_offer_type is not None:
            _body["open_offer_type"] = open_offer_type
        if unassigned is not None:
            _body["unassigned"] = unassigned
        if unassigned_skill_level is not None:
            _body["unassigned_skill_level"] = unassigned_skill_level
        if status is not None:
            _body["status"] = status
        if late_minutes is not None:
            _body["late_minutes"] = late_minutes
        if breaks is not None:
            _body["breaks"] = breaks
        args.body = _body
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acreate_new_shift_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create Shift
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/shifts',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_shifts_create_new_shift_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_shift_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create Shift
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/shifts',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_shifts_create_new_shift_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewShiftRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_shift(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_shift_mapped_args(
            location_id=location_id,
            start=start,
            end=end,
            company_id=company_id,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            close=close,
            business_decline=business_decline,
            notes=notes,
            draft=draft,
            notified=notified,
            open=open,
            open_offer_type=open_offer_type,
            unassigned=unassigned,
            unassigned_skill_level=unassigned_skill_level,
            status=status,
            late_minutes=late_minutes,
            breaks=breaks,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_new_shift_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def create_new_shift(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_shift_mapped_args(
            location_id=location_id,
            start=start,
            end=end,
            company_id=company_id,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            close=close,
            business_decline=business_decline,
            notes=notes,
            draft=draft,
            notified=notified,
            open=open,
            open_offer_type=open_offer_type,
            unassigned=unassigned,
            unassigned_skill_level=unassigned_skill_level,
            status=status,
            late_minutes=late_minutes,
            breaks=breaks,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_new_shift_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

class CreateNewShift(BaseApi):

    async def acreate_new_shift(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> ShiftsCreateNewShiftResponsePydantic:
        raw_response = await self.raw.acreate_new_shift(
            location_id=location_id,
            start=start,
            end=end,
            company_id=company_id,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            close=close,
            business_decline=business_decline,
            notes=notes,
            draft=draft,
            notified=notified,
            open=open,
            open_offer_type=open_offer_type,
            unassigned=unassigned,
            unassigned_skill_level=unassigned_skill_level,
            status=status,
            late_minutes=late_minutes,
            breaks=breaks,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            **kwargs,
        )
        if validate:
            return ShiftsCreateNewShiftResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ShiftsCreateNewShiftResponsePydantic, raw_response.body)
    
    
    def create_new_shift(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
    ) -> ShiftsCreateNewShiftResponsePydantic:
        raw_response = self.raw.create_new_shift(
            location_id=location_id,
            start=start,
            end=end,
            company_id=company_id,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            close=close,
            business_decline=business_decline,
            notes=notes,
            draft=draft,
            notified=notified,
            open=open,
            open_offer_type=open_offer_type,
            unassigned=unassigned,
            unassigned_skill_level=unassigned_skill_level,
            status=status,
            late_minutes=late_minutes,
            breaks=breaks,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        if validate:
            return ShiftsCreateNewShiftResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ShiftsCreateNewShiftResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_shift_mapped_args(
            location_id=location_id,
            start=start,
            end=end,
            company_id=company_id,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            close=close,
            business_decline=business_decline,
            notes=notes,
            draft=draft,
            notified=notified,
            open=open,
            open_offer_type=open_offer_type,
            unassigned=unassigned,
            unassigned_skill_level=unassigned_skill_level,
            status=status,
            late_minutes=late_minutes,
            breaks=breaks,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_new_shift_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        location_id: int,
        start: datetime,
        end: datetime,
        company_id: int,
        user_id: typing.Optional[int] = None,
        department_id: typing.Optional[typing.Optional[int]] = None,
        role_id: typing.Optional[typing.Optional[int]] = None,
        station_id: typing.Optional[typing.Optional[int]] = None,
        close: typing.Optional[typing.Optional[bool]] = None,
        business_decline: typing.Optional[typing.Optional[bool]] = None,
        notes: typing.Optional[typing.Optional[str]] = None,
        draft: typing.Optional[typing.Optional[bool]] = None,
        notified: typing.Optional[typing.Optional[bool]] = None,
        open: typing.Optional[typing.Optional[bool]] = None,
        open_offer_type: typing.Optional[typing.Optional[int]] = None,
        unassigned: typing.Optional[typing.Optional[bool]] = None,
        unassigned_skill_level: typing.Optional[typing.Optional[int]] = None,
        status: typing.Optional[typing.Optional[int]] = None,
        late_minutes: typing.Optional[typing.Optional[int]] = None,
        breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_shift_mapped_args(
            location_id=location_id,
            start=start,
            end=end,
            company_id=company_id,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            close=close,
            business_decline=business_decline,
            notes=notes,
            draft=draft,
            notified=notified,
            open=open,
            open_offer_type=open_offer_type,
            unassigned=unassigned,
            unassigned_skill_level=unassigned_skill_level,
            status=status,
            late_minutes=late_minutes,
            breaks=breaks,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_new_shift_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

