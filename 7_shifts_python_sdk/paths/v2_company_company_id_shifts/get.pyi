# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.shifts_list403_response import ShiftsList403Response as ShiftsList403ResponseSchema
from 7_shifts_python_sdk.model.shifts_list400_response import ShiftsList400Response as ShiftsList400ResponseSchema
from 7_shifts_python_sdk.model.shifts_list_response import ShiftsListResponse as ShiftsListResponseSchema

from 7_shifts_python_sdk.type.shifts_list400_response import ShiftsList400Response
from 7_shifts_python_sdk.type.shifts_list403_response import ShiftsList403Response
from 7_shifts_python_sdk.type.shifts_list_response import ShiftsListResponse

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.shifts_list400_response import ShiftsList400Response as ShiftsList400ResponsePydantic
from 7_shifts_python_sdk.pydantic.shifts_list403_response import ShiftsList403Response as ShiftsList403ResponsePydantic
from 7_shifts_python_sdk.pydantic.shifts_list_response import ShiftsListResponse as ShiftsListResponsePydantic

# Query params
CursorSchema = schemas.StrSchema


class LimitSchema(
    schemas.Int64Schema
):
    pass
LocationIdSchema = schemas.Int64Schema


class ShiftIdsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.IntSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShiftIdsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DepartmentIdSchema = schemas.Int64Schema


class DepartmentIdsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.IntSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DepartmentIdsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RoleIdSchema = schemas.Int64Schema
UserIdSchema = schemas.Int64Schema
StartLteSchema = schemas.DateTimeSchema
StartGteSchema = schemas.DateTimeSchema
EndLteSchema = schemas.DateTimeSchema
EndGteSchema = schemas.DateTimeSchema
DeletedSchema = schemas.BoolSchema
DraftSchema = schemas.BoolSchema
IncludeDraftSchema = schemas.BoolSchema
OpenSchema = schemas.BoolSchema
ModifiedSinceSchema = schemas.DateTimeSchema


class SortBySchema(
    schemas.StrSchema
):
    pass


class SortDirSchema(
    schemas.StrSchema
):
    pass
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'cursor': typing.Union[CursorSchema, str, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'location_id': typing.Union[LocationIdSchema, decimal.Decimal, int, ],
        'shift_ids': typing.Union[ShiftIdsSchema, list, tuple, ],
        'department_id': typing.Union[DepartmentIdSchema, decimal.Decimal, int, ],
        'department_ids': typing.Union[DepartmentIdsSchema, list, tuple, ],
        'role_id': typing.Union[RoleIdSchema, decimal.Decimal, int, ],
        'user_id': typing.Union[UserIdSchema, decimal.Decimal, int, ],
        'start[lte]': typing.Union[StartLteSchema, str, datetime, ],
        'start[gte]': typing.Union[StartGteSchema, str, datetime, ],
        'end[lte]': typing.Union[EndLteSchema, str, datetime, ],
        'end[gte]': typing.Union[EndGteSchema, str, datetime, ],
        'deleted': typing.Union[DeletedSchema, bool, ],
        'draft': typing.Union[DraftSchema, bool, ],
        'include_draft': typing.Union[IncludeDraftSchema, bool, ],
        'open': typing.Union[OpenSchema, bool, ],
        'modified_since': typing.Union[ModifiedSinceSchema, str, datetime, ],
        'sort_by': typing.Union[SortBySchema, str, ],
        'sort_dir': typing.Union[SortDirSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_location_id = api_client.QueryParameter(
    name="location_id",
    style=api_client.ParameterStyle.FORM,
    schema=LocationIdSchema,
    explode=True,
)
request_query_shift_ids = api_client.QueryParameter(
    name="shift_ids",
    style=api_client.ParameterStyle.FORM,
    schema=ShiftIdsSchema,
)
request_query_department_id = api_client.QueryParameter(
    name="department_id",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentIdSchema,
    explode=True,
)
request_query_department_ids = api_client.QueryParameter(
    name="department_ids",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentIdsSchema,
)
request_query_role_id = api_client.QueryParameter(
    name="role_id",
    style=api_client.ParameterStyle.FORM,
    schema=RoleIdSchema,
    explode=True,
)
request_query_user_id = api_client.QueryParameter(
    name="user_id",
    style=api_client.ParameterStyle.FORM,
    schema=UserIdSchema,
    explode=True,
)
request_query_start_lte = api_client.QueryParameter(
    name="start[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=StartLteSchema,
    explode=True,
)
request_query_start_gte = api_client.QueryParameter(
    name="start[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=StartGteSchema,
    explode=True,
)
request_query_end_lte = api_client.QueryParameter(
    name="end[lte]",
    style=api_client.ParameterStyle.FORM,
    schema=EndLteSchema,
    explode=True,
)
request_query_end_gte = api_client.QueryParameter(
    name="end[gte]",
    style=api_client.ParameterStyle.FORM,
    schema=EndGteSchema,
    explode=True,
)
request_query_deleted = api_client.QueryParameter(
    name="deleted",
    style=api_client.ParameterStyle.FORM,
    schema=DeletedSchema,
    explode=True,
)
request_query_draft = api_client.QueryParameter(
    name="draft",
    style=api_client.ParameterStyle.FORM,
    schema=DraftSchema,
    explode=True,
)
request_query_include_draft = api_client.QueryParameter(
    name="include_draft",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeDraftSchema,
    explode=True,
)
request_query_open = api_client.QueryParameter(
    name="open",
    style=api_client.ParameterStyle.FORM,
    schema=OpenSchema,
    explode=True,
)
request_query_modified_since = api_client.QueryParameter(
    name="modified_since",
    style=api_client.ParameterStyle.FORM,
    schema=ModifiedSinceSchema,
    explode=True,
)
request_query_sort_by = api_client.QueryParameter(
    name="sort_by",
    style=api_client.ParameterStyle.FORM,
    schema=SortBySchema,
    explode=True,
)
request_query_sort_dir = api_client.QueryParameter(
    name="sort_dir",
    style=api_client.ParameterStyle.FORM,
    schema=SortDirSchema,
    explode=True,
)
# Header params


class XApiVersionSchema(
    schemas.StrSchema
):
    pass
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = ShiftsListResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: ShiftsListResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: ShiftsListResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = ShiftsList400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: ShiftsList400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: ShiftsList400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = ShiftsList403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: ShiftsList403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: ShiftsList403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _list_mapped_args(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        _path_params = {}
        if cursor is not None:
            _query_params["cursor"] = cursor
        if limit is not None:
            _query_params["limit"] = limit
        if location_id is not None:
            _query_params["location_id"] = location_id
        if shift_ids is not None:
            _query_params["shift_ids"] = shift_ids
        if department_id is not None:
            _query_params["department_id"] = department_id
        if department_ids is not None:
            _query_params["department_ids"] = department_ids
        if role_id is not None:
            _query_params["role_id"] = role_id
        if user_id is not None:
            _query_params["user_id"] = user_id
        if start_lte is not None:
            _query_params["start[lte]"] = start_lte
        if start_gte is not None:
            _query_params["start[gte]"] = start_gte
        if end_lte is not None:
            _query_params["end[lte]"] = end_lte
        if end_gte is not None:
            _query_params["end[gte]"] = end_gte
        if deleted is not None:
            _query_params["deleted"] = deleted
        if draft is not None:
            _query_params["draft"] = draft
        if include_draft is not None:
            _query_params["include_draft"] = include_draft
        if open is not None:
            _query_params["open"] = open
        if modified_since is not None:
            _query_params["modified_since"] = modified_since
        if sort_by is not None:
            _query_params["sort_by"] = sort_by
        if sort_dir is not None:
            _query_params["sort_dir"] = sort_dir
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.query = _query_params
        args.header = _header_params
        args.path = _path_params
        return args

    async def _alist_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List Shifts
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
            request_query_limit,
            request_query_location_id,
            request_query_shift_ids,
            request_query_department_id,
            request_query_department_ids,
            request_query_role_id,
            request_query_user_id,
            request_query_start_lte,
            request_query_start_gte,
            request_query_end_lte,
            request_query_end_gte,
            request_query_deleted,
            request_query_draft,
            request_query_include_draft,
            request_query_open,
            request_query_modified_since,
            request_query_sort_by,
            request_query_sort_dir,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/shifts',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List Shifts
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
            request_query_limit,
            request_query_location_id,
            request_query_shift_ids,
            request_query_department_id,
            request_query_department_ids,
            request_query_role_id,
            request_query_user_id,
            request_query_start_lte,
            request_query_start_gte,
            request_query_end_lte,
            request_query_end_gte,
            request_query_deleted,
            request_query_draft,
            request_query_include_draft,
            request_query_open,
            request_query_modified_since,
            request_query_sort_by,
            request_query_sort_dir,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/shifts',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            shift_ids=shift_ids,
            department_id=department_id,
            department_ids=department_ids,
            role_id=role_id,
            user_id=user_id,
            start_lte=start_lte,
            start_gte=start_gte,
            end_lte=end_lte,
            end_gte=end_gte,
            deleted=deleted,
            draft=draft,
            include_draft=include_draft,
            open=open,
            modified_since=modified_since,
            sort_by=sort_by,
            sort_dir=sort_dir,
        )
        return await self._alist_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def list(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            shift_ids=shift_ids,
            department_id=department_id,
            department_ids=department_ids,
            role_id=role_id,
            user_id=user_id,
            start_lte=start_lte,
            start_gte=start_gte,
            end_lte=end_lte,
            end_gte=end_gte,
            deleted=deleted,
            draft=draft,
            include_draft=include_draft,
            open=open,
            modified_since=modified_since,
            sort_by=sort_by,
            sort_dir=sort_dir,
        )
        return self._list_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

class List(BaseApi):

    async def alist(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> ShiftsListResponsePydantic:
        raw_response = await self.raw.alist(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            shift_ids=shift_ids,
            department_id=department_id,
            department_ids=department_ids,
            role_id=role_id,
            user_id=user_id,
            start_lte=start_lte,
            start_gte=start_gte,
            end_lte=end_lte,
            end_gte=end_gte,
            deleted=deleted,
            draft=draft,
            include_draft=include_draft,
            open=open,
            modified_since=modified_since,
            sort_by=sort_by,
            sort_dir=sort_dir,
            **kwargs,
        )
        if validate:
            return ShiftsListResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ShiftsListResponsePydantic, raw_response.body)
    
    
    def list(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
        validate: bool = False,
    ) -> ShiftsListResponsePydantic:
        raw_response = self.raw.list(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            shift_ids=shift_ids,
            department_id=department_id,
            department_ids=department_ids,
            role_id=role_id,
            user_id=user_id,
            start_lte=start_lte,
            start_gte=start_gte,
            end_lte=end_lte,
            end_gte=end_gte,
            deleted=deleted,
            draft=draft,
            include_draft=include_draft,
            open=open,
            modified_since=modified_since,
            sort_by=sort_by,
            sort_dir=sort_dir,
        )
        if validate:
            return ShiftsListResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ShiftsListResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            shift_ids=shift_ids,
            department_id=department_id,
            department_ids=department_ids,
            role_id=role_id,
            user_id=user_id,
            start_lte=start_lte,
            start_gte=start_gte,
            end_lte=end_lte,
            end_gte=end_gte,
            deleted=deleted,
            draft=draft,
            include_draft=include_draft,
            open=open,
            modified_since=modified_since,
            sort_by=sort_by,
            sort_dir=sort_dir,
        )
        return await self._alist_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        shift_ids: typing.Optional[typing.List[int]] = None,
        department_id: typing.Optional[int] = None,
        department_ids: typing.Optional[typing.List[int]] = None,
        role_id: typing.Optional[int] = None,
        user_id: typing.Optional[int] = None,
        start_lte: typing.Optional[datetime] = None,
        start_gte: typing.Optional[datetime] = None,
        end_lte: typing.Optional[datetime] = None,
        end_gte: typing.Optional[datetime] = None,
        deleted: typing.Optional[bool] = None,
        draft: typing.Optional[bool] = None,
        include_draft: typing.Optional[bool] = None,
        open: typing.Optional[bool] = None,
        modified_since: typing.Optional[datetime] = None,
        sort_by: typing.Optional[str] = None,
        sort_dir: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            cursor=cursor,
            limit=limit,
            location_id=location_id,
            shift_ids=shift_ids,
            department_id=department_id,
            department_ids=department_ids,
            role_id=role_id,
            user_id=user_id,
            start_lte=start_lte,
            start_gte=start_gte,
            end_lte=end_lte,
            end_gte=end_gte,
            deleted=deleted,
            draft=draft,
            include_draft=include_draft,
            open=open,
            modified_since=modified_since,
            sort_by=sort_by,
            sort_dir=sort_dir,
        )
        return self._list_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

