# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.task_management_get_task_list_templates200_response import TaskManagementGetTaskListTemplates200Response as TaskManagementGetTaskListTemplates200ResponseSchema
from 7_shifts_python_sdk.model.task_management_get_task_list_templates403_response import TaskManagementGetTaskListTemplates403Response as TaskManagementGetTaskListTemplates403ResponseSchema
from 7_shifts_python_sdk.model.task_management_get_task_list_templates404_response import TaskManagementGetTaskListTemplates404Response as TaskManagementGetTaskListTemplates404ResponseSchema
from 7_shifts_python_sdk.model.task_management_get_task_list_templates_response import TaskManagementGetTaskListTemplatesResponse as TaskManagementGetTaskListTemplatesResponseSchema

from 7_shifts_python_sdk.type.task_management_get_task_list_templates200_response import TaskManagementGetTaskListTemplates200Response
from 7_shifts_python_sdk.type.task_management_get_task_list_templates_response import TaskManagementGetTaskListTemplatesResponse
from 7_shifts_python_sdk.type.task_management_get_task_list_templates404_response import TaskManagementGetTaskListTemplates404Response
from 7_shifts_python_sdk.type.task_management_get_task_list_templates403_response import TaskManagementGetTaskListTemplates403Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.task_management_get_task_list_templates404_response import TaskManagementGetTaskListTemplates404Response as TaskManagementGetTaskListTemplates404ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_get_task_list_templates403_response import TaskManagementGetTaskListTemplates403Response as TaskManagementGetTaskListTemplates403ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_get_task_list_templates200_response import TaskManagementGetTaskListTemplates200Response as TaskManagementGetTaskListTemplates200ResponsePydantic
from 7_shifts_python_sdk.pydantic.task_management_get_task_list_templates_response import TaskManagementGetTaskListTemplatesResponse as TaskManagementGetTaskListTemplatesResponsePydantic

from . import path

# Query params
LocationIdSchema = schemas.Int64Schema
DepartmentIdSchema = schemas.Int64Schema
RoleIdSchema = schemas.Int64Schema
CursorSchema = schemas.StrSchema
LimitSchema = schemas.Int64Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'location_id': typing.Union[LocationIdSchema, decimal.Decimal, int, ],
        'department_id': typing.Union[DepartmentIdSchema, decimal.Decimal, int, ],
        'role_id': typing.Union[RoleIdSchema, decimal.Decimal, int, ],
        'cursor': typing.Union[CursorSchema, str, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_location_id = api_client.QueryParameter(
    name="location_id",
    style=api_client.ParameterStyle.FORM,
    schema=LocationIdSchema,
    explode=True,
)
request_query_department_id = api_client.QueryParameter(
    name="department_id",
    style=api_client.ParameterStyle.FORM,
    schema=DepartmentIdSchema,
    explode=True,
)
request_query_role_id = api_client.QueryParameter(
    name="role_id",
    style=api_client.ParameterStyle.FORM,
    schema=RoleIdSchema,
    explode=True,
)
request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
# Header params


class XApiVersionSchema(
    schemas.StrSchema
):


    class MetaOapg:
        regex=[{
            'pattern': r'^\d{4}-\d{2}-\d{2}$',
        }]
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# Path params
CompanyIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
_auth = [
    'OAuth2',
    'OAuth2',
    'OAuth2',
    'cookieAuth',
]
SchemaFor200ResponseBodyApplicationJson = TaskManagementGetTaskListTemplates200ResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: TaskManagementGetTaskListTemplates200Response


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: TaskManagementGetTaskListTemplates200Response


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = TaskManagementGetTaskListTemplates403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: TaskManagementGetTaskListTemplates403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: TaskManagementGetTaskListTemplates403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor404ResponseBodyApplicationProblemjson = TaskManagementGetTaskListTemplates404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: TaskManagementGetTaskListTemplates404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: TaskManagementGetTaskListTemplates404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
    },
)
SchemaFor0ResponseBodyApplicationProblemjson = TaskManagementGetTaskListTemplatesResponseSchema


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    body: TaskManagementGetTaskListTemplatesResponse


@dataclass
class ApiResponseForDefaultAsync(api_client.AsyncApiResponse):
    body: TaskManagementGetTaskListTemplatesResponse


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationProblemjson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '403': _response_for_403,
    '404': _response_for_404,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _get_task_list_templates_mapped_args(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        _path_params = {}
        if location_id is not None:
            _query_params["location_id"] = location_id
        if department_id is not None:
            _query_params["department_id"] = department_id
        if role_id is not None:
            _query_params["role_id"] = role_id
        if cursor is not None:
            _query_params["cursor"] = cursor
        if limit is not None:
            _query_params["limit"] = limit
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        if company_id is not None:
            _path_params["company_id"] = company_id
        args.query = _query_params
        args.header = _header_params
        args.path = _path_params
        return args

    async def _aget_task_list_templates_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get task list templates
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_location_id,
            request_query_department_id,
            request_query_role_id,
            request_query_cursor,
            request_query_limit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/task_list_templates',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserializationAsync(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_task_list_templates_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get task list templates
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_location_id,
            request_query_department_id,
            request_query_role_id,
            request_query_cursor,
            request_query_limit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/task_list_templates',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetTaskListTemplatesRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_task_list_templates(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_task_list_templates_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            location_id=location_id,
            department_id=department_id,
            role_id=role_id,
            cursor=cursor,
            limit=limit,
        )
        return await self._aget_task_list_templates_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def get_task_list_templates(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_task_list_templates_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            location_id=location_id,
            department_id=department_id,
            role_id=role_id,
            cursor=cursor,
            limit=limit,
        )
        return self._get_task_list_templates_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

class GetTaskListTemplates(BaseApi):

    async def aget_task_list_templates(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> TaskManagementGetTaskListTemplates200ResponsePydantic:
        raw_response = await self.raw.aget_task_list_templates(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            location_id=location_id,
            department_id=department_id,
            role_id=role_id,
            cursor=cursor,
            limit=limit,
            **kwargs,
        )
        if validate:
            return TaskManagementGetTaskListTemplates200ResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(TaskManagementGetTaskListTemplates200ResponsePydantic, raw_response.body)
    
    
    def get_task_list_templates(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        validate: bool = False,
    ) -> TaskManagementGetTaskListTemplates200ResponsePydantic:
        raw_response = self.raw.get_task_list_templates(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            location_id=location_id,
            department_id=department_id,
            role_id=role_id,
            cursor=cursor,
            limit=limit,
        )
        if validate:
            return TaskManagementGetTaskListTemplates200ResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(TaskManagementGetTaskListTemplates200ResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_task_list_templates_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            location_id=location_id,
            department_id=department_id,
            role_id=role_id,
            cursor=cursor,
            limit=limit,
        )
        return await self._aget_task_list_templates_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_id: int,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        location_id: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        role_id: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_task_list_templates_mapped_args(
            company_id=company_id,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            location_id=location_id,
            department_id=department_id,
            role_id=role_id,
            cursor=cursor,
            limit=limit,
        )
        return self._get_task_list_templates_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

