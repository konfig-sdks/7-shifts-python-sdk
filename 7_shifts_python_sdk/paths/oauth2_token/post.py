# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.authentication_generate_o_auth_token_response import AuthenticationGenerateOAuthTokenResponse as AuthenticationGenerateOAuthTokenResponseSchema
from 7_shifts_python_sdk.model.authentication_generate_o_auth_token500_response import AuthenticationGenerateOAuthToken500Response as AuthenticationGenerateOAuthToken500ResponseSchema
from 7_shifts_python_sdk.model.authentication_generate_o_auth_token_request import AuthenticationGenerateOAuthTokenRequest as AuthenticationGenerateOAuthTokenRequestSchema

from 7_shifts_python_sdk.type.authentication_generate_o_auth_token500_response import AuthenticationGenerateOAuthToken500Response
from 7_shifts_python_sdk.type.authentication_generate_o_auth_token_response import AuthenticationGenerateOAuthTokenResponse
from 7_shifts_python_sdk.type.authentication_generate_o_auth_token_request import AuthenticationGenerateOAuthTokenRequest

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.authentication_generate_o_auth_token_response import AuthenticationGenerateOAuthTokenResponse as AuthenticationGenerateOAuthTokenResponsePydantic
from 7_shifts_python_sdk.pydantic.authentication_generate_o_auth_token_request import AuthenticationGenerateOAuthTokenRequest as AuthenticationGenerateOAuthTokenRequestPydantic
from 7_shifts_python_sdk.pydantic.authentication_generate_o_auth_token500_response import AuthenticationGenerateOAuthToken500Response as AuthenticationGenerateOAuthToken500ResponsePydantic

from . import path

# body param
SchemaForRequestBodyApplicationXWwwFormUrlencoded = AuthenticationGenerateOAuthTokenRequestSchema


request_body_authentication_generate_o_auth_token_request = api_client.RequestBody(
    content={
        'application/x-www-form-urlencoded': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationXWwwFormUrlencoded),
    },
    required=True,
)
_servers = (
    {
        'url': "https://app.7shifts.com",
        'description': "Override base path token generation",
    },
)
SchemaFor200ResponseBodyApplicationJson = AuthenticationGenerateOAuthTokenResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: AuthenticationGenerateOAuthTokenResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: AuthenticationGenerateOAuthTokenResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = AuthenticationGenerateOAuthToken500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: AuthenticationGenerateOAuthToken500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: AuthenticationGenerateOAuthToken500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _generate_o_auth_token_mapped_args(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if grant_type is not None:
            _body["grant_type"] = grant_type
        if client_id is not None:
            _body["client_id"] = client_id
        if client_secret is not None:
            _body["client_secret"] = client_secret
        if scope is not None:
            _body["scope"] = scope
        args.body = _body
        return args

    async def _agenerate_o_auth_token_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/x-www-form-urlencoded',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create OAuth Token
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/oauth2/token',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_authentication_generate_o_auth_token_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        host = self._get_host_oapg('generate_o_auth_token', _servers, host_index)
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            host=host,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _generate_o_auth_token_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/x-www-form-urlencoded',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create OAuth Token
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/oauth2/token',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_authentication_generate_o_auth_token_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        host = self._get_host_oapg('generate_o_auth_token', _servers, host_index)
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            host=host,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GenerateOAuthTokenRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def agenerate_o_auth_token(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._generate_o_auth_token_mapped_args(
            grant_type=grant_type,
            client_id=client_id,
            client_secret=client_secret,
            scope=scope,
        )
        return await self._agenerate_o_auth_token_oapg(
            body=args.body,
            **kwargs,
        )
    
    def generate_o_auth_token(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._generate_o_auth_token_mapped_args(
            grant_type=grant_type,
            client_id=client_id,
            client_secret=client_secret,
            scope=scope,
        )
        return self._generate_o_auth_token_oapg(
            body=args.body,
        )

class GenerateOAuthToken(BaseApi):

    async def agenerate_o_auth_token(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> AuthenticationGenerateOAuthTokenResponsePydantic:
        raw_response = await self.raw.agenerate_o_auth_token(
            grant_type=grant_type,
            client_id=client_id,
            client_secret=client_secret,
            scope=scope,
            **kwargs,
        )
        if validate:
            return AuthenticationGenerateOAuthTokenResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AuthenticationGenerateOAuthTokenResponsePydantic, raw_response.body)
    
    
    def generate_o_auth_token(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
        validate: bool = False,
    ) -> AuthenticationGenerateOAuthTokenResponsePydantic:
        raw_response = self.raw.generate_o_auth_token(
            grant_type=grant_type,
            client_id=client_id,
            client_secret=client_secret,
            scope=scope,
        )
        if validate:
            return AuthenticationGenerateOAuthTokenResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AuthenticationGenerateOAuthTokenResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._generate_o_auth_token_mapped_args(
            grant_type=grant_type,
            client_id=client_id,
            client_secret=client_secret,
            scope=scope,
        )
        return await self._agenerate_o_auth_token_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        grant_type: str,
        client_id: str,
        client_secret: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._generate_o_auth_token_mapped_args(
            grant_type=grant_type,
            client_id=client_id,
            client_secret=client_secret,
            scope=scope,
        )
        return self._generate_o_auth_token_oapg(
            body=args.body,
        )

