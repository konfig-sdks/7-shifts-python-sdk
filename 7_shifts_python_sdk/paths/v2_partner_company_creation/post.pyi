# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.account_create_trial_account_response import AccountCreateTrialAccountResponse as AccountCreateTrialAccountResponseSchema
from 7_shifts_python_sdk.model.account_create_trial_account403_response import AccountCreateTrialAccount403Response as AccountCreateTrialAccount403ResponseSchema
from 7_shifts_python_sdk.model.account_create_trial_account_request import AccountCreateTrialAccountRequest as AccountCreateTrialAccountRequestSchema
from 7_shifts_python_sdk.model.account_create_trial_account500_response import AccountCreateTrialAccount500Response as AccountCreateTrialAccount500ResponseSchema
from 7_shifts_python_sdk.model.account_create_trial_account422_response import AccountCreateTrialAccount422Response as AccountCreateTrialAccount422ResponseSchema
from 7_shifts_python_sdk.model.account_create_trial_account401_response import AccountCreateTrialAccount401Response as AccountCreateTrialAccount401ResponseSchema
from 7_shifts_python_sdk.model.account_create_trial_account400_response import AccountCreateTrialAccount400Response as AccountCreateTrialAccount400ResponseSchema

from 7_shifts_python_sdk.type.account_create_trial_account_response import AccountCreateTrialAccountResponse
from 7_shifts_python_sdk.type.account_create_trial_account401_response import AccountCreateTrialAccount401Response
from 7_shifts_python_sdk.type.account_create_trial_account400_response import AccountCreateTrialAccount400Response
from 7_shifts_python_sdk.type.account_create_trial_account403_response import AccountCreateTrialAccount403Response
from 7_shifts_python_sdk.type.account_create_trial_account_request import AccountCreateTrialAccountRequest
from 7_shifts_python_sdk.type.account_create_trial_account500_response import AccountCreateTrialAccount500Response
from 7_shifts_python_sdk.type.account_create_trial_account422_response import AccountCreateTrialAccount422Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.account_create_trial_account403_response import AccountCreateTrialAccount403Response as AccountCreateTrialAccount403ResponsePydantic
from 7_shifts_python_sdk.pydantic.account_create_trial_account400_response import AccountCreateTrialAccount400Response as AccountCreateTrialAccount400ResponsePydantic
from 7_shifts_python_sdk.pydantic.account_create_trial_account422_response import AccountCreateTrialAccount422Response as AccountCreateTrialAccount422ResponsePydantic
from 7_shifts_python_sdk.pydantic.account_create_trial_account_response import AccountCreateTrialAccountResponse as AccountCreateTrialAccountResponsePydantic
from 7_shifts_python_sdk.pydantic.account_create_trial_account500_response import AccountCreateTrialAccount500Response as AccountCreateTrialAccount500ResponsePydantic
from 7_shifts_python_sdk.pydantic.account_create_trial_account_request import AccountCreateTrialAccountRequest as AccountCreateTrialAccountRequestPydantic
from 7_shifts_python_sdk.pydantic.account_create_trial_account401_response import AccountCreateTrialAccount401Response as AccountCreateTrialAccount401ResponsePydantic

# Header params


class XApiVersionSchema(
    schemas.StrSchema
):
    pass
XCompanyGuidSchema = schemas.UUIDSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'x-api-version': typing.Union[XApiVersionSchema, str, ],
        'x-company-guid': typing.Union[XCompanyGuidSchema, str, uuid.UUID, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_api_version = api_client.HeaderParameter(
    name="x-api-version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XApiVersionSchema,
)
request_header_x_company_guid = api_client.HeaderParameter(
    name="x-company-guid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XCompanyGuidSchema,
)
# body param
SchemaForRequestBodyApplicationJson = AccountCreateTrialAccountRequestSchema


request_body_account_create_trial_account_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor201ResponseBodyApplicationJson = AccountCreateTrialAccountResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: AccountCreateTrialAccountResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: AccountCreateTrialAccountResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationProblemjson = AccountCreateTrialAccount400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: AccountCreateTrialAccount400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: AccountCreateTrialAccount400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationProblemjson),
    },
)
SchemaFor401ResponseBodyApplicationProblemjson = AccountCreateTrialAccount401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: AccountCreateTrialAccount401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: AccountCreateTrialAccount401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = AccountCreateTrialAccount403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: AccountCreateTrialAccount403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: AccountCreateTrialAccount403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor422ResponseBodyApplicationProblemjson = AccountCreateTrialAccount422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: AccountCreateTrialAccount422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: AccountCreateTrialAccount422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationProblemjson),
    },
)
SchemaFor500ResponseBodyApplicationProblemjson = AccountCreateTrialAccount500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: AccountCreateTrialAccount500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: AccountCreateTrialAccount500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _create_trial_account_mapped_args(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _header_params = {}
        _body = {}
        if email is not None:
            _body["email"] = email
        if firstname is not None:
            _body["firstname"] = firstname
        if lastname is not None:
            _body["lastname"] = lastname
        if company_name is not None:
            _body["company_name"] = company_name
        if country is not None:
            _body["country"] = country
        if mobile_phone is not None:
            _body["mobile_phone"] = mobile_phone
        if utm_campaign is not None:
            _body["utm_campaign"] = utm_campaign
        if utm_content is not None:
            _body["utm_content"] = utm_content
        if utm_medium is not None:
            _body["utm_medium"] = utm_medium
        if utm_source is not None:
            _body["utm_source"] = utm_source
        if utm_term is not None:
            _body["utm_term"] = utm_term
        args.body = _body
        if x_api_version is not None:
            _header_params["x-api-version"] = x_api_version
        if x_company_guid is not None:
            _header_params["x-company-guid"] = x_company_guid
        args.header = _header_params
        return args

    async def _acreate_trial_account_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create Trial Account
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/partner_company_creation',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_account_create_trial_account_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_trial_account_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create Trial Account
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_api_version,
            request_header_x_company_guid,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/partner_company_creation',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_account_create_trial_account_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateTrialAccountRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_trial_account(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_trial_account_mapped_args(
            email=email,
            firstname=firstname,
            lastname=lastname,
            company_name=company_name,
            country=country,
            utm_source=utm_source,
            mobile_phone=mobile_phone,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_term=utm_term,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_trial_account_oapg(
            body=args.body,
            header_params=args.header,
            **kwargs,
        )
    
    def create_trial_account(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_trial_account_mapped_args(
            email=email,
            firstname=firstname,
            lastname=lastname,
            company_name=company_name,
            country=country,
            utm_source=utm_source,
            mobile_phone=mobile_phone,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_term=utm_term,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_trial_account_oapg(
            body=args.body,
            header_params=args.header,
        )

class CreateTrialAccount(BaseApi):

    async def acreate_trial_account(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> AccountCreateTrialAccountResponsePydantic:
        raw_response = await self.raw.acreate_trial_account(
            email=email,
            firstname=firstname,
            lastname=lastname,
            company_name=company_name,
            country=country,
            utm_source=utm_source,
            mobile_phone=mobile_phone,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_term=utm_term,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
            **kwargs,
        )
        if validate:
            return AccountCreateTrialAccountResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AccountCreateTrialAccountResponsePydantic, raw_response.body)
    
    
    def create_trial_account(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        validate: bool = False,
    ) -> AccountCreateTrialAccountResponsePydantic:
        raw_response = self.raw.create_trial_account(
            email=email,
            firstname=firstname,
            lastname=lastname,
            company_name=company_name,
            country=country,
            utm_source=utm_source,
            mobile_phone=mobile_phone,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_term=utm_term,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        if validate:
            return AccountCreateTrialAccountResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(AccountCreateTrialAccountResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_trial_account_mapped_args(
            email=email,
            firstname=firstname,
            lastname=lastname,
            company_name=company_name,
            country=country,
            utm_source=utm_source,
            mobile_phone=mobile_phone,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_term=utm_term,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return await self._acreate_trial_account_oapg(
            body=args.body,
            header_params=args.header,
            **kwargs,
        )
    
    def post(
        self,
        email: str,
        firstname: str,
        lastname: str,
        company_name: str,
        country: str,
        utm_source: str,
        mobile_phone: typing.Optional[str] = None,
        utm_campaign: typing.Optional[str] = None,
        utm_content: typing.Optional[str] = None,
        utm_medium: typing.Optional[str] = None,
        utm_term: typing.Optional[str] = None,
        x_api_version: typing.Optional[str] = None,
        x_company_guid: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_trial_account_mapped_args(
            email=email,
            firstname=firstname,
            lastname=lastname,
            company_name=company_name,
            country=country,
            utm_source=utm_source,
            mobile_phone=mobile_phone,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_term=utm_term,
            x_api_version=x_api_version,
            x_company_guid=x_company_guid,
        )
        return self._create_trial_account_oapg(
            body=args.body,
            header_params=args.header,
        )

