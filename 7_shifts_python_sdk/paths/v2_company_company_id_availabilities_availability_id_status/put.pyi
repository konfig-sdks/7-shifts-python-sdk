# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from 7_shifts_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from 7_shifts_python_sdk.api_response import AsyncGeneratorResponse
from 7_shifts_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401

from 7_shifts_python_sdk.model.availability_update_status_request import AvailabilityUpdateStatusRequest as AvailabilityUpdateStatusRequestSchema
from 7_shifts_python_sdk.model.availability_update_status_response import AvailabilityUpdateStatusResponse as AvailabilityUpdateStatusResponseSchema
from 7_shifts_python_sdk.model.availability_update_status404_response import AvailabilityUpdateStatus404Response as AvailabilityUpdateStatus404ResponseSchema
from 7_shifts_python_sdk.model.availability_update_status500_response import AvailabilityUpdateStatus500Response as AvailabilityUpdateStatus500ResponseSchema
from 7_shifts_python_sdk.model.availability_update_status403_response import AvailabilityUpdateStatus403Response as AvailabilityUpdateStatus403ResponseSchema
from 7_shifts_python_sdk.model.availability_update_status422_response import AvailabilityUpdateStatus422Response as AvailabilityUpdateStatus422ResponseSchema

from 7_shifts_python_sdk.type.availability_update_status_request import AvailabilityUpdateStatusRequest
from 7_shifts_python_sdk.type.availability_update_status500_response import AvailabilityUpdateStatus500Response
from 7_shifts_python_sdk.type.availability_update_status422_response import AvailabilityUpdateStatus422Response
from 7_shifts_python_sdk.type.availability_update_status_response import AvailabilityUpdateStatusResponse
from 7_shifts_python_sdk.type.availability_update_status404_response import AvailabilityUpdateStatus404Response
from 7_shifts_python_sdk.type.availability_update_status403_response import AvailabilityUpdateStatus403Response

from ...api_client import Dictionary
from 7_shifts_python_sdk.pydantic.availability_update_status_response import AvailabilityUpdateStatusResponse as AvailabilityUpdateStatusResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_status422_response import AvailabilityUpdateStatus422Response as AvailabilityUpdateStatus422ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_status404_response import AvailabilityUpdateStatus404Response as AvailabilityUpdateStatus404ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_status500_response import AvailabilityUpdateStatus500Response as AvailabilityUpdateStatus500ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_status403_response import AvailabilityUpdateStatus403Response as AvailabilityUpdateStatus403ResponsePydantic
from 7_shifts_python_sdk.pydantic.availability_update_status_request import AvailabilityUpdateStatusRequest as AvailabilityUpdateStatusRequestPydantic

# Path params
CompanyIdSchema = schemas.Int64Schema
AvailabilityIdSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'company_id': typing.Union[CompanyIdSchema, decimal.Decimal, int, ],
        'availability_id': typing.Union[AvailabilityIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="company_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
request_path_availability_id = api_client.PathParameter(
    name="availability_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AvailabilityIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = AvailabilityUpdateStatusRequestSchema


request_body_availability_update_status_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor204(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor204Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_204 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor204,
    response_cls_async=ApiResponseFor204Async,
)
SchemaFor401ResponseBodyApplicationProblemjson = AvailabilityUpdateStatusResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: AvailabilityUpdateStatusResponse


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateStatusResponse


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationProblemjson),
    },
)
SchemaFor403ResponseBodyApplicationProblemjson = AvailabilityUpdateStatus403ResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: AvailabilityUpdateStatus403Response


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateStatus403Response


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationProblemjson),
    },
)
SchemaFor404ResponseBodyApplicationProblemjson = AvailabilityUpdateStatus404ResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: AvailabilityUpdateStatus404Response


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateStatus404Response


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationProblemjson),
    },
)
SchemaFor422ResponseBodyApplicationProblemjson = AvailabilityUpdateStatus422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: AvailabilityUpdateStatus422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateStatus422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationProblemjson),
    },
)
SchemaFor500ResponseBodyApplicationProblemjson = AvailabilityUpdateStatus500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: AvailabilityUpdateStatus500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: AvailabilityUpdateStatus500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/problem+json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationProblemjson),
    },
)
_all_accept_content_types = (
    'application/problem+json',
)


class BaseApi(api_client.Api):

    def _update_status_mapped_args(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if status is not None:
            _body["status"] = status
        if message is not None:
            _body["message"] = message
        args.body = _body
        if company_id is not None:
            _path_params["company_id"] = company_id
        if availability_id is not None:
            _path_params["availability_id"] = availability_id
        args.path = _path_params
        return args

    async def _aupdate_status_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor204Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update Availability Status
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_availability_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/availabilities/{availability_id}/status',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_availability_update_status_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_status_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor204,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update Availability Status
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_availability_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/company/{company_id}/availabilities/{availability_id}/status',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_availability_update_status_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateStatusRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_status(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor204Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_status_mapped_args(
            status=status,
            company_id=company_id,
            availability_id=availability_id,
            message=message,
        )
        return await self._aupdate_status_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_status(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor204,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_status_mapped_args(
            status=status,
            company_id=company_id,
            availability_id=availability_id,
            message=message,
        )
        return self._update_status_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateStatus(BaseApi):

    async def aupdate_status(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> None:
        raw_response = await self.raw.aupdate_status(
            status=status,
            company_id=company_id,
            availability_id=availability_id,
            message=message,
            **kwargs,
        )
    
    
    def update_status(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
        validate: bool = False,
    ) -> None:
        raw_response = self.raw.update_status(
            status=status,
            company_id=company_id,
            availability_id=availability_id,
            message=message,
        )


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor204Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_status_mapped_args(
            status=status,
            company_id=company_id,
            availability_id=availability_id,
            message=message,
        )
        return await self._aupdate_status_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        status: str,
        company_id: int,
        availability_id: int,
        message: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor204,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_status_mapped_args(
            status=status,
            company_id=company_id,
            availability_id=availability_id,
            message=message,
        )
        return self._update_status_oapg(
            body=args.body,
            path_params=args.path,
        )

