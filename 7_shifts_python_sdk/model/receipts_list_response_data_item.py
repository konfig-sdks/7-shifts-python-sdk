# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class ReceiptsListResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "net_total",
            "receipt_id",
            "location_id",
        }
        
        class properties:
            
            
            class location_id(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            receipt_id = schemas.StrSchema
            net_total = schemas.IntSchema
            uuid = schemas.UUIDSchema
            company_id = schemas.IntSchema
            pos_id = schemas.IntSchema
            receipt_date = schemas.DateTimeSchema
            receipt_close_date = schemas.DateTimeSchema
            gross_total = schemas.IntSchema
            tips = schemas.IntSchema
            total_receipt_discounts = schemas.IntSchema
            total_item_discounts = schemas.IntSchema
            
            
            class external_user_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'external_user_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class revenue_center(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'revenue_center':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def receipt_lines() -> typing.Type['ReceiptsListResponseDataItemReceiptLines']:
                return ReceiptsListResponseDataItemReceiptLines
        
            @staticmethod
            def tip_details() -> typing.Type['ReceiptsListResponseDataItemTipDetails']:
                return ReceiptsListResponseDataItemTipDetails
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "open": "OPEN",
                        "closed": "CLOSED",
                        "voided": "VOIDED",
                        "deleted": "DELETED",
                    }
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("open")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("closed")
                
                @schemas.classproperty
                def VOIDED(cls):
                    return cls("voided")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("deleted")
            created_date = schemas.DateTimeSchema
            modified_date = schemas.DateTimeSchema
            __annotations__ = {
                "location_id": location_id,
                "receipt_id": receipt_id,
                "net_total": net_total,
                "uuid": uuid,
                "company_id": company_id,
                "pos_id": pos_id,
                "receipt_date": receipt_date,
                "receipt_close_date": receipt_close_date,
                "gross_total": gross_total,
                "tips": tips,
                "total_receipt_discounts": total_receipt_discounts,
                "total_item_discounts": total_item_discounts,
                "external_user_id": external_user_id,
                "revenue_center": revenue_center,
                "receipt_lines": receipt_lines,
                "tip_details": tip_details,
                "status": status,
                "created_date": created_date,
                "modified_date": modified_date,
            }
    
    net_total: MetaOapg.properties.net_total
    receipt_id: MetaOapg.properties.receipt_id
    location_id: MetaOapg.properties.location_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt_id"]) -> MetaOapg.properties.receipt_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_total"]) -> MetaOapg.properties.net_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pos_id"]) -> MetaOapg.properties.pos_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt_date"]) -> MetaOapg.properties.receipt_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt_close_date"]) -> MetaOapg.properties.receipt_close_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_total"]) -> MetaOapg.properties.gross_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tips"]) -> MetaOapg.properties.tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_receipt_discounts"]) -> MetaOapg.properties.total_receipt_discounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_item_discounts"]) -> MetaOapg.properties.total_item_discounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_user_id"]) -> MetaOapg.properties.external_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revenue_center"]) -> MetaOapg.properties.revenue_center: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt_lines"]) -> 'ReceiptsListResponseDataItemReceiptLines': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tip_details"]) -> 'ReceiptsListResponseDataItemTipDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_date"]) -> MetaOapg.properties.created_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_date"]) -> MetaOapg.properties.modified_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["location_id", "receipt_id", "net_total", "uuid", "company_id", "pos_id", "receipt_date", "receipt_close_date", "gross_total", "tips", "total_receipt_discounts", "total_item_discounts", "external_user_id", "revenue_center", "receipt_lines", "tip_details", "status", "created_date", "modified_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt_id"]) -> MetaOapg.properties.receipt_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_total"]) -> MetaOapg.properties.net_total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> typing.Union[MetaOapg.properties.company_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pos_id"]) -> typing.Union[MetaOapg.properties.pos_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt_date"]) -> typing.Union[MetaOapg.properties.receipt_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt_close_date"]) -> typing.Union[MetaOapg.properties.receipt_close_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_total"]) -> typing.Union[MetaOapg.properties.gross_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tips"]) -> typing.Union[MetaOapg.properties.tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_receipt_discounts"]) -> typing.Union[MetaOapg.properties.total_receipt_discounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_item_discounts"]) -> typing.Union[MetaOapg.properties.total_item_discounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_user_id"]) -> typing.Union[MetaOapg.properties.external_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revenue_center"]) -> typing.Union[MetaOapg.properties.revenue_center, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt_lines"]) -> typing.Union['ReceiptsListResponseDataItemReceiptLines', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tip_details"]) -> typing.Union['ReceiptsListResponseDataItemTipDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_date"]) -> typing.Union[MetaOapg.properties.created_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_date"]) -> typing.Union[MetaOapg.properties.modified_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["location_id", "receipt_id", "net_total", "uuid", "company_id", "pos_id", "receipt_date", "receipt_close_date", "gross_total", "tips", "total_receipt_discounts", "total_item_discounts", "external_user_id", "revenue_center", "receipt_lines", "tip_details", "status", "created_date", "modified_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        net_total: typing.Union[MetaOapg.properties.net_total, decimal.Decimal, int, ],
        receipt_id: typing.Union[MetaOapg.properties.receipt_id, str, ],
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        company_id: typing.Union[MetaOapg.properties.company_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pos_id: typing.Union[MetaOapg.properties.pos_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        receipt_date: typing.Union[MetaOapg.properties.receipt_date, str, datetime, schemas.Unset] = schemas.unset,
        receipt_close_date: typing.Union[MetaOapg.properties.receipt_close_date, str, datetime, schemas.Unset] = schemas.unset,
        gross_total: typing.Union[MetaOapg.properties.gross_total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tips: typing.Union[MetaOapg.properties.tips, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_receipt_discounts: typing.Union[MetaOapg.properties.total_receipt_discounts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_item_discounts: typing.Union[MetaOapg.properties.total_item_discounts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        external_user_id: typing.Union[MetaOapg.properties.external_user_id, None, str, schemas.Unset] = schemas.unset,
        revenue_center: typing.Union[MetaOapg.properties.revenue_center, None, str, schemas.Unset] = schemas.unset,
        receipt_lines: typing.Union['ReceiptsListResponseDataItemReceiptLines', schemas.Unset] = schemas.unset,
        tip_details: typing.Union['ReceiptsListResponseDataItemTipDetails', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        created_date: typing.Union[MetaOapg.properties.created_date, str, datetime, schemas.Unset] = schemas.unset,
        modified_date: typing.Union[MetaOapg.properties.modified_date, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReceiptsListResponseDataItem':
        return super().__new__(
            cls,
            *args,
            net_total=net_total,
            receipt_id=receipt_id,
            location_id=location_id,
            uuid=uuid,
            company_id=company_id,
            pos_id=pos_id,
            receipt_date=receipt_date,
            receipt_close_date=receipt_close_date,
            gross_total=gross_total,
            tips=tips,
            total_receipt_discounts=total_receipt_discounts,
            total_item_discounts=total_item_discounts,
            external_user_id=external_user_id,
            revenue_center=revenue_center,
            receipt_lines=receipt_lines,
            tip_details=tip_details,
            status=status,
            created_date=created_date,
            modified_date=modified_date,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.receipts_list_response_data_item_receipt_lines import ReceiptsListResponseDataItemReceiptLines
from 7_shifts_python_sdk.model.receipts_list_response_data_item_tip_details import ReceiptsListResponseDataItemTipDetails
