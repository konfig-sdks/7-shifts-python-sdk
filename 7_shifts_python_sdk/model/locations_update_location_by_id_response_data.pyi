# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class LocationsUpdateLocationByIdResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "formatted_address",
            "sat_is_closed",
            "city",
            "timezone",
            "wed_hours_close",
            "fri_hours_open",
            "sat_hours_close",
            "sun_hours_open",
            "department_based_budget",
            "modified",
            "mon_hours_close",
            "thu_hours_close",
            "id",
            "state",
            "mon_hours_open",
            "place_id",
            "thu_hours_open",
            "tue_hours_open",
            "fri_is_closed",
            "company_id",
            "created",
            "wed_hours_open",
            "wed_is_closed",
            "message",
            "thu_is_closed",
            "tue_hours_close",
            "tue_is_closed",
            "fri_hours_close",
            "sat_hours_open",
            "sun_hours_close",
            "name",
            "shift_feedback",
            "mon_is_closed",
            "hash",
            "sun_is_closed",
        }
        
        class properties:
            id = schemas.IntSchema
            company_id = schemas.IntSchema
            name = schemas.StrSchema
            country = schemas.StrSchema
            
            
            class state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class formatted_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'formatted_address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class place_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'place_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            timezone = schemas.StrSchema
            hash = schemas.StrSchema
            
            
            class department_based_budget(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department_based_budget':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sun_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class mon_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class tue_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class wed_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class thu_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class fri_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class sat_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class sun_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sun_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mon_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mon_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tue_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tue_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wed_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wed_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class thu_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thu_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fri_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fri_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sat_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sat_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sun_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sun_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mon_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mon_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tue_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tue_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wed_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wed_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class thu_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thu_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fri_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fri_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sat_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sat_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            shift_feedback = schemas.BoolSchema
            
            
            class message(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'message':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created = schemas.DateTimeSchema
            modified = schemas.DateTimeSchema
            
            
            class lat(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lat':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lng(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lng':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class timezone_updated(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timezone_updated':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mapping_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mapping_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            holiday_pay = schemas.BoolSchema
            
            
            class auto_send_log_book_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_send_log_book_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            deleted = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "company_id": company_id,
                "name": name,
                "country": country,
                "state": state,
                "city": city,
                "formatted_address": formatted_address,
                "place_id": place_id,
                "timezone": timezone,
                "hash": hash,
                "department_based_budget": department_based_budget,
                "sun_hours_close": sun_hours_close,
                "mon_hours_close": mon_hours_close,
                "tue_hours_close": tue_hours_close,
                "wed_hours_close": wed_hours_close,
                "thu_hours_close": thu_hours_close,
                "fri_hours_close": fri_hours_close,
                "sat_hours_close": sat_hours_close,
                "sun_hours_open": sun_hours_open,
                "mon_hours_open": mon_hours_open,
                "tue_hours_open": tue_hours_open,
                "wed_hours_open": wed_hours_open,
                "thu_hours_open": thu_hours_open,
                "fri_hours_open": fri_hours_open,
                "sat_hours_open": sat_hours_open,
                "sun_is_closed": sun_is_closed,
                "mon_is_closed": mon_is_closed,
                "tue_is_closed": tue_is_closed,
                "wed_is_closed": wed_is_closed,
                "thu_is_closed": thu_is_closed,
                "fri_is_closed": fri_is_closed,
                "sat_is_closed": sat_is_closed,
                "shift_feedback": shift_feedback,
                "message": message,
                "created": created,
                "modified": modified,
                "lat": lat,
                "lng": lng,
                "timezone_updated": timezone_updated,
                "mapping_id": mapping_id,
                "holiday_pay": holiday_pay,
                "auto_send_log_book_time": auto_send_log_book_time,
                "deleted": deleted,
            }
    
    country: MetaOapg.properties.country
    formatted_address: MetaOapg.properties.formatted_address
    sat_is_closed: MetaOapg.properties.sat_is_closed
    city: MetaOapg.properties.city
    timezone: MetaOapg.properties.timezone
    wed_hours_close: MetaOapg.properties.wed_hours_close
    fri_hours_open: MetaOapg.properties.fri_hours_open
    sat_hours_close: MetaOapg.properties.sat_hours_close
    sun_hours_open: MetaOapg.properties.sun_hours_open
    department_based_budget: MetaOapg.properties.department_based_budget
    modified: MetaOapg.properties.modified
    mon_hours_close: MetaOapg.properties.mon_hours_close
    thu_hours_close: MetaOapg.properties.thu_hours_close
    id: MetaOapg.properties.id
    state: MetaOapg.properties.state
    mon_hours_open: MetaOapg.properties.mon_hours_open
    place_id: MetaOapg.properties.place_id
    thu_hours_open: MetaOapg.properties.thu_hours_open
    tue_hours_open: MetaOapg.properties.tue_hours_open
    fri_is_closed: MetaOapg.properties.fri_is_closed
    company_id: MetaOapg.properties.company_id
    created: MetaOapg.properties.created
    wed_hours_open: MetaOapg.properties.wed_hours_open
    wed_is_closed: MetaOapg.properties.wed_is_closed
    message: MetaOapg.properties.message
    thu_is_closed: MetaOapg.properties.thu_is_closed
    tue_hours_close: MetaOapg.properties.tue_hours_close
    tue_is_closed: MetaOapg.properties.tue_is_closed
    fri_hours_close: MetaOapg.properties.fri_hours_close
    sat_hours_open: MetaOapg.properties.sat_hours_open
    sun_hours_close: MetaOapg.properties.sun_hours_close
    name: MetaOapg.properties.name
    shift_feedback: MetaOapg.properties.shift_feedback
    mon_is_closed: MetaOapg.properties.mon_is_closed
    hash: MetaOapg.properties.hash
    sun_is_closed: MetaOapg.properties.sun_is_closed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formatted_address"]) -> MetaOapg.properties.formatted_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["place_id"]) -> MetaOapg.properties.place_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department_based_budget"]) -> MetaOapg.properties.department_based_budget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_hours_close"]) -> MetaOapg.properties.sun_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_hours_close"]) -> MetaOapg.properties.mon_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_hours_close"]) -> MetaOapg.properties.tue_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_hours_close"]) -> MetaOapg.properties.wed_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_hours_close"]) -> MetaOapg.properties.thu_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_hours_close"]) -> MetaOapg.properties.fri_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_hours_close"]) -> MetaOapg.properties.sat_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_hours_open"]) -> MetaOapg.properties.sun_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_hours_open"]) -> MetaOapg.properties.mon_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_hours_open"]) -> MetaOapg.properties.tue_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_hours_open"]) -> MetaOapg.properties.wed_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_hours_open"]) -> MetaOapg.properties.thu_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_hours_open"]) -> MetaOapg.properties.fri_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_hours_open"]) -> MetaOapg.properties.sat_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_is_closed"]) -> MetaOapg.properties.sun_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_is_closed"]) -> MetaOapg.properties.mon_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_is_closed"]) -> MetaOapg.properties.tue_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_is_closed"]) -> MetaOapg.properties.wed_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_is_closed"]) -> MetaOapg.properties.thu_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_is_closed"]) -> MetaOapg.properties.fri_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_is_closed"]) -> MetaOapg.properties.sat_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift_feedback"]) -> MetaOapg.properties.shift_feedback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lat"]) -> MetaOapg.properties.lat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lng"]) -> MetaOapg.properties.lng: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone_updated"]) -> MetaOapg.properties.timezone_updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mapping_id"]) -> MetaOapg.properties.mapping_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holiday_pay"]) -> MetaOapg.properties.holiday_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_send_log_book_time"]) -> MetaOapg.properties.auto_send_log_book_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "company_id", "name", "country", "state", "city", "formatted_address", "place_id", "timezone", "hash", "department_based_budget", "sun_hours_close", "mon_hours_close", "tue_hours_close", "wed_hours_close", "thu_hours_close", "fri_hours_close", "sat_hours_close", "sun_hours_open", "mon_hours_open", "tue_hours_open", "wed_hours_open", "thu_hours_open", "fri_hours_open", "sat_hours_open", "sun_is_closed", "mon_is_closed", "tue_is_closed", "wed_is_closed", "thu_is_closed", "fri_is_closed", "sat_is_closed", "shift_feedback", "message", "created", "modified", "lat", "lng", "timezone_updated", "mapping_id", "holiday_pay", "auto_send_log_book_time", "deleted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formatted_address"]) -> MetaOapg.properties.formatted_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["place_id"]) -> MetaOapg.properties.place_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department_based_budget"]) -> MetaOapg.properties.department_based_budget: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_hours_close"]) -> MetaOapg.properties.sun_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_hours_close"]) -> MetaOapg.properties.mon_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_hours_close"]) -> MetaOapg.properties.tue_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_hours_close"]) -> MetaOapg.properties.wed_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_hours_close"]) -> MetaOapg.properties.thu_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_hours_close"]) -> MetaOapg.properties.fri_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_hours_close"]) -> MetaOapg.properties.sat_hours_close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_hours_open"]) -> MetaOapg.properties.sun_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_hours_open"]) -> MetaOapg.properties.mon_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_hours_open"]) -> MetaOapg.properties.tue_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_hours_open"]) -> MetaOapg.properties.wed_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_hours_open"]) -> MetaOapg.properties.thu_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_hours_open"]) -> MetaOapg.properties.fri_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_hours_open"]) -> MetaOapg.properties.sat_hours_open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_is_closed"]) -> MetaOapg.properties.sun_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_is_closed"]) -> MetaOapg.properties.mon_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_is_closed"]) -> MetaOapg.properties.tue_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_is_closed"]) -> MetaOapg.properties.wed_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_is_closed"]) -> MetaOapg.properties.thu_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_is_closed"]) -> MetaOapg.properties.fri_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_is_closed"]) -> MetaOapg.properties.sat_is_closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift_feedback"]) -> MetaOapg.properties.shift_feedback: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lat"]) -> typing.Union[MetaOapg.properties.lat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lng"]) -> typing.Union[MetaOapg.properties.lng, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone_updated"]) -> typing.Union[MetaOapg.properties.timezone_updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mapping_id"]) -> typing.Union[MetaOapg.properties.mapping_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holiday_pay"]) -> typing.Union[MetaOapg.properties.holiday_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_send_log_book_time"]) -> typing.Union[MetaOapg.properties.auto_send_log_book_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "company_id", "name", "country", "state", "city", "formatted_address", "place_id", "timezone", "hash", "department_based_budget", "sun_hours_close", "mon_hours_close", "tue_hours_close", "wed_hours_close", "thu_hours_close", "fri_hours_close", "sat_hours_close", "sun_hours_open", "mon_hours_open", "tue_hours_open", "wed_hours_open", "thu_hours_open", "fri_hours_open", "sat_hours_open", "sun_is_closed", "mon_is_closed", "tue_is_closed", "wed_is_closed", "thu_is_closed", "fri_is_closed", "sat_is_closed", "shift_feedback", "message", "created", "modified", "lat", "lng", "timezone_updated", "mapping_id", "holiday_pay", "auto_send_log_book_time", "deleted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        formatted_address: typing.Union[MetaOapg.properties.formatted_address, None, str, ],
        sat_is_closed: typing.Union[MetaOapg.properties.sat_is_closed, None, bool, ],
        city: typing.Union[MetaOapg.properties.city, None, str, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        wed_hours_close: typing.Union[MetaOapg.properties.wed_hours_close, str, ],
        fri_hours_open: typing.Union[MetaOapg.properties.fri_hours_open, None, str, ],
        sat_hours_close: typing.Union[MetaOapg.properties.sat_hours_close, str, ],
        sun_hours_open: typing.Union[MetaOapg.properties.sun_hours_open, None, str, ],
        department_based_budget: typing.Union[MetaOapg.properties.department_based_budget, None, bool, ],
        modified: typing.Union[MetaOapg.properties.modified, str, datetime, ],
        mon_hours_close: typing.Union[MetaOapg.properties.mon_hours_close, str, ],
        thu_hours_close: typing.Union[MetaOapg.properties.thu_hours_close, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        state: typing.Union[MetaOapg.properties.state, None, str, ],
        mon_hours_open: typing.Union[MetaOapg.properties.mon_hours_open, None, str, ],
        place_id: typing.Union[MetaOapg.properties.place_id, None, str, ],
        thu_hours_open: typing.Union[MetaOapg.properties.thu_hours_open, None, str, ],
        tue_hours_open: typing.Union[MetaOapg.properties.tue_hours_open, None, str, ],
        fri_is_closed: typing.Union[MetaOapg.properties.fri_is_closed, None, bool, ],
        company_id: typing.Union[MetaOapg.properties.company_id, decimal.Decimal, int, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        wed_hours_open: typing.Union[MetaOapg.properties.wed_hours_open, None, str, ],
        wed_is_closed: typing.Union[MetaOapg.properties.wed_is_closed, None, bool, ],
        message: typing.Union[MetaOapg.properties.message, None, str, ],
        thu_is_closed: typing.Union[MetaOapg.properties.thu_is_closed, None, bool, ],
        tue_hours_close: typing.Union[MetaOapg.properties.tue_hours_close, str, ],
        tue_is_closed: typing.Union[MetaOapg.properties.tue_is_closed, None, bool, ],
        fri_hours_close: typing.Union[MetaOapg.properties.fri_hours_close, str, ],
        sat_hours_open: typing.Union[MetaOapg.properties.sat_hours_open, None, str, ],
        sun_hours_close: typing.Union[MetaOapg.properties.sun_hours_close, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        shift_feedback: typing.Union[MetaOapg.properties.shift_feedback, bool, ],
        mon_is_closed: typing.Union[MetaOapg.properties.mon_is_closed, None, bool, ],
        hash: typing.Union[MetaOapg.properties.hash, str, ],
        sun_is_closed: typing.Union[MetaOapg.properties.sun_is_closed, None, bool, ],
        lat: typing.Union[MetaOapg.properties.lat, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lng: typing.Union[MetaOapg.properties.lng, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        timezone_updated: typing.Union[MetaOapg.properties.timezone_updated, None, bool, schemas.Unset] = schemas.unset,
        mapping_id: typing.Union[MetaOapg.properties.mapping_id, None, str, schemas.Unset] = schemas.unset,
        holiday_pay: typing.Union[MetaOapg.properties.holiday_pay, bool, schemas.Unset] = schemas.unset,
        auto_send_log_book_time: typing.Union[MetaOapg.properties.auto_send_log_book_time, None, str, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocationsUpdateLocationByIdResponseData':
        return super().__new__(
            cls,
            *args,
            country=country,
            formatted_address=formatted_address,
            sat_is_closed=sat_is_closed,
            city=city,
            timezone=timezone,
            wed_hours_close=wed_hours_close,
            fri_hours_open=fri_hours_open,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            department_based_budget=department_based_budget,
            modified=modified,
            mon_hours_close=mon_hours_close,
            thu_hours_close=thu_hours_close,
            id=id,
            state=state,
            mon_hours_open=mon_hours_open,
            place_id=place_id,
            thu_hours_open=thu_hours_open,
            tue_hours_open=tue_hours_open,
            fri_is_closed=fri_is_closed,
            company_id=company_id,
            created=created,
            wed_hours_open=wed_hours_open,
            wed_is_closed=wed_is_closed,
            message=message,
            thu_is_closed=thu_is_closed,
            tue_hours_close=tue_hours_close,
            tue_is_closed=tue_is_closed,
            fri_hours_close=fri_hours_close,
            sat_hours_open=sat_hours_open,
            sun_hours_close=sun_hours_close,
            name=name,
            shift_feedback=shift_feedback,
            mon_is_closed=mon_is_closed,
            hash=hash,
            sun_is_closed=sun_is_closed,
            lat=lat,
            lng=lng,
            timezone_updated=timezone_updated,
            mapping_id=mapping_id,
            holiday_pay=holiday_pay,
            auto_send_log_book_time=auto_send_log_book_time,
            deleted=deleted,
            _configuration=_configuration,
            **kwargs,
        )
