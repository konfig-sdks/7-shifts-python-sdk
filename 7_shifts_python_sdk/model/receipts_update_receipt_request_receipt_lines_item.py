# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class ReceiptsUpdateReceiptRequestReceiptLinesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "external_category_ids",
            "quantity",
            "item_discount",
            "price",
            "net_item_price",
            "gross_item_price",
            "external_item_id",
            "status",
        }
        
        class properties:
            external_item_id = schemas.StrSchema
        
            @staticmethod
            def external_category_ids() -> typing.Type['ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds']:
                return ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds
            quantity = schemas.IntSchema
            price = schemas.IntSchema
            gross_item_price = schemas.IntSchema
            net_item_price = schemas.IntSchema
            
            
            class item_discount(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "open": "OPEN",
                        "closed": "CLOSED",
                        "voided": "VOIDED",
                        "deleted": "DELETED",
                    }
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("open")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("closed")
                
                @schemas.classproperty
                def VOIDED(cls):
                    return cls("voided")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("deleted")
            created = schemas.DateTimeSchema
            __annotations__ = {
                "external_item_id": external_item_id,
                "external_category_ids": external_category_ids,
                "quantity": quantity,
                "price": price,
                "gross_item_price": gross_item_price,
                "net_item_price": net_item_price,
                "item_discount": item_discount,
                "status": status,
                "created": created,
            }
    
    external_category_ids: 'ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds'
    quantity: MetaOapg.properties.quantity
    item_discount: MetaOapg.properties.item_discount
    price: MetaOapg.properties.price
    net_item_price: MetaOapg.properties.net_item_price
    gross_item_price: MetaOapg.properties.gross_item_price
    external_item_id: MetaOapg.properties.external_item_id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_item_id"]) -> MetaOapg.properties.external_item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_category_ids"]) -> 'ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross_item_price"]) -> MetaOapg.properties.gross_item_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net_item_price"]) -> MetaOapg.properties.net_item_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_discount"]) -> MetaOapg.properties.item_discount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["external_item_id", "external_category_ids", "quantity", "price", "gross_item_price", "net_item_price", "item_discount", "status", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_item_id"]) -> MetaOapg.properties.external_item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_category_ids"]) -> 'ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross_item_price"]) -> MetaOapg.properties.gross_item_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net_item_price"]) -> MetaOapg.properties.net_item_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_discount"]) -> MetaOapg.properties.item_discount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["external_item_id", "external_category_ids", "quantity", "price", "gross_item_price", "net_item_price", "item_discount", "status", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        external_category_ids: 'ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds',
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, ],
        item_discount: typing.Union[MetaOapg.properties.item_discount, decimal.Decimal, int, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, ],
        net_item_price: typing.Union[MetaOapg.properties.net_item_price, decimal.Decimal, int, ],
        gross_item_price: typing.Union[MetaOapg.properties.gross_item_price, decimal.Decimal, int, ],
        external_item_id: typing.Union[MetaOapg.properties.external_item_id, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReceiptsUpdateReceiptRequestReceiptLinesItem':
        return super().__new__(
            cls,
            *args,
            external_category_ids=external_category_ids,
            quantity=quantity,
            item_discount=item_discount,
            price=price,
            net_item_price=net_item_price,
            gross_item_price=gross_item_price,
            external_item_id=external_item_id,
            status=status,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.receipts_update_receipt_request_receipt_lines_item_external_category_ids import ReceiptsUpdateReceiptRequestReceiptLinesItemExternalCategoryIds
