# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class LocationsCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class country(
                schemas.StrSchema
            ):
                pass
            formatted_address = schemas.StrSchema
            
            
            class state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            latitude = schemas.StrSchema
            longitude = schemas.StrSchema
            place_id = schemas.StrSchema
            timezone = schemas.StrSchema
            holiday_pay = schemas.BoolSchema
            
            
            class sun_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class mon_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class tue_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class wed_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class thu_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class fri_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class sat_hours_close(
                schemas.StrSchema
            ):
                pass
            
            
            class sun_hours_open(
                schemas.StrSchema
            ):
                pass
            
            
            class mon_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mon_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tue_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tue_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wed_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wed_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class thu_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thu_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fri_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fri_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sat_hours_open(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sat_hours_open':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sun_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sun_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mon_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mon_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tue_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tue_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wed_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wed_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class thu_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thu_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fri_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fri_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sat_is_closed(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sat_is_closed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            enable_shift_feedback = schemas.BoolSchema
            shift_feedback = schemas.BoolSchema
            
            
            class coupon(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coupon':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            stripe_token_id = schemas.StrSchema
            
            
            class copy_from_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'copy_from_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "country": country,
                "formatted_address": formatted_address,
                "state": state,
                "city": city,
                "latitude": latitude,
                "longitude": longitude,
                "place_id": place_id,
                "timezone": timezone,
                "holiday_pay": holiday_pay,
                "sun_hours_close": sun_hours_close,
                "mon_hours_close": mon_hours_close,
                "tue_hours_close": tue_hours_close,
                "wed_hours_close": wed_hours_close,
                "thu_hours_close": thu_hours_close,
                "fri_hours_close": fri_hours_close,
                "sat_hours_close": sat_hours_close,
                "sun_hours_open": sun_hours_open,
                "mon_hours_open": mon_hours_open,
                "tue_hours_open": tue_hours_open,
                "wed_hours_open": wed_hours_open,
                "thu_hours_open": thu_hours_open,
                "fri_hours_open": fri_hours_open,
                "sat_hours_open": sat_hours_open,
                "sun_is_closed": sun_is_closed,
                "mon_is_closed": mon_is_closed,
                "tue_is_closed": tue_is_closed,
                "wed_is_closed": wed_is_closed,
                "thu_is_closed": thu_is_closed,
                "fri_is_closed": fri_is_closed,
                "sat_is_closed": sat_is_closed,
                "enable_shift_feedback": enable_shift_feedback,
                "shift_feedback": shift_feedback,
                "coupon": coupon,
                "stripe_token_id": stripe_token_id,
                "copy_from_id": copy_from_id,
            }
    
    country: MetaOapg.properties.country
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formatted_address"]) -> MetaOapg.properties.formatted_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["place_id"]) -> MetaOapg.properties.place_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holiday_pay"]) -> MetaOapg.properties.holiday_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_hours_close"]) -> MetaOapg.properties.sun_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_hours_close"]) -> MetaOapg.properties.mon_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_hours_close"]) -> MetaOapg.properties.tue_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_hours_close"]) -> MetaOapg.properties.wed_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_hours_close"]) -> MetaOapg.properties.thu_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_hours_close"]) -> MetaOapg.properties.fri_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_hours_close"]) -> MetaOapg.properties.sat_hours_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_hours_open"]) -> MetaOapg.properties.sun_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_hours_open"]) -> MetaOapg.properties.mon_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_hours_open"]) -> MetaOapg.properties.tue_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_hours_open"]) -> MetaOapg.properties.wed_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_hours_open"]) -> MetaOapg.properties.thu_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_hours_open"]) -> MetaOapg.properties.fri_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_hours_open"]) -> MetaOapg.properties.sat_hours_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_is_closed"]) -> MetaOapg.properties.sun_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_is_closed"]) -> MetaOapg.properties.mon_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_is_closed"]) -> MetaOapg.properties.tue_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_is_closed"]) -> MetaOapg.properties.wed_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_is_closed"]) -> MetaOapg.properties.thu_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_is_closed"]) -> MetaOapg.properties.fri_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_is_closed"]) -> MetaOapg.properties.sat_is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_shift_feedback"]) -> MetaOapg.properties.enable_shift_feedback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift_feedback"]) -> MetaOapg.properties.shift_feedback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coupon"]) -> MetaOapg.properties.coupon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripe_token_id"]) -> MetaOapg.properties.stripe_token_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copy_from_id"]) -> MetaOapg.properties.copy_from_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "country", "formatted_address", "state", "city", "latitude", "longitude", "place_id", "timezone", "holiday_pay", "sun_hours_close", "mon_hours_close", "tue_hours_close", "wed_hours_close", "thu_hours_close", "fri_hours_close", "sat_hours_close", "sun_hours_open", "mon_hours_open", "tue_hours_open", "wed_hours_open", "thu_hours_open", "fri_hours_open", "sat_hours_open", "sun_is_closed", "mon_is_closed", "tue_is_closed", "wed_is_closed", "thu_is_closed", "fri_is_closed", "sat_is_closed", "enable_shift_feedback", "shift_feedback", "coupon", "stripe_token_id", "copy_from_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formatted_address"]) -> typing.Union[MetaOapg.properties.formatted_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["place_id"]) -> typing.Union[MetaOapg.properties.place_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holiday_pay"]) -> typing.Union[MetaOapg.properties.holiday_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_hours_close"]) -> typing.Union[MetaOapg.properties.sun_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_hours_close"]) -> typing.Union[MetaOapg.properties.mon_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_hours_close"]) -> typing.Union[MetaOapg.properties.tue_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_hours_close"]) -> typing.Union[MetaOapg.properties.wed_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_hours_close"]) -> typing.Union[MetaOapg.properties.thu_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_hours_close"]) -> typing.Union[MetaOapg.properties.fri_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_hours_close"]) -> typing.Union[MetaOapg.properties.sat_hours_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_hours_open"]) -> typing.Union[MetaOapg.properties.sun_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_hours_open"]) -> typing.Union[MetaOapg.properties.mon_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_hours_open"]) -> typing.Union[MetaOapg.properties.tue_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_hours_open"]) -> typing.Union[MetaOapg.properties.wed_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_hours_open"]) -> typing.Union[MetaOapg.properties.thu_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_hours_open"]) -> typing.Union[MetaOapg.properties.fri_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_hours_open"]) -> typing.Union[MetaOapg.properties.sat_hours_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_is_closed"]) -> typing.Union[MetaOapg.properties.sun_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_is_closed"]) -> typing.Union[MetaOapg.properties.mon_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_is_closed"]) -> typing.Union[MetaOapg.properties.tue_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_is_closed"]) -> typing.Union[MetaOapg.properties.wed_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_is_closed"]) -> typing.Union[MetaOapg.properties.thu_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_is_closed"]) -> typing.Union[MetaOapg.properties.fri_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_is_closed"]) -> typing.Union[MetaOapg.properties.sat_is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_shift_feedback"]) -> typing.Union[MetaOapg.properties.enable_shift_feedback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift_feedback"]) -> typing.Union[MetaOapg.properties.shift_feedback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coupon"]) -> typing.Union[MetaOapg.properties.coupon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripe_token_id"]) -> typing.Union[MetaOapg.properties.stripe_token_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copy_from_id"]) -> typing.Union[MetaOapg.properties.copy_from_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "country", "formatted_address", "state", "city", "latitude", "longitude", "place_id", "timezone", "holiday_pay", "sun_hours_close", "mon_hours_close", "tue_hours_close", "wed_hours_close", "thu_hours_close", "fri_hours_close", "sat_hours_close", "sun_hours_open", "mon_hours_open", "tue_hours_open", "wed_hours_open", "thu_hours_open", "fri_hours_open", "sat_hours_open", "sun_is_closed", "mon_is_closed", "tue_is_closed", "wed_is_closed", "thu_is_closed", "fri_is_closed", "sat_is_closed", "enable_shift_feedback", "shift_feedback", "coupon", "stripe_token_id", "copy_from_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        formatted_address: typing.Union[MetaOapg.properties.formatted_address, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, None, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, None, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, str, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, str, schemas.Unset] = schemas.unset,
        place_id: typing.Union[MetaOapg.properties.place_id, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        holiday_pay: typing.Union[MetaOapg.properties.holiday_pay, bool, schemas.Unset] = schemas.unset,
        sun_hours_close: typing.Union[MetaOapg.properties.sun_hours_close, str, schemas.Unset] = schemas.unset,
        mon_hours_close: typing.Union[MetaOapg.properties.mon_hours_close, str, schemas.Unset] = schemas.unset,
        tue_hours_close: typing.Union[MetaOapg.properties.tue_hours_close, str, schemas.Unset] = schemas.unset,
        wed_hours_close: typing.Union[MetaOapg.properties.wed_hours_close, str, schemas.Unset] = schemas.unset,
        thu_hours_close: typing.Union[MetaOapg.properties.thu_hours_close, str, schemas.Unset] = schemas.unset,
        fri_hours_close: typing.Union[MetaOapg.properties.fri_hours_close, str, schemas.Unset] = schemas.unset,
        sat_hours_close: typing.Union[MetaOapg.properties.sat_hours_close, str, schemas.Unset] = schemas.unset,
        sun_hours_open: typing.Union[MetaOapg.properties.sun_hours_open, str, schemas.Unset] = schemas.unset,
        mon_hours_open: typing.Union[MetaOapg.properties.mon_hours_open, None, str, schemas.Unset] = schemas.unset,
        tue_hours_open: typing.Union[MetaOapg.properties.tue_hours_open, None, str, schemas.Unset] = schemas.unset,
        wed_hours_open: typing.Union[MetaOapg.properties.wed_hours_open, None, str, schemas.Unset] = schemas.unset,
        thu_hours_open: typing.Union[MetaOapg.properties.thu_hours_open, None, str, schemas.Unset] = schemas.unset,
        fri_hours_open: typing.Union[MetaOapg.properties.fri_hours_open, None, str, schemas.Unset] = schemas.unset,
        sat_hours_open: typing.Union[MetaOapg.properties.sat_hours_open, None, str, schemas.Unset] = schemas.unset,
        sun_is_closed: typing.Union[MetaOapg.properties.sun_is_closed, None, bool, schemas.Unset] = schemas.unset,
        mon_is_closed: typing.Union[MetaOapg.properties.mon_is_closed, None, bool, schemas.Unset] = schemas.unset,
        tue_is_closed: typing.Union[MetaOapg.properties.tue_is_closed, None, bool, schemas.Unset] = schemas.unset,
        wed_is_closed: typing.Union[MetaOapg.properties.wed_is_closed, None, bool, schemas.Unset] = schemas.unset,
        thu_is_closed: typing.Union[MetaOapg.properties.thu_is_closed, None, bool, schemas.Unset] = schemas.unset,
        fri_is_closed: typing.Union[MetaOapg.properties.fri_is_closed, None, bool, schemas.Unset] = schemas.unset,
        sat_is_closed: typing.Union[MetaOapg.properties.sat_is_closed, None, bool, schemas.Unset] = schemas.unset,
        enable_shift_feedback: typing.Union[MetaOapg.properties.enable_shift_feedback, bool, schemas.Unset] = schemas.unset,
        shift_feedback: typing.Union[MetaOapg.properties.shift_feedback, bool, schemas.Unset] = schemas.unset,
        coupon: typing.Union[MetaOapg.properties.coupon, None, str, schemas.Unset] = schemas.unset,
        stripe_token_id: typing.Union[MetaOapg.properties.stripe_token_id, str, schemas.Unset] = schemas.unset,
        copy_from_id: typing.Union[MetaOapg.properties.copy_from_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocationsCreateRequest':
        return super().__new__(
            cls,
            *args,
            country=country,
            name=name,
            formatted_address=formatted_address,
            state=state,
            city=city,
            latitude=latitude,
            longitude=longitude,
            place_id=place_id,
            timezone=timezone,
            holiday_pay=holiday_pay,
            sun_hours_close=sun_hours_close,
            mon_hours_close=mon_hours_close,
            tue_hours_close=tue_hours_close,
            wed_hours_close=wed_hours_close,
            thu_hours_close=thu_hours_close,
            fri_hours_close=fri_hours_close,
            sat_hours_close=sat_hours_close,
            sun_hours_open=sun_hours_open,
            mon_hours_open=mon_hours_open,
            tue_hours_open=tue_hours_open,
            wed_hours_open=wed_hours_open,
            thu_hours_open=thu_hours_open,
            fri_hours_open=fri_hours_open,
            sat_hours_open=sat_hours_open,
            sun_is_closed=sun_is_closed,
            mon_is_closed=mon_is_closed,
            tue_is_closed=tue_is_closed,
            wed_is_closed=wed_is_closed,
            thu_is_closed=thu_is_closed,
            fri_is_closed=fri_is_closed,
            sat_is_closed=sat_is_closed,
            enable_shift_feedback=enable_shift_feedback,
            shift_feedback=shift_feedback,
            coupon=coupon,
            stripe_token_id=stripe_token_id,
            copy_from_id=copy_from_id,
            _configuration=_configuration,
            **kwargs,
        )
