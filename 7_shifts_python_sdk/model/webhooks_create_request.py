# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class WebhooksCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "method",
            "event",
            "url",
        }
        
        class properties:
            url = schemas.StrSchema
            
            
            class method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "post": "POST",
                    }
                
                @schemas.classproperty
                def POST(cls):
                    return cls("post")
            
            
            class event(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "schedule.published": "SCHEDULE_PUBLISHED",
                        "time_punch.created": "TIME_PUNCH_CREATED",
                        "time_punch.edited": "TIME_PUNCH_EDITED",
                        "time_punch.deleted": "TIME_PUNCH_DELETED",
                        "payroll_period.closed": "PAYROLL_PERIOD_CLOSED",
                        "user.created": "USER_CREATED",
                        "user.modified": "USER_MODIFIED",
                        "user.reactivated": "USER_REACTIVATED",
                        "user.deactivated": "USER_DEACTIVATED",
                        "department.created": "DEPARTMENT_CREATED",
                        "department.modified": "DEPARTMENT_MODIFIED",
                        "department.deleted": "DEPARTMENT_DELETED",
                        "location.created": "LOCATION_CREATED",
                        "location.modified": "LOCATION_MODIFIED",
                        "location.deleted": "LOCATION_DELETED",
                        "role.created": "ROLE_CREATED",
                        "role.modified": "ROLE_MODIFIED",
                        "role.deleted": "ROLE_DELETED",
                    }
                
                @schemas.classproperty
                def SCHEDULE_PUBLISHED(cls):
                    return cls("schedule.published")
                
                @schemas.classproperty
                def TIME_PUNCH_CREATED(cls):
                    return cls("time_punch.created")
                
                @schemas.classproperty
                def TIME_PUNCH_EDITED(cls):
                    return cls("time_punch.edited")
                
                @schemas.classproperty
                def TIME_PUNCH_DELETED(cls):
                    return cls("time_punch.deleted")
                
                @schemas.classproperty
                def PAYROLL_PERIOD_CLOSED(cls):
                    return cls("payroll_period.closed")
                
                @schemas.classproperty
                def USER_CREATED(cls):
                    return cls("user.created")
                
                @schemas.classproperty
                def USER_MODIFIED(cls):
                    return cls("user.modified")
                
                @schemas.classproperty
                def USER_REACTIVATED(cls):
                    return cls("user.reactivated")
                
                @schemas.classproperty
                def USER_DEACTIVATED(cls):
                    return cls("user.deactivated")
                
                @schemas.classproperty
                def DEPARTMENT_CREATED(cls):
                    return cls("department.created")
                
                @schemas.classproperty
                def DEPARTMENT_MODIFIED(cls):
                    return cls("department.modified")
                
                @schemas.classproperty
                def DEPARTMENT_DELETED(cls):
                    return cls("department.deleted")
                
                @schemas.classproperty
                def LOCATION_CREATED(cls):
                    return cls("location.created")
                
                @schemas.classproperty
                def LOCATION_MODIFIED(cls):
                    return cls("location.modified")
                
                @schemas.classproperty
                def LOCATION_DELETED(cls):
                    return cls("location.deleted")
                
                @schemas.classproperty
                def ROLE_CREATED(cls):
                    return cls("role.created")
                
                @schemas.classproperty
                def ROLE_MODIFIED(cls):
                    return cls("role.modified")
                
                @schemas.classproperty
                def ROLE_DELETED(cls):
                    return cls("role.deleted")
            __annotations__ = {
                "url": url,
                "method": method,
                "event": event,
            }
    
    method: MetaOapg.properties.method
    event: MetaOapg.properties.event
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "method", "event", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "method", "event", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method: typing.Union[MetaOapg.properties.method, str, ],
        event: typing.Union[MetaOapg.properties.event, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhooksCreateRequest':
        return super().__new__(
            cls,
            *args,
            method=method,
            event=event,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
