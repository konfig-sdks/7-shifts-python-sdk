# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class TimePunchesGetTimePunchResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "notes",
            "company_id",
            "clocked_in_offline",
            "created",
            "hourly_wage",
            "clocked_out_offline",
            "location_id",
            "tips",
            "approved",
            "clocked_in",
            "clocked_out",
            "role_id",
            "user_id",
            "editable_punch",
            "shift_id",
            "modified",
            "auto_clocked_out",
            "id",
        }
        
        class properties:
            id = schemas.Int32Schema
            shift_id = schemas.IntSchema
            user_id = schemas.IntSchema
            editable_punch = schemas.BoolSchema
            role_id = schemas.IntSchema
            company_id = schemas.IntSchema
            location_id = schemas.IntSchema
            
            
            class hourly_wage(
                schemas.IntSchema
            ):
                pass
            approved = schemas.BoolSchema
            clocked_in = schemas.DateTimeSchema
            
            
            class clocked_out(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clocked_out':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            notes = schemas.StrSchema
            auto_clocked_out = schemas.BoolSchema
            clocked_in_offline = schemas.BoolSchema
            clocked_out_offline = schemas.BoolSchema
            tips = schemas.IntSchema
            
            
            class created(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'created':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class modified(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modified':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class department_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pos_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pos_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def breaks() -> typing.Type['TimePunchesGetTimePunchResponseDataBreaks']:
                return TimePunchesGetTimePunchResponseDataBreaks
            deleted = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "shift_id": shift_id,
                "user_id": user_id,
                "editable_punch": editable_punch,
                "role_id": role_id,
                "company_id": company_id,
                "location_id": location_id,
                "hourly_wage": hourly_wage,
                "approved": approved,
                "clocked_in": clocked_in,
                "clocked_out": clocked_out,
                "notes": notes,
                "auto_clocked_out": auto_clocked_out,
                "clocked_in_offline": clocked_in_offline,
                "clocked_out_offline": clocked_out_offline,
                "tips": tips,
                "created": created,
                "modified": modified,
                "department_id": department_id,
                "pos_type": pos_type,
                "breaks": breaks,
                "deleted": deleted,
            }
    
    notes: MetaOapg.properties.notes
    company_id: MetaOapg.properties.company_id
    clocked_in_offline: MetaOapg.properties.clocked_in_offline
    created: MetaOapg.properties.created
    hourly_wage: MetaOapg.properties.hourly_wage
    clocked_out_offline: MetaOapg.properties.clocked_out_offline
    location_id: MetaOapg.properties.location_id
    tips: MetaOapg.properties.tips
    approved: MetaOapg.properties.approved
    clocked_in: MetaOapg.properties.clocked_in
    clocked_out: MetaOapg.properties.clocked_out
    role_id: MetaOapg.properties.role_id
    user_id: MetaOapg.properties.user_id
    editable_punch: MetaOapg.properties.editable_punch
    shift_id: MetaOapg.properties.shift_id
    modified: MetaOapg.properties.modified
    auto_clocked_out: MetaOapg.properties.auto_clocked_out
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift_id"]) -> MetaOapg.properties.shift_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editable_punch"]) -> MetaOapg.properties.editable_punch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_id"]) -> MetaOapg.properties.role_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_wage"]) -> MetaOapg.properties.hourly_wage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved"]) -> MetaOapg.properties.approved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clocked_in"]) -> MetaOapg.properties.clocked_in: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clocked_out"]) -> MetaOapg.properties.clocked_out: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_clocked_out"]) -> MetaOapg.properties.auto_clocked_out: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clocked_in_offline"]) -> MetaOapg.properties.clocked_in_offline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clocked_out_offline"]) -> MetaOapg.properties.clocked_out_offline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tips"]) -> MetaOapg.properties.tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department_id"]) -> MetaOapg.properties.department_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pos_type"]) -> MetaOapg.properties.pos_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breaks"]) -> 'TimePunchesGetTimePunchResponseDataBreaks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "shift_id", "user_id", "editable_punch", "role_id", "company_id", "location_id", "hourly_wage", "approved", "clocked_in", "clocked_out", "notes", "auto_clocked_out", "clocked_in_offline", "clocked_out_offline", "tips", "created", "modified", "department_id", "pos_type", "breaks", "deleted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift_id"]) -> MetaOapg.properties.shift_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editable_punch"]) -> MetaOapg.properties.editable_punch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_id"]) -> MetaOapg.properties.role_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_wage"]) -> MetaOapg.properties.hourly_wage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved"]) -> MetaOapg.properties.approved: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clocked_in"]) -> MetaOapg.properties.clocked_in: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clocked_out"]) -> MetaOapg.properties.clocked_out: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_clocked_out"]) -> MetaOapg.properties.auto_clocked_out: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clocked_in_offline"]) -> MetaOapg.properties.clocked_in_offline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clocked_out_offline"]) -> MetaOapg.properties.clocked_out_offline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tips"]) -> MetaOapg.properties.tips: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department_id"]) -> typing.Union[MetaOapg.properties.department_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pos_type"]) -> typing.Union[MetaOapg.properties.pos_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breaks"]) -> typing.Union['TimePunchesGetTimePunchResponseDataBreaks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "shift_id", "user_id", "editable_punch", "role_id", "company_id", "location_id", "hourly_wage", "approved", "clocked_in", "clocked_out", "notes", "auto_clocked_out", "clocked_in_offline", "clocked_out_offline", "tips", "created", "modified", "department_id", "pos_type", "breaks", "deleted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        notes: typing.Union[MetaOapg.properties.notes, str, ],
        company_id: typing.Union[MetaOapg.properties.company_id, decimal.Decimal, int, ],
        clocked_in_offline: typing.Union[MetaOapg.properties.clocked_in_offline, bool, ],
        created: typing.Union[MetaOapg.properties.created, None, str, datetime, ],
        hourly_wage: typing.Union[MetaOapg.properties.hourly_wage, decimal.Decimal, int, ],
        clocked_out_offline: typing.Union[MetaOapg.properties.clocked_out_offline, bool, ],
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, ],
        tips: typing.Union[MetaOapg.properties.tips, decimal.Decimal, int, ],
        approved: typing.Union[MetaOapg.properties.approved, bool, ],
        clocked_in: typing.Union[MetaOapg.properties.clocked_in, str, datetime, ],
        clocked_out: typing.Union[MetaOapg.properties.clocked_out, None, str, datetime, ],
        role_id: typing.Union[MetaOapg.properties.role_id, decimal.Decimal, int, ],
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
        editable_punch: typing.Union[MetaOapg.properties.editable_punch, bool, ],
        shift_id: typing.Union[MetaOapg.properties.shift_id, decimal.Decimal, int, ],
        modified: typing.Union[MetaOapg.properties.modified, None, str, datetime, ],
        auto_clocked_out: typing.Union[MetaOapg.properties.auto_clocked_out, bool, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        department_id: typing.Union[MetaOapg.properties.department_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pos_type: typing.Union[MetaOapg.properties.pos_type, None, str, schemas.Unset] = schemas.unset,
        breaks: typing.Union['TimePunchesGetTimePunchResponseDataBreaks', schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimePunchesGetTimePunchResponseData':
        return super().__new__(
            cls,
            *args,
            notes=notes,
            company_id=company_id,
            clocked_in_offline=clocked_in_offline,
            created=created,
            hourly_wage=hourly_wage,
            clocked_out_offline=clocked_out_offline,
            location_id=location_id,
            tips=tips,
            approved=approved,
            clocked_in=clocked_in,
            clocked_out=clocked_out,
            role_id=role_id,
            user_id=user_id,
            editable_punch=editable_punch,
            shift_id=shift_id,
            modified=modified,
            auto_clocked_out=auto_clocked_out,
            id=id,
            department_id=department_id,
            pos_type=pos_type,
            breaks=breaks,
            deleted=deleted,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.time_punches_get_time_punch_response_data_breaks import TimePunchesGetTimePunchResponseDataBreaks
