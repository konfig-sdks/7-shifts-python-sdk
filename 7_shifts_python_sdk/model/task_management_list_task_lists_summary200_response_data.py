# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class TaskManagementListTaskListsSummary200ResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "total_completed_percentage",
            "total_incomplete_percentage",
            "has_recent_task_completed",
            "report_time",
            "total_in_progress_percentage",
            "task_lists",
        }
        
        class properties:
            total_completed_percentage = schemas.IntSchema
            total_in_progress_percentage = schemas.IntSchema
            total_incomplete_percentage = schemas.IntSchema
            report_time = schemas.DateTimeSchema
            
            
            class date(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d{4}-\d{2}-\d{2}$',
                    }]
            has_recent_task_completed = schemas.BoolSchema
        
            @staticmethod
            def task_lists() -> typing.Type['TaskManagementListTaskListsSummary200ResponseDataTaskLists']:
                return TaskManagementListTaskListsSummary200ResponseDataTaskLists
            __annotations__ = {
                "total_completed_percentage": total_completed_percentage,
                "total_in_progress_percentage": total_in_progress_percentage,
                "total_incomplete_percentage": total_incomplete_percentage,
                "report_time": report_time,
                "date": date,
                "has_recent_task_completed": has_recent_task_completed,
                "task_lists": task_lists,
            }
    
    date: MetaOapg.properties.date
    total_completed_percentage: MetaOapg.properties.total_completed_percentage
    total_incomplete_percentage: MetaOapg.properties.total_incomplete_percentage
    has_recent_task_completed: MetaOapg.properties.has_recent_task_completed
    report_time: MetaOapg.properties.report_time
    total_in_progress_percentage: MetaOapg.properties.total_in_progress_percentage
    task_lists: 'TaskManagementListTaskListsSummary200ResponseDataTaskLists'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_completed_percentage"]) -> MetaOapg.properties.total_completed_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_in_progress_percentage"]) -> MetaOapg.properties.total_in_progress_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_incomplete_percentage"]) -> MetaOapg.properties.total_incomplete_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report_time"]) -> MetaOapg.properties.report_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_recent_task_completed"]) -> MetaOapg.properties.has_recent_task_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_lists"]) -> 'TaskManagementListTaskListsSummary200ResponseDataTaskLists': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_completed_percentage", "total_in_progress_percentage", "total_incomplete_percentage", "report_time", "date", "has_recent_task_completed", "task_lists", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_completed_percentage"]) -> MetaOapg.properties.total_completed_percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_in_progress_percentage"]) -> MetaOapg.properties.total_in_progress_percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_incomplete_percentage"]) -> MetaOapg.properties.total_incomplete_percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report_time"]) -> MetaOapg.properties.report_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_recent_task_completed"]) -> MetaOapg.properties.has_recent_task_completed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_lists"]) -> 'TaskManagementListTaskListsSummary200ResponseDataTaskLists': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_completed_percentage", "total_in_progress_percentage", "total_incomplete_percentage", "report_time", "date", "has_recent_task_completed", "task_lists", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, ],
        total_completed_percentage: typing.Union[MetaOapg.properties.total_completed_percentage, decimal.Decimal, int, ],
        total_incomplete_percentage: typing.Union[MetaOapg.properties.total_incomplete_percentage, decimal.Decimal, int, ],
        has_recent_task_completed: typing.Union[MetaOapg.properties.has_recent_task_completed, bool, ],
        report_time: typing.Union[MetaOapg.properties.report_time, str, datetime, ],
        total_in_progress_percentage: typing.Union[MetaOapg.properties.total_in_progress_percentage, decimal.Decimal, int, ],
        task_lists: 'TaskManagementListTaskListsSummary200ResponseDataTaskLists',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskManagementListTaskListsSummary200ResponseData':
        return super().__new__(
            cls,
            *args,
            date=date,
            total_completed_percentage=total_completed_percentage,
            total_incomplete_percentage=total_incomplete_percentage,
            has_recent_task_completed=has_recent_task_completed,
            report_time=report_time,
            total_in_progress_percentage=total_in_progress_percentage,
            task_lists=task_lists,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.task_management_list_task_lists_summary200_response_data_task_lists import TaskManagementListTaskListsSummary200ResponseDataTaskLists
