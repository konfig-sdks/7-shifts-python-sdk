# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class AvailabilityListAvailabilitiesResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "thu",
            "tue_from",
            "mon_to",
            "wed_reason",
            "week",
            "tue_to",
            "tue",
            "tue_reason",
            "wed_comments",
            "week_to",
            "thu_comments",
            "thu_from",
            "wed_to",
            "mon",
            "sun",
            "sat_comments",
            "sat_reason",
            "repeat",
            "wed",
            "fri_to",
            "fri_from",
            "modified",
            "sun_comments",
            "id",
            "thu_to",
            "fri",
            "mon_comments",
            "sat_from",
            "wed_from",
            "company_id",
            "created",
            "status_action_user_id",
            "sat",
            "fri_reason",
            "sun_reason",
            "fri_comments",
            "status_action_message",
            "mon_from",
            "sun_to",
            "thu_reason",
            "tue_comments",
            "user_id",
            "sun_from",
            "sat_to",
            "mon_reason",
            "status",
        }
        
        class properties:
            id = schemas.IntSchema
            user_id = schemas.IntSchema
            company_id = schemas.IntSchema
            
            
            class week(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'week':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class week_to(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'week_to':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            repeat = schemas.BoolSchema
            status = schemas.IntSchema
            
            
            class status_action_user_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_action_user_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class status_action_message(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_action_message':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            mon = schemas.IntSchema
            mon_from = schemas.StrSchema
            mon_to = schemas.StrSchema
            
            
            class mon_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mon_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            mon_reason = schemas.StrSchema
            tue = schemas.IntSchema
            tue_from = schemas.StrSchema
            tue_to = schemas.StrSchema
            
            
            class tue_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tue_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            tue_reason = schemas.StrSchema
            wed = schemas.IntSchema
            wed_from = schemas.StrSchema
            wed_to = schemas.StrSchema
            
            
            class wed_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wed_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            wed_reason = schemas.StrSchema
            thu = schemas.IntSchema
            thu_from = schemas.StrSchema
            thu_to = schemas.StrSchema
            
            
            class thu_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thu_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            thu_reason = schemas.StrSchema
            fri = schemas.IntSchema
            fri_from = schemas.StrSchema
            fri_to = schemas.StrSchema
            
            
            class fri_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fri_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            fri_reason = schemas.StrSchema
            sat = schemas.IntSchema
            sat_from = schemas.StrSchema
            sat_to = schemas.StrSchema
            
            
            class sat_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sat_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            sat_reason = schemas.StrSchema
            sun = schemas.IntSchema
            sun_from = schemas.StrSchema
            sun_to = schemas.StrSchema
            
            
            class sun_comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sun_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            sun_reason = schemas.StrSchema
            
            
            class created(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'created':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class modified(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modified':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def old_approved_data() -> typing.Type['AvailabilityListAvailabilitiesResponseDataItemOldApprovedData']:
                return AvailabilityListAvailabilitiesResponseDataItemOldApprovedData
            __annotations__ = {
                "id": id,
                "user_id": user_id,
                "company_id": company_id,
                "week": week,
                "week_to": week_to,
                "repeat": repeat,
                "status": status,
                "status_action_user_id": status_action_user_id,
                "status_action_message": status_action_message,
                "mon": mon,
                "mon_from": mon_from,
                "mon_to": mon_to,
                "mon_comments": mon_comments,
                "mon_reason": mon_reason,
                "tue": tue,
                "tue_from": tue_from,
                "tue_to": tue_to,
                "tue_comments": tue_comments,
                "tue_reason": tue_reason,
                "wed": wed,
                "wed_from": wed_from,
                "wed_to": wed_to,
                "wed_comments": wed_comments,
                "wed_reason": wed_reason,
                "thu": thu,
                "thu_from": thu_from,
                "thu_to": thu_to,
                "thu_comments": thu_comments,
                "thu_reason": thu_reason,
                "fri": fri,
                "fri_from": fri_from,
                "fri_to": fri_to,
                "fri_comments": fri_comments,
                "fri_reason": fri_reason,
                "sat": sat,
                "sat_from": sat_from,
                "sat_to": sat_to,
                "sat_comments": sat_comments,
                "sat_reason": sat_reason,
                "sun": sun,
                "sun_from": sun_from,
                "sun_to": sun_to,
                "sun_comments": sun_comments,
                "sun_reason": sun_reason,
                "created": created,
                "modified": modified,
                "old_approved_data": old_approved_data,
            }
    
    thu: MetaOapg.properties.thu
    tue_from: MetaOapg.properties.tue_from
    mon_to: MetaOapg.properties.mon_to
    wed_reason: MetaOapg.properties.wed_reason
    week: MetaOapg.properties.week
    tue_to: MetaOapg.properties.tue_to
    tue: MetaOapg.properties.tue
    tue_reason: MetaOapg.properties.tue_reason
    wed_comments: MetaOapg.properties.wed_comments
    week_to: MetaOapg.properties.week_to
    thu_comments: MetaOapg.properties.thu_comments
    thu_from: MetaOapg.properties.thu_from
    wed_to: MetaOapg.properties.wed_to
    mon: MetaOapg.properties.mon
    sun: MetaOapg.properties.sun
    sat_comments: MetaOapg.properties.sat_comments
    sat_reason: MetaOapg.properties.sat_reason
    repeat: MetaOapg.properties.repeat
    wed: MetaOapg.properties.wed
    fri_to: MetaOapg.properties.fri_to
    fri_from: MetaOapg.properties.fri_from
    modified: MetaOapg.properties.modified
    sun_comments: MetaOapg.properties.sun_comments
    id: MetaOapg.properties.id
    thu_to: MetaOapg.properties.thu_to
    fri: MetaOapg.properties.fri
    mon_comments: MetaOapg.properties.mon_comments
    sat_from: MetaOapg.properties.sat_from
    wed_from: MetaOapg.properties.wed_from
    company_id: MetaOapg.properties.company_id
    created: MetaOapg.properties.created
    status_action_user_id: MetaOapg.properties.status_action_user_id
    sat: MetaOapg.properties.sat
    fri_reason: MetaOapg.properties.fri_reason
    sun_reason: MetaOapg.properties.sun_reason
    fri_comments: MetaOapg.properties.fri_comments
    status_action_message: MetaOapg.properties.status_action_message
    mon_from: MetaOapg.properties.mon_from
    sun_to: MetaOapg.properties.sun_to
    thu_reason: MetaOapg.properties.thu_reason
    tue_comments: MetaOapg.properties.tue_comments
    user_id: MetaOapg.properties.user_id
    sun_from: MetaOapg.properties.sun_from
    sat_to: MetaOapg.properties.sat_to
    mon_reason: MetaOapg.properties.mon_reason
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["week"]) -> MetaOapg.properties.week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["week_to"]) -> MetaOapg.properties.week_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repeat"]) -> MetaOapg.properties.repeat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_action_user_id"]) -> MetaOapg.properties.status_action_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_action_message"]) -> MetaOapg.properties.status_action_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon"]) -> MetaOapg.properties.mon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_from"]) -> MetaOapg.properties.mon_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_to"]) -> MetaOapg.properties.mon_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_comments"]) -> MetaOapg.properties.mon_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mon_reason"]) -> MetaOapg.properties.mon_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue"]) -> MetaOapg.properties.tue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_from"]) -> MetaOapg.properties.tue_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_to"]) -> MetaOapg.properties.tue_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_comments"]) -> MetaOapg.properties.tue_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tue_reason"]) -> MetaOapg.properties.tue_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed"]) -> MetaOapg.properties.wed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_from"]) -> MetaOapg.properties.wed_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_to"]) -> MetaOapg.properties.wed_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_comments"]) -> MetaOapg.properties.wed_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wed_reason"]) -> MetaOapg.properties.wed_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu"]) -> MetaOapg.properties.thu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_from"]) -> MetaOapg.properties.thu_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_to"]) -> MetaOapg.properties.thu_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_comments"]) -> MetaOapg.properties.thu_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thu_reason"]) -> MetaOapg.properties.thu_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri"]) -> MetaOapg.properties.fri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_from"]) -> MetaOapg.properties.fri_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_to"]) -> MetaOapg.properties.fri_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_comments"]) -> MetaOapg.properties.fri_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fri_reason"]) -> MetaOapg.properties.fri_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat"]) -> MetaOapg.properties.sat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_from"]) -> MetaOapg.properties.sat_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_to"]) -> MetaOapg.properties.sat_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_comments"]) -> MetaOapg.properties.sat_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sat_reason"]) -> MetaOapg.properties.sat_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun"]) -> MetaOapg.properties.sun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_from"]) -> MetaOapg.properties.sun_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_to"]) -> MetaOapg.properties.sun_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_comments"]) -> MetaOapg.properties.sun_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sun_reason"]) -> MetaOapg.properties.sun_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_approved_data"]) -> 'AvailabilityListAvailabilitiesResponseDataItemOldApprovedData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "user_id", "company_id", "week", "week_to", "repeat", "status", "status_action_user_id", "status_action_message", "mon", "mon_from", "mon_to", "mon_comments", "mon_reason", "tue", "tue_from", "tue_to", "tue_comments", "tue_reason", "wed", "wed_from", "wed_to", "wed_comments", "wed_reason", "thu", "thu_from", "thu_to", "thu_comments", "thu_reason", "fri", "fri_from", "fri_to", "fri_comments", "fri_reason", "sat", "sat_from", "sat_to", "sat_comments", "sat_reason", "sun", "sun_from", "sun_to", "sun_comments", "sun_reason", "created", "modified", "old_approved_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["week"]) -> MetaOapg.properties.week: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["week_to"]) -> MetaOapg.properties.week_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repeat"]) -> MetaOapg.properties.repeat: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_action_user_id"]) -> MetaOapg.properties.status_action_user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_action_message"]) -> MetaOapg.properties.status_action_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon"]) -> MetaOapg.properties.mon: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_from"]) -> MetaOapg.properties.mon_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_to"]) -> MetaOapg.properties.mon_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_comments"]) -> MetaOapg.properties.mon_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mon_reason"]) -> MetaOapg.properties.mon_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue"]) -> MetaOapg.properties.tue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_from"]) -> MetaOapg.properties.tue_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_to"]) -> MetaOapg.properties.tue_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_comments"]) -> MetaOapg.properties.tue_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tue_reason"]) -> MetaOapg.properties.tue_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed"]) -> MetaOapg.properties.wed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_from"]) -> MetaOapg.properties.wed_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_to"]) -> MetaOapg.properties.wed_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_comments"]) -> MetaOapg.properties.wed_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wed_reason"]) -> MetaOapg.properties.wed_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu"]) -> MetaOapg.properties.thu: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_from"]) -> MetaOapg.properties.thu_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_to"]) -> MetaOapg.properties.thu_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_comments"]) -> MetaOapg.properties.thu_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thu_reason"]) -> MetaOapg.properties.thu_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri"]) -> MetaOapg.properties.fri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_from"]) -> MetaOapg.properties.fri_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_to"]) -> MetaOapg.properties.fri_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_comments"]) -> MetaOapg.properties.fri_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fri_reason"]) -> MetaOapg.properties.fri_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat"]) -> MetaOapg.properties.sat: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_from"]) -> MetaOapg.properties.sat_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_to"]) -> MetaOapg.properties.sat_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_comments"]) -> MetaOapg.properties.sat_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sat_reason"]) -> MetaOapg.properties.sat_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun"]) -> MetaOapg.properties.sun: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_from"]) -> MetaOapg.properties.sun_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_to"]) -> MetaOapg.properties.sun_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_comments"]) -> MetaOapg.properties.sun_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sun_reason"]) -> MetaOapg.properties.sun_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_approved_data"]) -> typing.Union['AvailabilityListAvailabilitiesResponseDataItemOldApprovedData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "user_id", "company_id", "week", "week_to", "repeat", "status", "status_action_user_id", "status_action_message", "mon", "mon_from", "mon_to", "mon_comments", "mon_reason", "tue", "tue_from", "tue_to", "tue_comments", "tue_reason", "wed", "wed_from", "wed_to", "wed_comments", "wed_reason", "thu", "thu_from", "thu_to", "thu_comments", "thu_reason", "fri", "fri_from", "fri_to", "fri_comments", "fri_reason", "sat", "sat_from", "sat_to", "sat_comments", "sat_reason", "sun", "sun_from", "sun_to", "sun_comments", "sun_reason", "created", "modified", "old_approved_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        thu: typing.Union[MetaOapg.properties.thu, decimal.Decimal, int, ],
        tue_from: typing.Union[MetaOapg.properties.tue_from, str, ],
        mon_to: typing.Union[MetaOapg.properties.mon_to, str, ],
        wed_reason: typing.Union[MetaOapg.properties.wed_reason, str, ],
        week: typing.Union[MetaOapg.properties.week, None, str, ],
        tue_to: typing.Union[MetaOapg.properties.tue_to, str, ],
        tue: typing.Union[MetaOapg.properties.tue, decimal.Decimal, int, ],
        tue_reason: typing.Union[MetaOapg.properties.tue_reason, str, ],
        wed_comments: typing.Union[MetaOapg.properties.wed_comments, None, str, ],
        week_to: typing.Union[MetaOapg.properties.week_to, None, str, ],
        thu_comments: typing.Union[MetaOapg.properties.thu_comments, None, str, ],
        thu_from: typing.Union[MetaOapg.properties.thu_from, str, ],
        wed_to: typing.Union[MetaOapg.properties.wed_to, str, ],
        mon: typing.Union[MetaOapg.properties.mon, decimal.Decimal, int, ],
        sun: typing.Union[MetaOapg.properties.sun, decimal.Decimal, int, ],
        sat_comments: typing.Union[MetaOapg.properties.sat_comments, None, str, ],
        sat_reason: typing.Union[MetaOapg.properties.sat_reason, str, ],
        repeat: typing.Union[MetaOapg.properties.repeat, bool, ],
        wed: typing.Union[MetaOapg.properties.wed, decimal.Decimal, int, ],
        fri_to: typing.Union[MetaOapg.properties.fri_to, str, ],
        fri_from: typing.Union[MetaOapg.properties.fri_from, str, ],
        modified: typing.Union[MetaOapg.properties.modified, None, str, ],
        sun_comments: typing.Union[MetaOapg.properties.sun_comments, None, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        thu_to: typing.Union[MetaOapg.properties.thu_to, str, ],
        fri: typing.Union[MetaOapg.properties.fri, decimal.Decimal, int, ],
        mon_comments: typing.Union[MetaOapg.properties.mon_comments, None, str, ],
        sat_from: typing.Union[MetaOapg.properties.sat_from, str, ],
        wed_from: typing.Union[MetaOapg.properties.wed_from, str, ],
        company_id: typing.Union[MetaOapg.properties.company_id, decimal.Decimal, int, ],
        created: typing.Union[MetaOapg.properties.created, None, str, ],
        status_action_user_id: typing.Union[MetaOapg.properties.status_action_user_id, None, decimal.Decimal, int, ],
        sat: typing.Union[MetaOapg.properties.sat, decimal.Decimal, int, ],
        fri_reason: typing.Union[MetaOapg.properties.fri_reason, str, ],
        sun_reason: typing.Union[MetaOapg.properties.sun_reason, str, ],
        fri_comments: typing.Union[MetaOapg.properties.fri_comments, None, str, ],
        status_action_message: typing.Union[MetaOapg.properties.status_action_message, None, str, ],
        mon_from: typing.Union[MetaOapg.properties.mon_from, str, ],
        sun_to: typing.Union[MetaOapg.properties.sun_to, str, ],
        thu_reason: typing.Union[MetaOapg.properties.thu_reason, str, ],
        tue_comments: typing.Union[MetaOapg.properties.tue_comments, None, str, ],
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
        sun_from: typing.Union[MetaOapg.properties.sun_from, str, ],
        sat_to: typing.Union[MetaOapg.properties.sat_to, str, ],
        mon_reason: typing.Union[MetaOapg.properties.mon_reason, str, ],
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, ],
        old_approved_data: typing.Union['AvailabilityListAvailabilitiesResponseDataItemOldApprovedData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AvailabilityListAvailabilitiesResponseDataItem':
        return super().__new__(
            cls,
            *args,
            thu=thu,
            tue_from=tue_from,
            mon_to=mon_to,
            wed_reason=wed_reason,
            week=week,
            tue_to=tue_to,
            tue=tue,
            tue_reason=tue_reason,
            wed_comments=wed_comments,
            week_to=week_to,
            thu_comments=thu_comments,
            thu_from=thu_from,
            wed_to=wed_to,
            mon=mon,
            sun=sun,
            sat_comments=sat_comments,
            sat_reason=sat_reason,
            repeat=repeat,
            wed=wed,
            fri_to=fri_to,
            fri_from=fri_from,
            modified=modified,
            sun_comments=sun_comments,
            id=id,
            thu_to=thu_to,
            fri=fri,
            mon_comments=mon_comments,
            sat_from=sat_from,
            wed_from=wed_from,
            company_id=company_id,
            created=created,
            status_action_user_id=status_action_user_id,
            sat=sat,
            fri_reason=fri_reason,
            sun_reason=sun_reason,
            fri_comments=fri_comments,
            status_action_message=status_action_message,
            mon_from=mon_from,
            sun_to=sun_to,
            thu_reason=thu_reason,
            tue_comments=tue_comments,
            user_id=user_id,
            sun_from=sun_from,
            sat_to=sat_to,
            mon_reason=mon_reason,
            status=status,
            old_approved_data=old_approved_data,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.availability_list_availabilities_response_data_item_old_approved_data import AvailabilityListAvailabilitiesResponseDataItemOldApprovedData
