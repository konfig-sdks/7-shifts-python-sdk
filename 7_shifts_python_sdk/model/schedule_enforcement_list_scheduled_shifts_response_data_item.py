# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class ScheduleEnforcementListScheduledShiftsResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "business_decline",
            "station_name",
            "notes",
            "start",
            "end",
            "id",
            "attendance_status",
            "close",
            "location_id",
            "open",
            "publish_status",
        }
        
        class properties:
            id = schemas.IntSchema
            location_id = schemas.IntSchema
            station_name = schemas.StrSchema
            start = schemas.DateTimeSchema
            end = schemas.DateTimeSchema
            close = schemas.BoolSchema
            business_decline = schemas.BoolSchema
            notes = schemas.StrSchema
            
            
            class publish_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "draft": "DRAFT",
                        "published": "PUBLISHED",
                        "draft_deleted": "DRAFT_DELETED",
                        "published_deleted": "PUBLISHED_DELETED",
                    }
                
                @schemas.classproperty
                def DRAFT(cls):
                    return cls("draft")
                
                @schemas.classproperty
                def PUBLISHED(cls):
                    return cls("published")
                
                @schemas.classproperty
                def DRAFT_DELETED(cls):
                    return cls("draft_deleted")
                
                @schemas.classproperty
                def PUBLISHED_DELETED(cls):
                    return cls("published_deleted")
            open = schemas.BoolSchema
            
            
            class attendance_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "none": "NONE",
                        "sick": "SICK",
                        "no_show": "NO_SHOW",
                        "late": "LATE",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
                
                @schemas.classproperty
                def SICK(cls):
                    return cls("sick")
                
                @schemas.classproperty
                def NO_SHOW(cls):
                    return cls("no_show")
                
                @schemas.classproperty
                def LATE(cls):
                    return cls("late")
            
            
            class user_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class department_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class role_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'role_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class station_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'station_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class company_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'company_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "location_id": location_id,
                "station_name": station_name,
                "start": start,
                "end": end,
                "close": close,
                "business_decline": business_decline,
                "notes": notes,
                "publish_status": publish_status,
                "open": open,
                "attendance_status": attendance_status,
                "user_id": user_id,
                "department_id": department_id,
                "role_id": role_id,
                "station_id": station_id,
                "company_id": company_id,
            }
    
    business_decline: MetaOapg.properties.business_decline
    station_name: MetaOapg.properties.station_name
    notes: MetaOapg.properties.notes
    start: MetaOapg.properties.start
    end: MetaOapg.properties.end
    id: MetaOapg.properties.id
    attendance_status: MetaOapg.properties.attendance_status
    close: MetaOapg.properties.close
    location_id: MetaOapg.properties.location_id
    open: MetaOapg.properties.open
    publish_status: MetaOapg.properties.publish_status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["station_name"]) -> MetaOapg.properties.station_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close"]) -> MetaOapg.properties.close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_decline"]) -> MetaOapg.properties.business_decline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publish_status"]) -> MetaOapg.properties.publish_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["open"]) -> MetaOapg.properties.open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendance_status"]) -> MetaOapg.properties.attendance_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department_id"]) -> MetaOapg.properties.department_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_id"]) -> MetaOapg.properties.role_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["station_id"]) -> MetaOapg.properties.station_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "location_id", "station_name", "start", "end", "close", "business_decline", "notes", "publish_status", "open", "attendance_status", "user_id", "department_id", "role_id", "station_id", "company_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["station_name"]) -> MetaOapg.properties.station_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close"]) -> MetaOapg.properties.close: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_decline"]) -> MetaOapg.properties.business_decline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publish_status"]) -> MetaOapg.properties.publish_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["open"]) -> MetaOapg.properties.open: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendance_status"]) -> MetaOapg.properties.attendance_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department_id"]) -> typing.Union[MetaOapg.properties.department_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_id"]) -> typing.Union[MetaOapg.properties.role_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["station_id"]) -> typing.Union[MetaOapg.properties.station_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> typing.Union[MetaOapg.properties.company_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "location_id", "station_name", "start", "end", "close", "business_decline", "notes", "publish_status", "open", "attendance_status", "user_id", "department_id", "role_id", "station_id", "company_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        business_decline: typing.Union[MetaOapg.properties.business_decline, bool, ],
        station_name: typing.Union[MetaOapg.properties.station_name, str, ],
        notes: typing.Union[MetaOapg.properties.notes, str, ],
        start: typing.Union[MetaOapg.properties.start, str, datetime, ],
        end: typing.Union[MetaOapg.properties.end, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        attendance_status: typing.Union[MetaOapg.properties.attendance_status, str, ],
        close: typing.Union[MetaOapg.properties.close, bool, ],
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, ],
        open: typing.Union[MetaOapg.properties.open, bool, ],
        publish_status: typing.Union[MetaOapg.properties.publish_status, str, ],
        user_id: typing.Union[MetaOapg.properties.user_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        department_id: typing.Union[MetaOapg.properties.department_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        role_id: typing.Union[MetaOapg.properties.role_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        station_id: typing.Union[MetaOapg.properties.station_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        company_id: typing.Union[MetaOapg.properties.company_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScheduleEnforcementListScheduledShiftsResponseDataItem':
        return super().__new__(
            cls,
            *args,
            business_decline=business_decline,
            station_name=station_name,
            notes=notes,
            start=start,
            end=end,
            id=id,
            attendance_status=attendance_status,
            close=close,
            location_id=location_id,
            open=open,
            publish_status=publish_status,
            user_id=user_id,
            department_id=department_id,
            role_id=role_id,
            station_id=station_id,
            company_id=company_id,
            _configuration=_configuration,
            **kwargs,
        )
