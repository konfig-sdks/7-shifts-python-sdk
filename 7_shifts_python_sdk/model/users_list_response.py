# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class UsersListResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "data",
            "meta",
            "object",
        }
        
        class properties:
            
            
            class object(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "users": "USERS",
                    }
                
                @schemas.classproperty
                def USERS(cls):
                    return cls("users")
        
            @staticmethod
            def data() -> typing.Type['UsersListResponseData']:
                return UsersListResponseData
            
            
            class meta(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    required = {
                        "cursor",
                    }
                    
                    class properties:
                        
                        
                        class cursor(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "next",
                                    "current",
                                    "prev",
                                    "count",
                                }
                                
                                class properties:
                                    
                                    
                                    class current(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'current':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class prev(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'prev':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class next(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'next':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class count(
                                        schemas.IntBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneDecimalMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, decimal.Decimal, int, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'count':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    __annotations__ = {
                                        "current": current,
                                        "prev": prev,
                                        "next": next,
                                        "count": count,
                                    }
                            
                            next: MetaOapg.properties.next
                            current: MetaOapg.properties.current
                            prev: MetaOapg.properties.prev
                            count: MetaOapg.properties.count
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["current"]) -> MetaOapg.properties.current: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["prev"]) -> MetaOapg.properties.prev: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["next"]) -> MetaOapg.properties.next: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["current", "prev", "next", "count", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["current"]) -> MetaOapg.properties.current: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["prev"]) -> MetaOapg.properties.prev: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["next"]) -> MetaOapg.properties.next: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["current", "prev", "next", "count", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                next: typing.Union[MetaOapg.properties.next, None, str, ],
                                current: typing.Union[MetaOapg.properties.current, None, str, ],
                                prev: typing.Union[MetaOapg.properties.prev, None, str, ],
                                count: typing.Union[MetaOapg.properties.count, None, decimal.Decimal, int, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'cursor':
                                return super().__new__(
                                    cls,
                                    *args,
                                    next=next,
                                    current=current,
                                    prev=prev,
                                    count=count,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "cursor": cursor,
                        }
            
                
                cursor: MetaOapg.properties.cursor
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cursor"]) -> MetaOapg.properties.cursor: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cursor", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cursor"]) -> MetaOapg.properties.cursor: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cursor", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    cursor: typing.Union[MetaOapg.properties.cursor, dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'meta':
                    return super().__new__(
                        cls,
                        *args,
                        cursor=cursor,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "object": object,
                "data": data,
                "meta": meta,
            }
    
    data: 'UsersListResponseData'
    meta: MetaOapg.properties.meta
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'UsersListResponseData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["object", "data", "meta", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'UsersListResponseData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["object", "data", "meta", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: 'UsersListResponseData',
        meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersListResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            meta=meta,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.users_list_response_data import UsersListResponseData
