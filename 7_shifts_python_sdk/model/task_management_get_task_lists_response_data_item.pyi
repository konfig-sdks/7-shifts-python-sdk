# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class TaskManagementGetTaskListsResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "recurrence",
            "task_list_template_uuid",
            "assignments",
            "due",
            "due_date",
            "start",
            "description",
            "id",
            "title",
            "tasks",
        }
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            id = schemas.IntSchema
            task_list_template_uuid = schemas.StrSchema
            start = schemas.DateTimeSchema
            due = schemas.DateTimeSchema
        
            @staticmethod
            def due_date() -> typing.Type['TaskManagementGetTaskListsResponseDataItemDueDate']:
                return TaskManagementGetTaskListsResponseDataItemDueDate
        
            @staticmethod
            def tasks() -> typing.Type['TaskManagementGetTaskListsResponseDataItemTasks']:
                return TaskManagementGetTaskListsResponseDataItemTasks
        
            @staticmethod
            def recurrence() -> typing.Type['TaskManagementGetTaskListsResponseDataItemRecurrence']:
                return TaskManagementGetTaskListsResponseDataItemRecurrence
        
            @staticmethod
            def assignments() -> typing.Type['TaskManagementGetTaskListsResponseDataItemAssignments']:
                return TaskManagementGetTaskListsResponseDataItemAssignments
            
            
            class time_frame(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class any_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "start_time",
                                "end_time",
                                "start",
                                "end",
                            }
                            
                            class properties:
                                
                                
                                class start(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'start':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class end(
                                    schemas.StrSchema
                                ):
                                    pass
                                
                                
                                class start_time(
                                    schemas.DateTimeBase,
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'date-time'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, datetime, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'start_time':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                end_time = schemas.DateTimeSchema
                                __annotations__ = {
                                    "start": start,
                                    "end": end,
                                    "start_time": start_time,
                                    "end_time": end_time,
                                }
                        
                        start_time: MetaOapg.properties.start_time
                        end_time: MetaOapg.properties.end_time
                        start: MetaOapg.properties.start
                        end: MetaOapg.properties.end
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "end", "start_time", "end_time", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "end", "start_time", "end_time", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            start_time: typing.Union[MetaOapg.properties.start_time, None, str, datetime, ],
                            end_time: typing.Union[MetaOapg.properties.end_time, str, datetime, ],
                            start: typing.Union[MetaOapg.properties.start, None, str, ],
                            end: typing.Union[MetaOapg.properties.end, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'any_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                start_time=start_time,
                                end_time=end_time,
                                start=start,
                                end=end,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'time_frame':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "title": title,
                "description": description,
                "id": id,
                "task_list_template_uuid": task_list_template_uuid,
                "start": start,
                "due": due,
                "due_date": due_date,
                "tasks": tasks,
                "recurrence": recurrence,
                "assignments": assignments,
                "time_frame": time_frame,
            }
    
    recurrence: 'TaskManagementGetTaskListsResponseDataItemRecurrence'
    task_list_template_uuid: MetaOapg.properties.task_list_template_uuid
    assignments: 'TaskManagementGetTaskListsResponseDataItemAssignments'
    due: MetaOapg.properties.due
    due_date: 'TaskManagementGetTaskListsResponseDataItemDueDate'
    start: MetaOapg.properties.start
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    tasks: 'TaskManagementGetTaskListsResponseDataItemTasks'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_list_template_uuid"]) -> MetaOapg.properties.task_list_template_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due"]) -> MetaOapg.properties.due: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> 'TaskManagementGetTaskListsResponseDataItemDueDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> 'TaskManagementGetTaskListsResponseDataItemTasks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence"]) -> 'TaskManagementGetTaskListsResponseDataItemRecurrence': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignments"]) -> 'TaskManagementGetTaskListsResponseDataItemAssignments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_frame"]) -> MetaOapg.properties.time_frame: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "task_list_template_uuid", "start", "due", "due_date", "tasks", "recurrence", "assignments", "time_frame", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_list_template_uuid"]) -> MetaOapg.properties.task_list_template_uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due"]) -> MetaOapg.properties.due: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> 'TaskManagementGetTaskListsResponseDataItemDueDate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> 'TaskManagementGetTaskListsResponseDataItemTasks': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence"]) -> 'TaskManagementGetTaskListsResponseDataItemRecurrence': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignments"]) -> 'TaskManagementGetTaskListsResponseDataItemAssignments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_frame"]) -> typing.Union[MetaOapg.properties.time_frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "task_list_template_uuid", "start", "due", "due_date", "tasks", "recurrence", "assignments", "time_frame", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        recurrence: 'TaskManagementGetTaskListsResponseDataItemRecurrence',
        task_list_template_uuid: typing.Union[MetaOapg.properties.task_list_template_uuid, str, ],
        assignments: 'TaskManagementGetTaskListsResponseDataItemAssignments',
        due: typing.Union[MetaOapg.properties.due, str, datetime, ],
        due_date: 'TaskManagementGetTaskListsResponseDataItemDueDate',
        start: typing.Union[MetaOapg.properties.start, str, datetime, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        tasks: 'TaskManagementGetTaskListsResponseDataItemTasks',
        time_frame: typing.Union[MetaOapg.properties.time_frame, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskManagementGetTaskListsResponseDataItem':
        return super().__new__(
            cls,
            *args,
            recurrence=recurrence,
            task_list_template_uuid=task_list_template_uuid,
            assignments=assignments,
            due=due,
            due_date=due_date,
            start=start,
            description=description,
            id=id,
            title=title,
            tasks=tasks,
            time_frame=time_frame,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.task_management_get_task_lists_response_data_item_assignments import TaskManagementGetTaskListsResponseDataItemAssignments
from 7_shifts_python_sdk.model.task_management_get_task_lists_response_data_item_due_date import TaskManagementGetTaskListsResponseDataItemDueDate
from 7_shifts_python_sdk.model.task_management_get_task_lists_response_data_item_recurrence import TaskManagementGetTaskListsResponseDataItemRecurrence
from 7_shifts_python_sdk.model.task_management_get_task_lists_response_data_item_tasks import TaskManagementGetTaskListsResponseDataItemTasks
