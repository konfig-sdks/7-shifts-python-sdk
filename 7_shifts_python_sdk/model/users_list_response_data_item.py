# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class UsersListResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "postal_zip",
            "notes",
            "city",
            "invite_accepted",
            "timezone",
            "birth_date",
            "type",
            "punch_id",
            "id",
            "invite_status",
            "first_name",
            "email",
            "max_weekly_hours",
            "address",
            "company_id",
            "is_new",
            "last_login",
            "invited",
            "active",
            "last_name",
            "photo",
            "home_number",
            "hire_date",
            "employee_id",
            "prov_state",
            "mobile_number",
        }
        
        class properties:
            id = schemas.IntSchema
            company_id = schemas.IntSchema
            
            
            class first_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 80
            
            
            class last_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 80
            
            
            class email(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 155
            
            
            class mobile_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobile_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class home_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'home_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class birth_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'birth_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class postal_zip(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 20
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'postal_zip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class prov_state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'prov_state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invite_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "accepted": "ACCEPTED",
                        "pending": "PENDING",
                        "required": "REQUIRED",
                        "missing_contact_info": "MISSING_CONTACT_INFO",
                    }
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("accepted")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("required")
                
                @schemas.classproperty
                def MISSING_CONTACT_INFO(cls):
                    return cls("missing_contact_info")
            active = schemas.BoolSchema
            
            
            class photo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'photo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hire_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hire_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class timezone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timezone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "employee": "EMPLOYEE",
                        "asst_manager": "ASST_MANAGER",
                        "manager": "MANAGER",
                        "employer": "EMPLOYER",
                    }
                
                @schemas.classproperty
                def EMPLOYEE(cls):
                    return cls("employee")
                
                @schemas.classproperty
                def ASST_MANAGER(cls):
                    return cls("asst_manager")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("manager")
                
                @schemas.classproperty
                def EMPLOYER(cls):
                    return cls("employer")
            
            
            class employee_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 190
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            max_weekly_hours = schemas.StrSchema
            
            
            class punch_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 40
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punch_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invited(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invited':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invite_accepted(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invite_accepted':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_new = schemas.BoolSchema
            
            
            class identity_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'identity_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class preferred_first_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 150
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'preferred_first_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class preferred_last_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 150
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'preferred_last_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pronouns(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 80
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pronouns':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created = schemas.StrSchema
            modified = schemas.StrSchema
            appear_as_employee = schemas.BoolSchema
            subscribe_to_updates = schemas.BoolSchema
            language = schemas.StrSchema
            push = schemas.BoolSchema
            
            
            class skill_level(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'skill_level':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hourly_wage(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hourly_wage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wage_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wage_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sms_me_schedules(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sms_me_schedules':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class notify_ot_risk(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notify_ot_risk':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class permissions_template_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permissions_template_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def meta() -> typing.Type['UsersListResponseDataItemMeta']:
                return UsersListResponseDataItemMeta
            __annotations__ = {
                "id": id,
                "company_id": company_id,
                "first_name": first_name,
                "last_name": last_name,
                "email": email,
                "mobile_number": mobile_number,
                "home_number": home_number,
                "birth_date": birth_date,
                "address": address,
                "postal_zip": postal_zip,
                "city": city,
                "prov_state": prov_state,
                "invite_status": invite_status,
                "active": active,
                "photo": photo,
                "notes": notes,
                "hire_date": hire_date,
                "timezone": timezone,
                "type": type,
                "employee_id": employee_id,
                "max_weekly_hours": max_weekly_hours,
                "punch_id": punch_id,
                "invited": invited,
                "invite_accepted": invite_accepted,
                "is_new": is_new,
                "identity_id": identity_id,
                "preferred_first_name": preferred_first_name,
                "preferred_last_name": preferred_last_name,
                "pronouns": pronouns,
                "created": created,
                "modified": modified,
                "appear_as_employee": appear_as_employee,
                "subscribe_to_updates": subscribe_to_updates,
                "language": language,
                "push": push,
                "skill_level": skill_level,
                "hourly_wage": hourly_wage,
                "wage_type": wage_type,
                "sms_me_schedules": sms_me_schedules,
                "notify_ot_risk": notify_ot_risk,
                "permissions_template_id": permissions_template_id,
                "meta": meta,
            }
    
    postal_zip: MetaOapg.properties.postal_zip
    notes: MetaOapg.properties.notes
    city: MetaOapg.properties.city
    invite_accepted: MetaOapg.properties.invite_accepted
    timezone: MetaOapg.properties.timezone
    birth_date: MetaOapg.properties.birth_date
    type: MetaOapg.properties.type
    punch_id: MetaOapg.properties.punch_id
    id: MetaOapg.properties.id
    invite_status: MetaOapg.properties.invite_status
    first_name: MetaOapg.properties.first_name
    email: MetaOapg.properties.email
    max_weekly_hours: MetaOapg.properties.max_weekly_hours
    address: MetaOapg.properties.address
    company_id: MetaOapg.properties.company_id
    is_new: MetaOapg.properties.is_new
    last_login: schemas.AnyTypeSchema
    invited: MetaOapg.properties.invited
    active: MetaOapg.properties.active
    last_name: MetaOapg.properties.last_name
    photo: MetaOapg.properties.photo
    home_number: MetaOapg.properties.home_number
    hire_date: MetaOapg.properties.hire_date
    employee_id: MetaOapg.properties.employee_id
    prov_state: MetaOapg.properties.prov_state
    mobile_number: MetaOapg.properties.mobile_number
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobile_number"]) -> MetaOapg.properties.mobile_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home_number"]) -> MetaOapg.properties.home_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> MetaOapg.properties.birth_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_zip"]) -> MetaOapg.properties.postal_zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prov_state"]) -> MetaOapg.properties.prov_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_status"]) -> MetaOapg.properties.invite_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photo"]) -> MetaOapg.properties.photo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hire_date"]) -> MetaOapg.properties.hire_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_id"]) -> MetaOapg.properties.employee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_weekly_hours"]) -> MetaOapg.properties.max_weekly_hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punch_id"]) -> MetaOapg.properties.punch_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invited"]) -> MetaOapg.properties.invited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_accepted"]) -> MetaOapg.properties.invite_accepted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_new"]) -> MetaOapg.properties.is_new: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identity_id"]) -> MetaOapg.properties.identity_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_first_name"]) -> MetaOapg.properties.preferred_first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_last_name"]) -> MetaOapg.properties.preferred_last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pronouns"]) -> MetaOapg.properties.pronouns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appear_as_employee"]) -> MetaOapg.properties.appear_as_employee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribe_to_updates"]) -> MetaOapg.properties.subscribe_to_updates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push"]) -> MetaOapg.properties.push: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skill_level"]) -> MetaOapg.properties.skill_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly_wage"]) -> MetaOapg.properties.hourly_wage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage_type"]) -> MetaOapg.properties.wage_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sms_me_schedules"]) -> MetaOapg.properties.sms_me_schedules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notify_ot_risk"]) -> MetaOapg.properties.notify_ot_risk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions_template_id"]) -> MetaOapg.properties.permissions_template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'UsersListResponseDataItemMeta': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "company_id", "first_name", "last_name", "email", "mobile_number", "home_number", "birth_date", "address", "postal_zip", "city", "prov_state", "invite_status", "active", "photo", "notes", "hire_date", "timezone", "type", "employee_id", "max_weekly_hours", "punch_id", "invited", "invite_accepted", "is_new", "identity_id", "preferred_first_name", "preferred_last_name", "pronouns", "created", "modified", "appear_as_employee", "subscribe_to_updates", "language", "push", "skill_level", "hourly_wage", "wage_type", "sms_me_schedules", "notify_ot_risk", "permissions_template_id", "meta", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobile_number"]) -> MetaOapg.properties.mobile_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home_number"]) -> MetaOapg.properties.home_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> MetaOapg.properties.birth_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_zip"]) -> MetaOapg.properties.postal_zip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prov_state"]) -> MetaOapg.properties.prov_state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_status"]) -> MetaOapg.properties.invite_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photo"]) -> MetaOapg.properties.photo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hire_date"]) -> MetaOapg.properties.hire_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_id"]) -> MetaOapg.properties.employee_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_weekly_hours"]) -> MetaOapg.properties.max_weekly_hours: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punch_id"]) -> MetaOapg.properties.punch_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invited"]) -> MetaOapg.properties.invited: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_accepted"]) -> MetaOapg.properties.invite_accepted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_new"]) -> MetaOapg.properties.is_new: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identity_id"]) -> typing.Union[MetaOapg.properties.identity_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_first_name"]) -> typing.Union[MetaOapg.properties.preferred_first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_last_name"]) -> typing.Union[MetaOapg.properties.preferred_last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pronouns"]) -> typing.Union[MetaOapg.properties.pronouns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> typing.Union[MetaOapg.properties.modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appear_as_employee"]) -> typing.Union[MetaOapg.properties.appear_as_employee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribe_to_updates"]) -> typing.Union[MetaOapg.properties.subscribe_to_updates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push"]) -> typing.Union[MetaOapg.properties.push, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skill_level"]) -> typing.Union[MetaOapg.properties.skill_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly_wage"]) -> typing.Union[MetaOapg.properties.hourly_wage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage_type"]) -> typing.Union[MetaOapg.properties.wage_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sms_me_schedules"]) -> typing.Union[MetaOapg.properties.sms_me_schedules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notify_ot_risk"]) -> typing.Union[MetaOapg.properties.notify_ot_risk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions_template_id"]) -> typing.Union[MetaOapg.properties.permissions_template_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['UsersListResponseDataItemMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "company_id", "first_name", "last_name", "email", "mobile_number", "home_number", "birth_date", "address", "postal_zip", "city", "prov_state", "invite_status", "active", "photo", "notes", "hire_date", "timezone", "type", "employee_id", "max_weekly_hours", "punch_id", "invited", "invite_accepted", "is_new", "identity_id", "preferred_first_name", "preferred_last_name", "pronouns", "created", "modified", "appear_as_employee", "subscribe_to_updates", "language", "push", "skill_level", "hourly_wage", "wage_type", "sms_me_schedules", "notify_ot_risk", "permissions_template_id", "meta", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        postal_zip: typing.Union[MetaOapg.properties.postal_zip, None, str, ],
        notes: typing.Union[MetaOapg.properties.notes, None, str, ],
        city: typing.Union[MetaOapg.properties.city, None, str, ],
        invite_accepted: typing.Union[MetaOapg.properties.invite_accepted, None, str, ],
        timezone: typing.Union[MetaOapg.properties.timezone, None, str, ],
        birth_date: typing.Union[MetaOapg.properties.birth_date, None, str, date, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        punch_id: typing.Union[MetaOapg.properties.punch_id, None, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        invite_status: typing.Union[MetaOapg.properties.invite_status, str, ],
        first_name: typing.Union[MetaOapg.properties.first_name, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        max_weekly_hours: typing.Union[MetaOapg.properties.max_weekly_hours, str, ],
        address: typing.Union[MetaOapg.properties.address, None, str, ],
        company_id: typing.Union[MetaOapg.properties.company_id, decimal.Decimal, int, ],
        is_new: typing.Union[MetaOapg.properties.is_new, bool, ],
        last_login: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        invited: typing.Union[MetaOapg.properties.invited, None, str, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        last_name: typing.Union[MetaOapg.properties.last_name, str, ],
        photo: typing.Union[MetaOapg.properties.photo, None, str, ],
        home_number: typing.Union[MetaOapg.properties.home_number, None, str, ],
        hire_date: typing.Union[MetaOapg.properties.hire_date, None, str, date, ],
        employee_id: typing.Union[MetaOapg.properties.employee_id, None, str, ],
        prov_state: typing.Union[MetaOapg.properties.prov_state, None, str, ],
        mobile_number: typing.Union[MetaOapg.properties.mobile_number, None, str, ],
        identity_id: typing.Union[MetaOapg.properties.identity_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        preferred_first_name: typing.Union[MetaOapg.properties.preferred_first_name, None, str, schemas.Unset] = schemas.unset,
        preferred_last_name: typing.Union[MetaOapg.properties.preferred_last_name, None, str, schemas.Unset] = schemas.unset,
        pronouns: typing.Union[MetaOapg.properties.pronouns, None, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        modified: typing.Union[MetaOapg.properties.modified, str, schemas.Unset] = schemas.unset,
        appear_as_employee: typing.Union[MetaOapg.properties.appear_as_employee, bool, schemas.Unset] = schemas.unset,
        subscribe_to_updates: typing.Union[MetaOapg.properties.subscribe_to_updates, bool, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        push: typing.Union[MetaOapg.properties.push, bool, schemas.Unset] = schemas.unset,
        skill_level: typing.Union[MetaOapg.properties.skill_level, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hourly_wage: typing.Union[MetaOapg.properties.hourly_wage, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wage_type: typing.Union[MetaOapg.properties.wage_type, None, str, schemas.Unset] = schemas.unset,
        sms_me_schedules: typing.Union[MetaOapg.properties.sms_me_schedules, None, bool, schemas.Unset] = schemas.unset,
        notify_ot_risk: typing.Union[MetaOapg.properties.notify_ot_risk, None, bool, schemas.Unset] = schemas.unset,
        permissions_template_id: typing.Union[MetaOapg.properties.permissions_template_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        meta: typing.Union['UsersListResponseDataItemMeta', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersListResponseDataItem':
        return super().__new__(
            cls,
            *args,
            postal_zip=postal_zip,
            notes=notes,
            city=city,
            invite_accepted=invite_accepted,
            timezone=timezone,
            birth_date=birth_date,
            type=type,
            punch_id=punch_id,
            id=id,
            invite_status=invite_status,
            first_name=first_name,
            email=email,
            max_weekly_hours=max_weekly_hours,
            address=address,
            company_id=company_id,
            is_new=is_new,
            last_login=last_login,
            invited=invited,
            active=active,
            last_name=last_name,
            photo=photo,
            home_number=home_number,
            hire_date=hire_date,
            employee_id=employee_id,
            prov_state=prov_state,
            mobile_number=mobile_number,
            identity_id=identity_id,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            pronouns=pronouns,
            created=created,
            modified=modified,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            language=language,
            push=push,
            skill_level=skill_level,
            hourly_wage=hourly_wage,
            wage_type=wage_type,
            sms_me_schedules=sms_me_schedules,
            notify_ot_risk=notify_ot_risk,
            permissions_template_id=permissions_template_id,
            meta=meta,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.users_list_response_data_item_meta import UsersListResponseDataItemMeta
