# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class UsersCreateNewUserRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "location_ids",
            "last_name",
            "type",
            "first_name",
            "department_ids",
        }
        
        class properties:
            first_name = schemas.StrSchema
            last_name = schemas.StrSchema
        
            @staticmethod
            def location_ids() -> typing.Type['UsersCreateNewUserRequestLocationIds']:
                return UsersCreateNewUserRequestLocationIds
        
            @staticmethod
            def department_ids() -> typing.Type['UsersCreateNewUserRequestDepartmentIds']:
                return UsersCreateNewUserRequestDepartmentIds
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMPLOYEE(cls):
                    return cls("employee")
                
                @schemas.classproperty
                def ASST_MANAGER(cls):
                    return cls("asst_manager")
                
                @schemas.classproperty
                def MANAGER(cls):
                    return cls("manager")
            
            
            class preferred_first_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'preferred_first_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class preferred_last_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'preferred_last_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def role_ids() -> typing.Type['UsersCreateNewUserRequestRoleIds']:
                return UsersCreateNewUserRequestRoleIds
            email = schemas.StrSchema
            
            
            class mobile_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobile_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class home_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'home_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class postal_zip(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'postal_zip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class prov_state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'prov_state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invite_user(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invite_user':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hire_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hire_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employee_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class punch_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'punch_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class birth_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'birth_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class language(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EN(cls):
                    return cls("en")
                
                @schemas.classproperty
                def ES(cls):
                    return cls("es")
                
                @schemas.classproperty
                def FR(cls):
                    return cls("fr")
            
            
            class appear_as_employee(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appear_as_employee':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class subscribe_to_updates(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscribe_to_updates':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class max_weekly_hours(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'max_weekly_hours':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wage_cents(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wage_cents':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class wage_type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hourly": "HOURLY",
                        "weekly_salary": "WEEKLY_SALARY",
                    }
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("hourly")
                
                @schemas.classproperty
                def WEEKLY_SALARY(cls):
                    return cls("weekly_salary")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wage_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def wages() -> typing.Type['UsersCreateNewUserRequestWages']:
                return UsersCreateNewUserRequestWages
            
            
            class permissions_template_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permissions_template_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "first_name": first_name,
                "last_name": last_name,
                "location_ids": location_ids,
                "department_ids": department_ids,
                "type": type,
                "preferred_first_name": preferred_first_name,
                "preferred_last_name": preferred_last_name,
                "role_ids": role_ids,
                "email": email,
                "mobile_number": mobile_number,
                "home_number": home_number,
                "address": address,
                "postal_zip": postal_zip,
                "city": city,
                "prov_state": prov_state,
                "invite_user": invite_user,
                "notes": notes,
                "hire_date": hire_date,
                "employee_id": employee_id,
                "punch_id": punch_id,
                "birth_date": birth_date,
                "language": language,
                "appear_as_employee": appear_as_employee,
                "subscribe_to_updates": subscribe_to_updates,
                "max_weekly_hours": max_weekly_hours,
                "wage_cents": wage_cents,
                "wage_type": wage_type,
                "wages": wages,
                "permissions_template_id": permissions_template_id,
            }
    
    location_ids: 'UsersCreateNewUserRequestLocationIds'
    last_name: MetaOapg.properties.last_name
    type: MetaOapg.properties.type
    first_name: MetaOapg.properties.first_name
    department_ids: 'UsersCreateNewUserRequestDepartmentIds'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_ids"]) -> 'UsersCreateNewUserRequestLocationIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department_ids"]) -> 'UsersCreateNewUserRequestDepartmentIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_first_name"]) -> MetaOapg.properties.preferred_first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_last_name"]) -> MetaOapg.properties.preferred_last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_ids"]) -> 'UsersCreateNewUserRequestRoleIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobile_number"]) -> MetaOapg.properties.mobile_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home_number"]) -> MetaOapg.properties.home_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_zip"]) -> MetaOapg.properties.postal_zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prov_state"]) -> MetaOapg.properties.prov_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_user"]) -> MetaOapg.properties.invite_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hire_date"]) -> MetaOapg.properties.hire_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_id"]) -> MetaOapg.properties.employee_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["punch_id"]) -> MetaOapg.properties.punch_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> MetaOapg.properties.birth_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appear_as_employee"]) -> MetaOapg.properties.appear_as_employee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribe_to_updates"]) -> MetaOapg.properties.subscribe_to_updates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_weekly_hours"]) -> MetaOapg.properties.max_weekly_hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage_cents"]) -> MetaOapg.properties.wage_cents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage_type"]) -> MetaOapg.properties.wage_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wages"]) -> 'UsersCreateNewUserRequestWages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions_template_id"]) -> MetaOapg.properties.permissions_template_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_name", "last_name", "location_ids", "department_ids", "type", "preferred_first_name", "preferred_last_name", "role_ids", "email", "mobile_number", "home_number", "address", "postal_zip", "city", "prov_state", "invite_user", "notes", "hire_date", "employee_id", "punch_id", "birth_date", "language", "appear_as_employee", "subscribe_to_updates", "max_weekly_hours", "wage_cents", "wage_type", "wages", "permissions_template_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_ids"]) -> 'UsersCreateNewUserRequestLocationIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department_ids"]) -> 'UsersCreateNewUserRequestDepartmentIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_first_name"]) -> typing.Union[MetaOapg.properties.preferred_first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_last_name"]) -> typing.Union[MetaOapg.properties.preferred_last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_ids"]) -> typing.Union['UsersCreateNewUserRequestRoleIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobile_number"]) -> typing.Union[MetaOapg.properties.mobile_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home_number"]) -> typing.Union[MetaOapg.properties.home_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_zip"]) -> typing.Union[MetaOapg.properties.postal_zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prov_state"]) -> typing.Union[MetaOapg.properties.prov_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_user"]) -> typing.Union[MetaOapg.properties.invite_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hire_date"]) -> typing.Union[MetaOapg.properties.hire_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_id"]) -> typing.Union[MetaOapg.properties.employee_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["punch_id"]) -> typing.Union[MetaOapg.properties.punch_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union[MetaOapg.properties.birth_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appear_as_employee"]) -> typing.Union[MetaOapg.properties.appear_as_employee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribe_to_updates"]) -> typing.Union[MetaOapg.properties.subscribe_to_updates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_weekly_hours"]) -> typing.Union[MetaOapg.properties.max_weekly_hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage_cents"]) -> typing.Union[MetaOapg.properties.wage_cents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage_type"]) -> typing.Union[MetaOapg.properties.wage_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wages"]) -> typing.Union['UsersCreateNewUserRequestWages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions_template_id"]) -> typing.Union[MetaOapg.properties.permissions_template_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_name", "last_name", "location_ids", "department_ids", "type", "preferred_first_name", "preferred_last_name", "role_ids", "email", "mobile_number", "home_number", "address", "postal_zip", "city", "prov_state", "invite_user", "notes", "hire_date", "employee_id", "punch_id", "birth_date", "language", "appear_as_employee", "subscribe_to_updates", "max_weekly_hours", "wage_cents", "wage_type", "wages", "permissions_template_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        location_ids: 'UsersCreateNewUserRequestLocationIds',
        last_name: typing.Union[MetaOapg.properties.last_name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        first_name: typing.Union[MetaOapg.properties.first_name, str, ],
        department_ids: 'UsersCreateNewUserRequestDepartmentIds',
        preferred_first_name: typing.Union[MetaOapg.properties.preferred_first_name, None, str, schemas.Unset] = schemas.unset,
        preferred_last_name: typing.Union[MetaOapg.properties.preferred_last_name, None, str, schemas.Unset] = schemas.unset,
        role_ids: typing.Union['UsersCreateNewUserRequestRoleIds', schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        mobile_number: typing.Union[MetaOapg.properties.mobile_number, None, str, schemas.Unset] = schemas.unset,
        home_number: typing.Union[MetaOapg.properties.home_number, None, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, None, str, schemas.Unset] = schemas.unset,
        postal_zip: typing.Union[MetaOapg.properties.postal_zip, None, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, None, str, schemas.Unset] = schemas.unset,
        prov_state: typing.Union[MetaOapg.properties.prov_state, None, str, schemas.Unset] = schemas.unset,
        invite_user: typing.Union[MetaOapg.properties.invite_user, None, bool, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        hire_date: typing.Union[MetaOapg.properties.hire_date, None, str, date, schemas.Unset] = schemas.unset,
        employee_id: typing.Union[MetaOapg.properties.employee_id, None, str, schemas.Unset] = schemas.unset,
        punch_id: typing.Union[MetaOapg.properties.punch_id, None, str, schemas.Unset] = schemas.unset,
        birth_date: typing.Union[MetaOapg.properties.birth_date, None, str, date, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        appear_as_employee: typing.Union[MetaOapg.properties.appear_as_employee, None, bool, schemas.Unset] = schemas.unset,
        subscribe_to_updates: typing.Union[MetaOapg.properties.subscribe_to_updates, None, bool, schemas.Unset] = schemas.unset,
        max_weekly_hours: typing.Union[MetaOapg.properties.max_weekly_hours, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wage_cents: typing.Union[MetaOapg.properties.wage_cents, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wage_type: typing.Union[MetaOapg.properties.wage_type, None, str, schemas.Unset] = schemas.unset,
        wages: typing.Union['UsersCreateNewUserRequestWages', schemas.Unset] = schemas.unset,
        permissions_template_id: typing.Union[MetaOapg.properties.permissions_template_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersCreateNewUserRequest':
        return super().__new__(
            cls,
            *args,
            location_ids=location_ids,
            last_name=last_name,
            type=type,
            first_name=first_name,
            department_ids=department_ids,
            preferred_first_name=preferred_first_name,
            preferred_last_name=preferred_last_name,
            role_ids=role_ids,
            email=email,
            mobile_number=mobile_number,
            home_number=home_number,
            address=address,
            postal_zip=postal_zip,
            city=city,
            prov_state=prov_state,
            invite_user=invite_user,
            notes=notes,
            hire_date=hire_date,
            employee_id=employee_id,
            punch_id=punch_id,
            birth_date=birth_date,
            language=language,
            appear_as_employee=appear_as_employee,
            subscribe_to_updates=subscribe_to_updates,
            max_weekly_hours=max_weekly_hours,
            wage_cents=wage_cents,
            wage_type=wage_type,
            wages=wages,
            permissions_template_id=permissions_template_id,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.users_create_new_user_request_department_ids import UsersCreateNewUserRequestDepartmentIds
from 7_shifts_python_sdk.model.users_create_new_user_request_location_ids import UsersCreateNewUserRequestLocationIds
from 7_shifts_python_sdk.model.users_create_new_user_request_role_ids import UsersCreateNewUserRequestRoleIds
from 7_shifts_python_sdk.model.users_create_new_user_request_wages import UsersCreateNewUserRequestWages
