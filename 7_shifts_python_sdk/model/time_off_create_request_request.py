# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class TimeOffCreateRequestRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "company_id",
            "from_date",
            "to_date",
            "user_id",
            "category",
            "partial",
            "status",
        }
        
        class properties:
            user_id = schemas.IntSchema
            company_id = schemas.IntSchema
            from_date = schemas.StrSchema
            to_date = schemas.StrSchema
            partial = schemas.BoolSchema
            status = schemas.IntSchema
            category = schemas.StrSchema
            
            
            class partial_from(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partial_from':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class partial_to(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partial_to':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            comments = schemas.StrSchema
        
            @staticmethod
            def hours() -> typing.Type['TimeOffCreateRequestRequestHours']:
                return TimeOffCreateRequestRequestHours
            
            
            class status_action_user_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_action_user_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            status_action_message = schemas.StrSchema
            __annotations__ = {
                "user_id": user_id,
                "company_id": company_id,
                "from_date": from_date,
                "to_date": to_date,
                "partial": partial,
                "status": status,
                "category": category,
                "partial_from": partial_from,
                "partial_to": partial_to,
                "comments": comments,
                "hours": hours,
                "status_action_user_id": status_action_user_id,
                "status_action_message": status_action_message,
            }
    
    company_id: MetaOapg.properties.company_id
    from_date: MetaOapg.properties.from_date
    to_date: MetaOapg.properties.to_date
    user_id: MetaOapg.properties.user_id
    category: MetaOapg.properties.category
    partial: MetaOapg.properties.partial
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_date"]) -> MetaOapg.properties.from_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to_date"]) -> MetaOapg.properties.to_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partial"]) -> MetaOapg.properties.partial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partial_from"]) -> MetaOapg.properties.partial_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partial_to"]) -> MetaOapg.properties.partial_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> 'TimeOffCreateRequestRequestHours': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_action_user_id"]) -> MetaOapg.properties.status_action_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_action_message"]) -> MetaOapg.properties.status_action_message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_id", "company_id", "from_date", "to_date", "partial", "status", "category", "partial_from", "partial_to", "comments", "hours", "status_action_user_id", "status_action_message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_date"]) -> MetaOapg.properties.from_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to_date"]) -> MetaOapg.properties.to_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partial"]) -> MetaOapg.properties.partial: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partial_from"]) -> typing.Union[MetaOapg.properties.partial_from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partial_to"]) -> typing.Union[MetaOapg.properties.partial_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union['TimeOffCreateRequestRequestHours', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_action_user_id"]) -> typing.Union[MetaOapg.properties.status_action_user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_action_message"]) -> typing.Union[MetaOapg.properties.status_action_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_id", "company_id", "from_date", "to_date", "partial", "status", "category", "partial_from", "partial_to", "comments", "hours", "status_action_user_id", "status_action_message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        company_id: typing.Union[MetaOapg.properties.company_id, decimal.Decimal, int, ],
        from_date: typing.Union[MetaOapg.properties.from_date, str, ],
        to_date: typing.Union[MetaOapg.properties.to_date, str, ],
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        partial: typing.Union[MetaOapg.properties.partial, bool, ],
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, ],
        partial_from: typing.Union[MetaOapg.properties.partial_from, None, str, schemas.Unset] = schemas.unset,
        partial_to: typing.Union[MetaOapg.properties.partial_to, None, str, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        hours: typing.Union['TimeOffCreateRequestRequestHours', schemas.Unset] = schemas.unset,
        status_action_user_id: typing.Union[MetaOapg.properties.status_action_user_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status_action_message: typing.Union[MetaOapg.properties.status_action_message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffCreateRequestRequest':
        return super().__new__(
            cls,
            *args,
            company_id=company_id,
            from_date=from_date,
            to_date=to_date,
            user_id=user_id,
            category=category,
            partial=partial,
            status=status,
            partial_from=partial_from,
            partial_to=partial_to,
            comments=comments,
            hours=hours,
            status_action_user_id=status_action_user_id,
            status_action_message=status_action_message,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.time_off_create_request_request_hours import TimeOffCreateRequestRequestHours
