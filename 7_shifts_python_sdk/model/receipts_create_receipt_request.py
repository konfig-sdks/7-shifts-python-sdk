# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class ReceiptsCreateReceiptRequest(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "receipt_id",
        }
        
        class properties:
            receipt_id = schemas.StrSchema
            __annotations__ = {
                "receipt_id": receipt_id,
            }
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "net_total",
                    "tip_details",
                    "receipt_date",
                    "receipt_lines",
                    "location_id",
                    "status",
                }
                
                class properties:
                    location_id = schemas.IntSchema
                    receipt_date = schemas.DateTimeSchema
                    net_total = schemas.IntSchema
                    
                    
                    class gross_total(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'gross_total':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class total_receipt_discounts(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 0
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'total_receipt_discounts':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class tips(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'tips':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class external_user_id(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'external_user_id':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class revenue_center(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'revenue_center':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class receipt_lines(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "external_category_ids",
                                        "quantity",
                                        "item_discount",
                                        "price",
                                        "net_item_price",
                                        "gross_item_price",
                                        "external_item_id",
                                        "status",
                                    }
                                    
                                    class properties:
                                        external_item_id = schemas.StrSchema
                                        
                                        
                                        class external_category_ids(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'external_category_ids':
                                                return super().__new__(
                                                    cls,
                                                    arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        quantity = schemas.IntSchema
                                        price = schemas.IntSchema
                                        gross_item_price = schemas.IntSchema
                                        net_item_price = schemas.IntSchema
                                        
                                        
                                        class item_discount(
                                            schemas.IntSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                inclusive_minimum = 0
                                        
                                        
                                        class status(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                enum_value_to_name = {
                                                    "open": "OPEN",
                                                    "closed": "CLOSED",
                                                    "voided": "VOIDED",
                                                    "deleted": "DELETED",
                                                }
                                            
                                            @schemas.classproperty
                                            def OPEN(cls):
                                                return cls("open")
                                            
                                            @schemas.classproperty
                                            def CLOSED(cls):
                                                return cls("closed")
                                            
                                            @schemas.classproperty
                                            def VOIDED(cls):
                                                return cls("voided")
                                            
                                            @schemas.classproperty
                                            def DELETED(cls):
                                                return cls("deleted")
                                        created = schemas.DateTimeSchema
                                        __annotations__ = {
                                            "external_item_id": external_item_id,
                                            "external_category_ids": external_category_ids,
                                            "quantity": quantity,
                                            "price": price,
                                            "gross_item_price": gross_item_price,
                                            "net_item_price": net_item_price,
                                            "item_discount": item_discount,
                                            "status": status,
                                            "created": created,
                                        }
                                
                                external_category_ids: MetaOapg.properties.external_category_ids
                                quantity: MetaOapg.properties.quantity
                                item_discount: MetaOapg.properties.item_discount
                                price: MetaOapg.properties.price
                                net_item_price: MetaOapg.properties.net_item_price
                                gross_item_price: MetaOapg.properties.gross_item_price
                                external_item_id: MetaOapg.properties.external_item_id
                                status: MetaOapg.properties.status
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["external_item_id"]) -> MetaOapg.properties.external_item_id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["external_category_ids"]) -> MetaOapg.properties.external_category_ids: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gross_item_price"]) -> MetaOapg.properties.gross_item_price: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["net_item_price"]) -> MetaOapg.properties.net_item_price: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["item_discount"]) -> MetaOapg.properties.item_discount: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["external_item_id", "external_category_ids", "quantity", "price", "gross_item_price", "net_item_price", "item_discount", "status", "created", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["external_item_id"]) -> MetaOapg.properties.external_item_id: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["external_category_ids"]) -> MetaOapg.properties.external_category_ids: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gross_item_price"]) -> MetaOapg.properties.gross_item_price: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["net_item_price"]) -> MetaOapg.properties.net_item_price: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["item_discount"]) -> MetaOapg.properties.item_discount: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["external_item_id", "external_category_ids", "quantity", "price", "gross_item_price", "net_item_price", "item_discount", "status", "created", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    external_category_ids: typing.Union[MetaOapg.properties.external_category_ids, list, tuple, ],
                                    quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, ],
                                    item_discount: typing.Union[MetaOapg.properties.item_discount, decimal.Decimal, int, ],
                                    price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, ],
                                    net_item_price: typing.Union[MetaOapg.properties.net_item_price, decimal.Decimal, int, ],
                                    gross_item_price: typing.Union[MetaOapg.properties.gross_item_price, decimal.Decimal, int, ],
                                    external_item_id: typing.Union[MetaOapg.properties.external_item_id, str, ],
                                    status: typing.Union[MetaOapg.properties.status, str, ],
                                    created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        external_category_ids=external_category_ids,
                                        quantity=quantity,
                                        item_discount=item_discount,
                                        price=price,
                                        net_item_price=net_item_price,
                                        gross_item_price=gross_item_price,
                                        external_item_id=external_item_id,
                                        status=status,
                                        created=created,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'receipt_lines':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class tip_details(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "type",
                                        "value",
                                    }
                                    
                                    class properties:
                                        
                                        
                                        class type(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                enum_value_to_name = {
                                                    "cc": "CC",
                                                    "cash": "CASH",
                                                    "declared": "DECLARED",
                                                    "net": "NET",
                                                    "total": "TOTAL",
                                                    "gratuity": "GRATUITY",
                                                }
                                            
                                            @schemas.classproperty
                                            def CC(cls):
                                                return cls("cc")
                                            
                                            @schemas.classproperty
                                            def CASH(cls):
                                                return cls("cash")
                                            
                                            @schemas.classproperty
                                            def DECLARED(cls):
                                                return cls("declared")
                                            
                                            @schemas.classproperty
                                            def NET(cls):
                                                return cls("net")
                                            
                                            @schemas.classproperty
                                            def TOTAL(cls):
                                                return cls("total")
                                            
                                            @schemas.classproperty
                                            def GRATUITY(cls):
                                                return cls("gratuity")
                                        value = schemas.IntSchema
                                        __annotations__ = {
                                            "type": type,
                                            "value": value,
                                        }
                                
                                type: MetaOapg.properties.type
                                value: MetaOapg.properties.value
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "value", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "value", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    type: typing.Union[MetaOapg.properties.type, str, ],
                                    value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        type=type,
                                        value=value,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'tip_details':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "open": "OPEN",
                                "closed": "CLOSED",
                                "voided": "VOIDED",
                                "deleted": "DELETED",
                            }
                        
                        @schemas.classproperty
                        def OPEN(cls):
                            return cls("open")
                        
                        @schemas.classproperty
                        def CLOSED(cls):
                            return cls("closed")
                        
                        @schemas.classproperty
                        def VOIDED(cls):
                            return cls("voided")
                        
                        @schemas.classproperty
                        def DELETED(cls):
                            return cls("deleted")
                    
                    
                    class order_type(
                        schemas.EnumBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "dine_in": "DINE_IN",
                                "delivery": "DELIVERY",
                                "take_out": "TAKE_OUT",
                            }
                        
                        @schemas.classproperty
                        def DINE_IN(cls):
                            return cls("dine_in")
                        
                        @schemas.classproperty
                        def DELIVERY(cls):
                            return cls("delivery")
                        
                        @schemas.classproperty
                        def TAKE_OUT(cls):
                            return cls("take_out")
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'order_type':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class dining_option(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'dining_option':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "location_id": location_id,
                        "receipt_date": receipt_date,
                        "net_total": net_total,
                        "gross_total": gross_total,
                        "total_receipt_discounts": total_receipt_discounts,
                        "tips": tips,
                        "external_user_id": external_user_id,
                        "revenue_center": revenue_center,
                        "receipt_lines": receipt_lines,
                        "tip_details": tip_details,
                        "status": status,
                        "order_type": order_type,
                        "dining_option": dining_option,
                    }
            
            net_total: MetaOapg.properties.net_total
            tip_details: MetaOapg.properties.tip_details
            receipt_date: MetaOapg.properties.receipt_date
            receipt_lines: MetaOapg.properties.receipt_lines
            location_id: MetaOapg.properties.location_id
            status: MetaOapg.properties.status
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["receipt_date"]) -> MetaOapg.properties.receipt_date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["net_total"]) -> MetaOapg.properties.net_total: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["gross_total"]) -> MetaOapg.properties.gross_total: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["total_receipt_discounts"]) -> MetaOapg.properties.total_receipt_discounts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tips"]) -> MetaOapg.properties.tips: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["external_user_id"]) -> MetaOapg.properties.external_user_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["revenue_center"]) -> MetaOapg.properties.revenue_center: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["receipt_lines"]) -> MetaOapg.properties.receipt_lines: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tip_details"]) -> MetaOapg.properties.tip_details: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["order_type"]) -> MetaOapg.properties.order_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dining_option"]) -> MetaOapg.properties.dining_option: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["location_id", "receipt_date", "net_total", "gross_total", "total_receipt_discounts", "tips", "external_user_id", "revenue_center", "receipt_lines", "tip_details", "status", "order_type", "dining_option", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["receipt_date"]) -> MetaOapg.properties.receipt_date: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["net_total"]) -> MetaOapg.properties.net_total: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["gross_total"]) -> typing.Union[MetaOapg.properties.gross_total, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["total_receipt_discounts"]) -> typing.Union[MetaOapg.properties.total_receipt_discounts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tips"]) -> typing.Union[MetaOapg.properties.tips, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["external_user_id"]) -> typing.Union[MetaOapg.properties.external_user_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["revenue_center"]) -> typing.Union[MetaOapg.properties.revenue_center, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["receipt_lines"]) -> MetaOapg.properties.receipt_lines: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tip_details"]) -> MetaOapg.properties.tip_details: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["order_type"]) -> typing.Union[MetaOapg.properties.order_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dining_option"]) -> typing.Union[MetaOapg.properties.dining_option, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["location_id", "receipt_date", "net_total", "gross_total", "total_receipt_discounts", "tips", "external_user_id", "revenue_center", "receipt_lines", "tip_details", "status", "order_type", "dining_option", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                net_total: typing.Union[MetaOapg.properties.net_total, decimal.Decimal, int, ],
                tip_details: typing.Union[MetaOapg.properties.tip_details, list, tuple, ],
                receipt_date: typing.Union[MetaOapg.properties.receipt_date, str, datetime, ],
                receipt_lines: typing.Union[MetaOapg.properties.receipt_lines, list, tuple, ],
                location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, ],
                status: typing.Union[MetaOapg.properties.status, str, ],
                gross_total: typing.Union[MetaOapg.properties.gross_total, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                total_receipt_discounts: typing.Union[MetaOapg.properties.total_receipt_discounts, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                tips: typing.Union[MetaOapg.properties.tips, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                external_user_id: typing.Union[MetaOapg.properties.external_user_id, None, str, schemas.Unset] = schemas.unset,
                revenue_center: typing.Union[MetaOapg.properties.revenue_center, None, str, schemas.Unset] = schemas.unset,
                order_type: typing.Union[MetaOapg.properties.order_type, None, str, schemas.Unset] = schemas.unset,
                dining_option: typing.Union[MetaOapg.properties.dining_option, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    net_total=net_total,
                    tip_details=tip_details,
                    receipt_date=receipt_date,
                    receipt_lines=receipt_lines,
                    location_id=location_id,
                    status=status,
                    gross_total=gross_total,
                    total_receipt_discounts=total_receipt_discounts,
                    tips=tips,
                    external_user_id=external_user_id,
                    revenue_center=revenue_center,
                    order_type=order_type,
                    dining_option=dining_option,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]

    
    receipt_id: MetaOapg.properties.receipt_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt_id"]) -> MetaOapg.properties.receipt_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["receipt_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt_id"]) -> MetaOapg.properties.receipt_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["receipt_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        receipt_id: typing.Union[MetaOapg.properties.receipt_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReceiptsCreateReceiptRequest':
        return super().__new__(
            cls,
            *args,
            receipt_id=receipt_id,
            _configuration=_configuration,
            **kwargs,
        )
