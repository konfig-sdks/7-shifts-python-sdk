# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 7_shifts_python_sdk import schemas  # noqa: F401


class ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            user_id = schemas.NumberSchema
            date = schemas.StrSchema
            week_label = schemas.StrSchema
            day_label = schemas.StrSchema
            label = schemas.StrSchema
        
            @staticmethod
            def breaks() -> typing.Type['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks']:
                return ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks
            location_id = schemas.NumberSchema
            location_label = schemas.StrSchema
            role_id = schemas.NumberSchema
            role_label = schemas.StrSchema
            wage = schemas.NumberSchema
            status = schemas.NumberSchema
            salaried = schemas.BoolSchema
        
            @staticmethod
            def compliance_exceptions() -> typing.Type['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions']:
                return ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions
        
            @staticmethod
            def total() -> typing.Type['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal']:
                return ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal
            __annotations__ = {
                "user_id": user_id,
                "date": date,
                "week_label": week_label,
                "day_label": day_label,
                "label": label,
                "breaks": breaks,
                "location_id": location_id,
                "location_label": location_label,
                "role_id": role_id,
                "role_label": role_label,
                "wage": wage,
                "status": status,
                "salaried": salaried,
                "compliance_exceptions": compliance_exceptions,
                "total": total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["week_label"]) -> MetaOapg.properties.week_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_label"]) -> MetaOapg.properties.day_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breaks"]) -> 'ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_label"]) -> MetaOapg.properties.location_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_id"]) -> MetaOapg.properties.role_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_label"]) -> MetaOapg.properties.role_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wage"]) -> MetaOapg.properties.wage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salaried"]) -> MetaOapg.properties.salaried: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compliance_exceptions"]) -> 'ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> 'ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_id", "date", "week_label", "day_label", "label", "breaks", "location_id", "location_label", "role_id", "role_label", "wage", "status", "salaried", "compliance_exceptions", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["week_label"]) -> typing.Union[MetaOapg.properties.week_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_label"]) -> typing.Union[MetaOapg.properties.day_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breaks"]) -> typing.Union['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> typing.Union[MetaOapg.properties.location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_label"]) -> typing.Union[MetaOapg.properties.location_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_id"]) -> typing.Union[MetaOapg.properties.role_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_label"]) -> typing.Union[MetaOapg.properties.role_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wage"]) -> typing.Union[MetaOapg.properties.wage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salaried"]) -> typing.Union[MetaOapg.properties.salaried, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compliance_exceptions"]) -> typing.Union['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_id", "date", "week_label", "day_label", "label", "breaks", "location_id", "location_label", "role_id", "role_label", "wage", "status", "salaried", "compliance_exceptions", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        week_label: typing.Union[MetaOapg.properties.week_label, str, schemas.Unset] = schemas.unset,
        day_label: typing.Union[MetaOapg.properties.day_label, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        breaks: typing.Union['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks', schemas.Unset] = schemas.unset,
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        location_label: typing.Union[MetaOapg.properties.location_label, str, schemas.Unset] = schemas.unset,
        role_id: typing.Union[MetaOapg.properties.role_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        role_label: typing.Union[MetaOapg.properties.role_label, str, schemas.Unset] = schemas.unset,
        wage: typing.Union[MetaOapg.properties.wage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salaried: typing.Union[MetaOapg.properties.salaried, bool, schemas.Unset] = schemas.unset,
        compliance_exceptions: typing.Union['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions', schemas.Unset] = schemas.unset,
        total: typing.Union['ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItem':
        return super().__new__(
            cls,
            *args,
            user_id=user_id,
            date=date,
            week_label=week_label,
            day_label=day_label,
            label=label,
            breaks=breaks,
            location_id=location_id,
            location_label=location_label,
            role_id=role_id,
            role_label=role_label,
            wage=wage,
            status=status,
            salaried=salaried,
            compliance_exceptions=compliance_exceptions,
            total=total,
            _configuration=_configuration,
            **kwargs,
        )

from 7_shifts_python_sdk.model.reports_get_worked_hours_wages_response_users_item_weeks_item_shifts_item_breaks import ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks
from 7_shifts_python_sdk.model.reports_get_worked_hours_wages_response_users_item_weeks_item_shifts_item_compliance_exceptions import ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions
from 7_shifts_python_sdk.model.reports_get_worked_hours_wages_response_users_item_weeks_item_shifts_item_total import ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal
