# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.shifts_list_response_data_item_breaks import ShiftsListResponseDataItemBreaks

class ShiftsListResponseDataItem(BaseModel):
    # Shift ID
    id: int = Field(alias='id')

    # User ID
    user_id: typing.Optional[int] = Field(alias='user_id')

    # Start date time of the shift. UTC in ISO8601 format
    start: datetime = Field(alias='start')

    # End date time of the shift. UTC in ISO8601 format
    end: datetime = Field(alias='end')

    # If true the shift ends at closing time. If set end is not used.
    close: bool = Field(alias='close')

    # If true the shift ends at business decline.
    business_decline: bool = Field(alias='business_decline')

    # Department ID. Required if the location uses departments.
    department_id: typing.Optional[int] = Field(alias='department_id')

    # The ID of the location that the shift is assigned to.
    location_id: int = Field(alias='location_id')

    # Role ID. Required if the location uses roles.
    role_id: typing.Optional[int] = Field(alias='role_id')

    # Notes displayed on a shift
    notes: str = Field(alias='notes')

    # Whether or not the shift is a draft shift. Draft shifts are shifts that have not yet been published.
    draft: bool = Field(alias='draft')

    # Whether or not the individual assigned to the shift has been notified of the shifts existence.
    notified: bool = Field(alias='notified')

    # If true the shift is not assigned to any user. Open shifts can be requested by users.
    open: bool = Field(alias='open')

    # Shifts in a template that could not be assigned to any eligible employees.
    unassigned: bool = Field(alias='unassigned')

    # Specify the minimum user skill level required for the shift. Levels 1 - beginner, 2 - intermediate, 3 - Experienced.
    unassigned_skill_level: int = Field(alias='unassigned_skill_level')

    # Specifies the scope of who can pick up the shift.
    open_offer_type: Literal["all_location_members", "all_role_members", "set_of_location_members", "all_company_employees"] = Field(alias='open_offer_type')

    # Specified shift flags to track employee attendance
    attendance_status: Literal["none", "sick", "no_show", "late"] = Field(alias='attendance_status')

    # Current publication status of the shift
    publish_status: Literal["draft", "published", "draft_deleted", "published_deleted"] = Field(alias='publish_status')

    # The created date of the shift in UTC
    created: typing.Optional[datetime] = Field(alias='created')

    # The last modified date of the shift in UTC
    modified: typing.Optional[datetime] = Field(alias='modified')

    # Whether or not this shift is deleted.
    deleted: bool = Field(alias='deleted')

    # Whether or not this shift is soft-deleted.
    soft_deleted: typing.Optional[str] = Field(alias='soft_deleted')

    # Station Number
    station: int = Field(alias='station')

    # Station name
    station_name: typing.Optional[str] = Field(alias='station_name')

    # Station id
    station_id: typing.Optional[int] = Field(alias='station_id')

    # Read Only. The hourly wage for this shift. In cents.
    hourly_wage: typing.Optional[typing.Union[int, float]] = Field(None, alias='hourly_wage')

    # Specify the grace minutes they can clock-in late.
    late_minuets: typing.Optional[int] = Field(None, alias='late_minuets')

    breaks: typing.Optional[ShiftsListResponseDataItemBreaks] = Field(None, alias='breaks')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
