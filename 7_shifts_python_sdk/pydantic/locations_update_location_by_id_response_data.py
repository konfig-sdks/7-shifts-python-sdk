# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class LocationsUpdateLocationByIdResponseData(BaseModel):
    # Location ID
    id: int = Field(alias='id')

    # Company ID
    company_id: int = Field(alias='company_id')

    # Location name
    name: str = Field(alias='name')

    # Country
    country: str = Field(alias='country')

    # State or province
    state: typing.Optional[str] = Field(alias='state')

    # City
    city: typing.Optional[str] = Field(alias='city')

    # Full formatted address
    formatted_address: typing.Optional[str] = Field(alias='formatted_address')

    # Internal use
    place_id: typing.Optional[str] = Field(alias='place_id')

    # Timezone. Valid zone info name
    timezone: str = Field(alias='timezone')

    # Internal use
    hash: str = Field(alias='hash')

    # When true, department based budgeting is enabled
    department_based_budget: typing.Optional[bool] = Field(alias='department_based_budget')

    # Sunday closing time
    sun_hours_close: str = Field(alias='sun_hours_close')

    # Monday closing time
    mon_hours_close: str = Field(alias='mon_hours_close')

    # Tuesday closing time
    tue_hours_close: str = Field(alias='tue_hours_close')

    # Wednesday closing time
    wed_hours_close: str = Field(alias='wed_hours_close')

    # Thursday closing time
    thu_hours_close: str = Field(alias='thu_hours_close')

    # Friday closing time
    fri_hours_close: str = Field(alias='fri_hours_close')

    # Saturday closing time
    sat_hours_close: str = Field(alias='sat_hours_close')

    # Sunday opening time
    sun_hours_open: typing.Optional[str] = Field(alias='sun_hours_open')

    # Monday opening time
    mon_hours_open: typing.Optional[str] = Field(alias='mon_hours_open')

    # Tuesday opening time
    tue_hours_open: typing.Optional[str] = Field(alias='tue_hours_open')

    # Wednesday opening time
    wed_hours_open: typing.Optional[str] = Field(alias='wed_hours_open')

    # Thursday opening time
    thu_hours_open: typing.Optional[str] = Field(alias='thu_hours_open')

    # Friday opening time
    fri_hours_open: typing.Optional[str] = Field(alias='fri_hours_open')

    # Saturday opening time
    sat_hours_open: typing.Optional[str] = Field(alias='sat_hours_open')

    # If true, location is closed on Sunday
    sun_is_closed: typing.Optional[bool] = Field(alias='sun_is_closed')

    # If true, location is closed on Monday
    mon_is_closed: typing.Optional[bool] = Field(alias='mon_is_closed')

    # If true, location is closed on Tuesday
    tue_is_closed: typing.Optional[bool] = Field(alias='tue_is_closed')

    # If true, location is closed on Wednesday
    wed_is_closed: typing.Optional[bool] = Field(alias='wed_is_closed')

    # If true, location is closed on Thursday
    thu_is_closed: typing.Optional[bool] = Field(alias='thu_is_closed')

    # If true, location is closed on Friday
    fri_is_closed: typing.Optional[bool] = Field(alias='fri_is_closed')

    # If true, location is closed on Saturday
    sat_is_closed: typing.Optional[bool] = Field(alias='sat_is_closed')

    # If true end of shift feedback requests are enabled
    shift_feedback: bool = Field(alias='shift_feedback')

    # Message visible to all employees
    message: typing.Optional[str] = Field(alias='message')

    created: datetime = Field(alias='created')

    modified: datetime = Field(alias='modified')

    # Latitude
    lat: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='lat')

    # Longitude
    lng: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='lng')

    # Internal use
    timezone_updated: typing.Optional[typing.Optional[bool]] = Field(None, alias='timezone_updated')

    # Internal use
    mapping_id: typing.Optional[typing.Optional[str]] = Field(None, alias='mapping_id')

    # When true, holiday pay is enabled
    holiday_pay: typing.Optional[bool] = Field(None, alias='holiday_pay')

    # Time the log book is automatically send
    auto_send_log_book_time: typing.Optional[typing.Optional[str]] = Field(None, alias='auto_send_log_book_time')

    # If true the location is deleted
    deleted: typing.Optional[bool] = Field(None, alias='deleted')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
