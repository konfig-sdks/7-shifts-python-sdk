# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.reports_get_worked_hours_wages_response_users_item_weeks_item_shifts_item_breaks import ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks
from 7_shifts_python_sdk.pydantic.reports_get_worked_hours_wages_response_users_item_weeks_item_shifts_item_compliance_exceptions import ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions
from 7_shifts_python_sdk.pydantic.reports_get_worked_hours_wages_response_users_item_weeks_item_shifts_item_total import ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal

class ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItem(BaseModel):
    # User ID
    user_id: typing.Optional[typing.Union[int, float]] = Field(None, alias='user_id')

    # Date and time the shift or time punch started on
    date: typing.Optional[str] = Field(None, alias='date')

    # Work week the shift or time punch occurred in
    week_label: typing.Optional[str] = Field(None, alias='week_label')

    # Formatted day the shift or time punch started on
    day_label: typing.Optional[str] = Field(None, alias='day_label')

    # Start and end times of shift or time punch
    label: typing.Optional[str] = Field(None, alias='label')

    breaks: typing.Optional[ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemBreaks] = Field(None, alias='breaks')

    # Location ID
    location_id: typing.Optional[typing.Union[int, float]] = Field(None, alias='location_id')

    # Location name
    location_label: typing.Optional[str] = Field(None, alias='location_label')

    # Role ID
    role_id: typing.Optional[typing.Union[int, float]] = Field(None, alias='role_id')

    # Role name
    role_label: typing.Optional[str] = Field(None, alias='role_label')

    # Hourly wage
    wage: typing.Optional[typing.Union[int, float]] = Field(None, alias='wage')

    # Shift flag (late, no-show, sick)
    status: typing.Optional[typing.Union[int, float]] = Field(None, alias='status')

    # Whether the employee was salaried during this shift
    salaried: typing.Optional[bool] = Field(None, alias='salaried')

    compliance_exceptions: typing.Optional[ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemComplianceExceptions] = Field(None, alias='compliance_exceptions')

    total: typing.Optional[ReportsGetWorkedHoursWagesResponseUsersItemWeeksItemShiftsItemTotal] = Field(None, alias='total')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
