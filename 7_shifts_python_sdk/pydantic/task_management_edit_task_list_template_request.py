# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.task_management_edit_task_list_template_request_assignments import TaskManagementEditTaskListTemplateRequestAssignments
from 7_shifts_python_sdk.pydantic.task_management_edit_task_list_template_request_task_templates import TaskManagementEditTaskListTemplateRequestTaskTemplates

class TaskManagementEditTaskListTemplateRequest(BaseModel):
    title: typing.Optional[str] = Field(None, alias='title')

    description: typing.Optional[typing.Optional[str]] = Field(None, alias='description')

    status: typing.Optional[int] = Field(None, alias='status')

    task_templates: typing.Optional[TaskManagementEditTaskListTemplateRequestTaskTemplates] = Field(None, alias='task_templates')

    # recurrence rules as defined by the RFC 5545 spec
    recurrence: typing.Optional[str] = Field(None, alias='recurrence')

    assignments: typing.Optional[TaskManagementEditTaskListTemplateRequestAssignments] = Field(None, alias='assignments')

    due: typing.Optional[typing.Union[str]] = Field(None, alias='due')

    time_frame: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]]] = Field(None, alias='time_frame')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
