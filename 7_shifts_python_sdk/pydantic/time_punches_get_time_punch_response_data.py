# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.time_punches_get_time_punch_response_data_breaks import TimePunchesGetTimePunchResponseDataBreaks

class TimePunchesGetTimePunchResponseData(BaseModel):
    # Time punch ID
    id: int = Field(alias='id')

    # Shift ID. Can be unassigned
    shift_id: int = Field(alias='shift_id')

    # The 7shifts ID of the user who is clocking in.
    user_id: int = Field(alias='user_id')

    # If true the time punch can be edited by a manager. Set to false via POS integrations
    editable_punch: bool = Field(alias='editable_punch')

    # Role ID
    role_id: int = Field(alias='role_id')

    # Company ID
    company_id: int = Field(alias='company_id')

    # Location ID
    location_id: int = Field(alias='location_id')

    # Calculated hourly wage. Use the users_wages endpoint value for accuracy
    hourly_wage: int = Field(alias='hourly_wage')

    # If true the time punch is approved
    approved: bool = Field(alias='approved')

    # The start date and time when the user clocked in. Formatted as ISO8601 datetime in UTC timezone.
    clocked_in: datetime = Field(alias='clocked_in')

    # The start date and time when the user clocked out. Formatted as ISO8601 datetime in UTC timezone.
    clocked_out: typing.Optional[datetime] = Field(alias='clocked_out')

    # Additional notes for a shift
    notes: str = Field(alias='notes')

    # If true the time punch was auto clocked out
    auto_clocked_out: bool = Field(alias='auto_clocked_out')

    # If true the time punch was clocked in offline
    clocked_in_offline: bool = Field(alias='clocked_in_offline')

    # If true the time punch was clocked out offline
    clocked_out_offline: bool = Field(alias='clocked_out_offline')

    # Tips declared for the shift in cents
    tips: int = Field(alias='tips')

    # The date and time when created. Formatted as ISO8601 datetime in UTC timezone.
    created: typing.Optional[datetime] = Field(alias='created')

    # The date and time when last modified. Formatted as ISO8601 datetime in UTC timezone.
    modified: typing.Optional[datetime] = Field(alias='modified')

    # Department ID. Defaults to 0 if not defined.
    department_id: typing.Optional[typing.Optional[int]] = Field(None, alias='department_id')

    # The source of the time punch. 7shift apps will be web
    pos_type: typing.Optional[typing.Optional[str]] = Field(None, alias='pos_type')

    breaks: typing.Optional[TimePunchesGetTimePunchResponseDataBreaks] = Field(None, alias='breaks')

    # If true the time punch is deleted
    deleted: typing.Optional[bool] = Field(None, alias='deleted')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
