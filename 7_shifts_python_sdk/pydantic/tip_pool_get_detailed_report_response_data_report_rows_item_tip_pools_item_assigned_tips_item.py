# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class TipPoolGetDetailedReportResponseDataReportRowsItemTipPoolsItemAssignedTipsItem(BaseModel):
    # Employee ID
    employee_id: typing.Optional[str] = Field(alias='employee_id')

    # User ID
    user_id: typing.Optional[int] = Field(alias='user_id')

    # Employee first name
    first_name: str = Field(alias='first_name')

    # Employee last name
    last_name: str = Field(alias='last_name')

    # Role name
    role_name: typing.Optional[str] = Field(None, alias='role_name')

    # Department name
    department_name: typing.Optional[str] = Field(None, alias='department_name')

    # Time punch ID
    time_punch_id: typing.Optional[typing.Optional[int]] = Field(None, alias='time_punch_id')

    # Start date and time when the user clocked in. Formatted as ISO8601 datetime in UTC timezone.
    clocked_in: typing.Optional[typing.Optional[datetime]] = Field(None, alias='clocked_in')

    # End date and time when the user clocked out. Formatted as ISO8601 datetime in UTC timezone.
    clocked_out: typing.Optional[typing.Optional[datetime]] = Field(None, alias='clocked_out')

    # If true the time punch is approved
    approved: typing.Optional[bool] = Field(None, alias='approved')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
TipPoolGetDetailedReportResponseDataReportRowsItemTipPoolsItemAssignedTipsItem = typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]]
