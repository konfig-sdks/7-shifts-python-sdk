# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.users_bulk_create_request_item_department_ids import UsersBulkCreateRequestItemDepartmentIds
from 7_shifts_python_sdk.pydantic.users_bulk_create_request_item_location_ids import UsersBulkCreateRequestItemLocationIds
from 7_shifts_python_sdk.pydantic.users_bulk_create_request_item_role_ids import UsersBulkCreateRequestItemRoleIds
from 7_shifts_python_sdk.pydantic.users_bulk_create_request_item_wages import UsersBulkCreateRequestItemWages

class UsersBulkCreateRequestItem(BaseModel):
    # The user's first name
    first_name: str = Field(alias='first_name')

    # The user's last name
    last_name: str = Field(alias='last_name')

    location_ids: UsersBulkCreateRequestItemLocationIds = Field(alias='location_ids')

    department_ids: UsersBulkCreateRequestItemDepartmentIds = Field(alias='department_ids')

    # The type of this user
    type: Literal["employee", "asst_manager", "manager"] = Field(alias='type')

    # An optional alternate first name
    preferred_first_name: typing.Optional[typing.Optional[str]] = Field(None, alias='preferred_first_name')

    # An optional alternate last name
    preferred_last_name: typing.Optional[typing.Optional[str]] = Field(None, alias='preferred_last_name')

    role_ids: typing.Optional[UsersBulkCreateRequestItemRoleIds] = Field(None, alias='role_ids')

    # the user's email
    email: typing.Optional[str] = Field(None, alias='email')

    # The user's mobile phone number. Format with no spaces and include area code
    mobile_number: typing.Optional[typing.Optional[str]] = Field(None, alias='mobile_number')

    # The user's home phone number. Format with no spaces and include area code
    home_number: typing.Optional[typing.Optional[str]] = Field(None, alias='home_number')

    # The user's address
    address: typing.Optional[typing.Optional[str]] = Field(None, alias='address')

    # The user's postal code or zip code
    postal_zip: typing.Optional[typing.Optional[str]] = Field(None, alias='postal_zip')

    # The user's city
    city: typing.Optional[typing.Optional[str]] = Field(None, alias='city')

    # The user's province or state
    prov_state: typing.Optional[typing.Optional[str]] = Field(None, alias='prov_state')

    # If true Invite the user to 7shifts
    invite_user: typing.Optional[typing.Optional[bool]] = Field(None, alias='invite_user')

    # Notes associated with this user
    notes: typing.Optional[typing.Optional[str]] = Field(None, alias='notes')

    # The hire date of this user. Format YYYY-MM-DD
    hire_date: typing.Optional[typing.Optional[date]] = Field(None, alias='hire_date')

    # Either an employee ID or an ID assigned by your payroll provider that is used in your payroll export
    employee_id: typing.Optional[typing.Optional[str]] = Field(None, alias='employee_id')

    # The punch ID they punch in/out with. If no value is provided a new one will be created
    punch_id: typing.Optional[typing.Optional[int]] = Field(None, alias='punch_id')

    # The user's birthdate. Format YYYY-MM-DD
    birth_date: typing.Optional[typing.Optional[date]] = Field(None, alias='birth_date')

    # The user's preferred language. Default value is en
    language: typing.Optional[Literal["en", "es", "fr"]] = Field(None, alias='language')

    # User should appear in the system as an employee. Applies to admin users only
    appear_as_employee: typing.Optional[typing.Optional[bool]] = Field(None, alias='appear_as_employee')

    # Subscribe this user to updates from 7shifts. This includes announcing new features for 7shifts
    subscribe_to_updates: typing.Optional[typing.Optional[bool]] = Field(None, alias='subscribe_to_updates')

    # The maximum weekly hours this user is set to work
    max_weekly_hours: typing.Optional[typing.Optional[int]] = Field(None, alias='max_weekly_hours')

    wage_cents: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='wage_cents')

    # The wage type
    wage_type: typing.Optional[Literal["hourly", "weekly_salary"]] = Field(None, alias='wage_type')

    wages: typing.Optional[UsersBulkCreateRequestItemWages] = Field(None, alias='wages')

    # Id of a permissions template the user will be assigned to and granted permissions from.
    permissions_template_id: typing.Optional[typing.Optional[int]] = Field(None, alias='permissions_template_id')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
