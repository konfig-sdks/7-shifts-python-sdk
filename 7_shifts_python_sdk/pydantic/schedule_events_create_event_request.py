# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.schedule_events_create_event_request_location_ids import ScheduleEventsCreateEventRequestLocationIds

class ScheduleEventsCreateEventRequest(BaseModel):
    # The name of the event
    title: str = Field(alias='title')

    location_ids: ScheduleEventsCreateEventRequestLocationIds = Field(alias='location_ids')

    # Start date
    start_date: str = Field(alias='start_date')

    # Start time
    start_time: str = Field(alias='start_time')

    # End date for multi-day events
    end_date: str = Field(alias='end_date')

    # End time
    end_time: str = Field(alias='end_time')

    # If true, the event is a multi-day event
    is_multi_day: bool = Field(alias='is_multi_day')

    # Description for event
    description: typing.Optional[typing.Optional[str]] = Field(None, alias='description')

    # A hex number representing the color
    color: typing.Optional[typing.Optional[str]] = Field(None, alias='color')

    # Recurrence rules as defined by the RFC 5545 spec
    recurrence: typing.Optional[typing.Optional[str]] = Field(None, alias='recurrence')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
