# coding: utf-8

"""
    7shifts API

    7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.

    The version of the OpenAPI document: 2023-05-01
    Contact: api-support@7shifts.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from 7_shifts_python_sdk.pydantic.shifts_create_new_shift_request_breaks import ShiftsCreateNewShiftRequestBreaks

class ShiftsCreateNewShiftRequest(BaseModel):
    # Shift ID
    location_id: int = Field(alias='location_id')

    # Start date time of the shift. UTC in ISO8601 format.
    start: datetime = Field(alias='start')

    # End date time of the shift. UTC in ISO8601 format.
    end: datetime = Field(alias='end')

    # User ID
    user_id: typing.Optional[int] = Field(None, alias='user_id')

    # Department ID. Required if the location uses departments.
    department_id: typing.Optional[typing.Optional[int]] = Field(None, alias='department_id')

    # Role ID. Required if the location uses roles.
    role_id: typing.Optional[typing.Optional[int]] = Field(None, alias='role_id')

    # Station ID
    station_id: typing.Optional[typing.Optional[int]] = Field(None, alias='station_id')

    # Set to true if the shift ends at closing time. If set, end is not used.
    close: typing.Optional[typing.Optional[bool]] = Field(None, alias='close')

    # Set to true if the shift ends at business decline.
    business_decline: typing.Optional[typing.Optional[bool]] = Field(None, alias='business_decline')

    # Notes displayed on a shift.
    notes: typing.Optional[typing.Optional[str]] = Field(None, alias='notes')

    # If true the shift is not published.
    draft: typing.Optional[typing.Optional[bool]] = Field(None, alias='draft')

    # If true the user has been notified of the published shift.
    notified: typing.Optional[typing.Optional[bool]] = Field(None, alias='notified')

    # Set to true if the shift is not assigned to any user. Open shifts can be requested by users.
    open: typing.Optional[typing.Optional[bool]] = Field(None, alias='open')

    # Set when open is true. Set to 1 for everyone can request an open shift; set to 1 if only offered to specified role.
    open_offer_type: typing.Optional[typing.Optional[int]] = Field(None, alias='open_offer_type')

    # Internal use only
    unassigned: typing.Optional[typing.Optional[bool]] = Field(None, alias='unassigned')

    # The skill level required for this shift.
    unassigned_skill_level: typing.Optional[Literal[1, 2, 3]] = Field(None, alias='unassigned_skill_level')

    # Shift status type. 0 - none, 1 - sick, 2 - no show, 3 - late, 4 - call out, 5 - left late.
    status: typing.Optional[Literal[0, 1, 2, 3, 4, 5]] = Field(None, alias='status')

    # Number of minutes a user can clock in late after the shift starts.
    late_minutes: typing.Optional[typing.Optional[int]] = Field(None, alias='late_minutes')

    breaks: typing.Optional[ShiftsCreateNewShiftRequestBreaks] = Field(None, alias='breaks')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
